{
    "paths": {
        "/docs/scalar-ui/favicon.svg": {
            "get": {
                "operationId": "Assets.at",
                "tags": [
                    "routes"
                ]
            }
        },
        "/docs/scalar-ui/api-reference.js": {
            "get": {
                "operationId": "Assets.at",
                "tags": [
                    "routes"
                ]
            }
        },
        "/docs/swagger-ui/index.html": {
            "get": {
                "operationId": "Assets.at",
                "tags": [
                    "routes"
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/accounting/journalEntries": {
            "get": {
                "operationId": "JournalEntryController.listJournalEntryDownloads",
                "tags": [
                    "accounting"
                ],
                "summary": "List all the journal entry dowloads for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.JournalEntryGenerationResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/accounting/journalEntries/{id}": {
            "get": {
                "operationId": "JournalEntryController.getJournalEntryDownload",
                "tags": [
                    "accounting"
                ],
                "summary": "Download a set of journal entries",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/accounting/updateOpenPeriodJournalEntry/{period}": {
            "post": {
                "operationId": "AccountingPeriodController.updateOpenPeriodJournalEntryGeneration",
                "tags": [
                    "accounting"
                ],
                "summary": "Update the JournalEntryGeneration for an open accounting period. Generates a file containing the JournalEntryLines up to the current date for the given facility.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "period",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2025-01",
                            "pattern": "^\\d{4}-\\d{2}$",
                            "description": "Year and month in YYYY-MM format"
                        }
                    },
                    {
                        "in": "query",
                        "name": "disableExternalSync",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "type": "string",
                                    "example": "attachment; filename=\"data.csv\""
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/accounting/departments": {
            "get": {
                "operationId": "AccountingSystemController.getDepartments",
                "tags": [
                    "accounting"
                ],
                "summary": "Get all departments for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.repositories.accounting.Department"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "forceRefresh",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/accounting/locations": {
            "get": {
                "operationId": "AccountingSystemController.getLocations",
                "tags": [
                    "accounting"
                ],
                "summary": "Get all locations for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.repositories.accounting.Location"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "forceRefresh",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/accounting/ledgerAccounts": {
            "get": {
                "operationId": "AccountingSystemController.getLedgerAccounts",
                "tags": [
                    "accounting"
                ],
                "summary": "Get all ledger accounts for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.repositories.accounting.LedgerAccount"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "forceRefresh",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/appraisal": {
            "get": {
                "operationId": "AssessmentController.getAppraisal",
                "tags": [
                    "assessment"
                ],
                "summary": "retrieve the current appraisal",
                "deprecated": true,
                "description": "This operation is deprecated; use the version that is referenced as \"assessment\"",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "withOriginalSettings",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "if true, gets the appraisal as is (could even be empty), if false, gets the appraisal updated to the latest settings if appropriate"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AppraisalStatus"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "patch": {
                "operationId": "AssessmentController.patchAppraisal",
                "tags": [
                    "assessment"
                ],
                "summary": "partial update (\"merge patch\")",
                "deprecated": true,
                "description": "This operation is deprecated; use the version that is referenced as \"assessment\"",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AppraisalStatus"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/appraisal/finalize": {
            "post": {
                "operationId": "AssessmentController.finalizeAppraisal",
                "tags": [
                    "assessment"
                ],
                "summary": "finalize an appraisal, which saves a completed snapshot of the appraisal and updates the LOC on the person",
                "description": "This operation is deprecated; use the version that is referenced as \"assessment\"",
                "deprecated": true,
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/assessment": {
            "get": {
                "operationId": "AssessmentController.get",
                "tags": [
                    "assessment"
                ],
                "summary": "retrieve the current resident assessment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "withOriginalSettings",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "if true, gets the assessment as is (could even be empty), if false, gets the assessment updated to the latest settings if appropriate"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AppraisalStatus"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "patch": {
                "operationId": "AssessmentController.patch",
                "tags": [
                    "assessment"
                ],
                "summary": "partial update (\"merge patch\")",
                "description": "Accepts a json-patch (see example model) or a subset of an assessment (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AppraisalStatus"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/assessment/finalize": {
            "post": {
                "operationId": "AssessmentController.finalizeAssessment",
                "tags": [
                    "assessment"
                ],
                "summary": "finalize an assessment, which saves a completed snapshot of the assessment and updates the LOC on the person",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/assessment/realignPreview": {
            "get": {
                "operationId": "AssessmentController.realignPreview",
                "tags": [
                    "assessment"
                ],
                "summary": "preview the results of realigning a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.ResidentRealignmentPreview"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "comparisonFacilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/assessment/realignPreview.csv": {
            "get": {
                "operationId": "AssessmentController.realignPreviewAsCSV",
                "tags": [
                    "assessment"
                ],
                "summary": "preview the results of realigning a facility as a csv",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "text"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "comparisonFacilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/billing/categories": {
            "post": {
                "operationId": "BillingCategoryController.create",
                "tags": [
                    "billing"
                ],
                "summary": "Adds a billing category to an organization",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.BillingCategoryData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.BillingCategory"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "BillingCategoryController.orgList",
                "tags": [
                    "billing"
                ],
                "summary": "list all the billing categories configured for an organization",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingCategory"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/billing/categories": {
            "get": {
                "operationId": "BillingCategoryController.list",
                "tags": [
                    "billing"
                ],
                "summary": "list all the billing categories configured for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingCategory"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/billing/categories/{id}": {
            "put": {
                "operationId": "BillingCategoryController.update",
                "tags": [
                    "billing"
                ],
                "summary": "Update a billing category",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.BillingCategoryData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.BillingCategory"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/billing/items": {
            "post": {
                "operationId": "BillingItemController.create",
                "tags": [
                    "billing"
                ],
                "summary": "Adds a billing item to a an organization",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.BillingItemData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.BillingItem"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "BillingItemController.orgList",
                "tags": [
                    "billing"
                ],
                "summary": "list all the billing items configured for an organization",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/billing/items": {
            "get": {
                "operationId": "BillingItemController.list",
                "tags": [
                    "billing"
                ],
                "summary": "list all the billing items configured for a facility",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "excludeOverridden",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Include only fully-resolved items, ignoring overridden org items for this faciltiy."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/billing/itemsByCategory": {
            "get": {
                "operationId": "BillingItemController.listByCategory",
                "tags": [
                    "billing"
                ],
                "summary": "list all the billing items configured for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingCategoryItems"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/billing/items/{id}": {
            "put": {
                "operationId": "BillingItemController.update",
                "tags": [
                    "billing"
                ],
                "summary": "Update a billing item",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.BillingItemData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.BillingItem"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/charges": {
            "post": {
                "operationId": "BillingChargeController.create",
                "tags": [
                    "billing"
                ],
                "summary": "Adds a charge to a person",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.BillingChargeData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.BillingCharge"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/billing/charges": {
            "post": {
                "operationId": "BillingChargeController.bulkCreate",
                "tags": [
                    "billing"
                ],
                "summary": "Adds a charge to multiple people",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.models.billing.BillingChargeData"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingCharge"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pId}/billing/charges": {
            "get": {
                "operationId": "BillingChargeController.list",
                "tags": [
                    "billing"
                ],
                "summary": "list all the billing charges configured for a resident",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.BillingCharge"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/invoices": {
            "post": {
                "operationId": "InvoiceController.generateInvoices",
                "tags": [
                    "billing"
                ],
                "summary": "create an invoice for a list of residents",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.controllers.billing.GenerateInvoicesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "InvoiceController.list",
                "tags": [
                    "billing"
                ],
                "summary": "list all the invoices for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.InvoiceSummary"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/statements": {
            "post": {
                "operationId": "InvoiceController.generateStatement",
                "tags": [
                    "billing"
                ],
                "summary": "create a statement for a resident",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.controllers.billing.GenerateStatementRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/statements/regenerate": {
            "post": {
                "operationId": "InvoiceController.regenerateInvoice",
                "tags": [
                    "billing"
                ],
                "summary": "regenerates an invoice for a resident updating it with any new charges",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/invoices/{id}": {
            "get": {
                "operationId": "InvoiceController.detailedInvoice",
                "tags": [
                    "billing"
                ],
                "summary": "get detailed invormation about an invoice",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.DetailedInvoice"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/invoices/{id}/approve": {
            "post": {
                "operationId": "InvoiceController.approve",
                "tags": [
                    "billing"
                ],
                "summary": "approve an invoice",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.ApprovalData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/invoices/{id}/needsWork": {
            "post": {
                "operationId": "InvoiceController.needsWork",
                "tags": [
                    "billing"
                ],
                "summary": "Mark an invoice as needs work",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.NeedsWorkData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billingSummary": {
            "get": {
                "operationId": "ResidentBillingController.residentSummary",
                "tags": [
                    "billing"
                ],
                "summary": "Get billing related information about a resident",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.ResidentSummary"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/billing/people": {
            "get": {
                "operationId": "ResidentBillingController.list",
                "tags": [
                    "billing"
                ],
                "summary": "Get billing related information about a resident",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includeHidden",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Include all residents, independent of their ResidentListEntry.hidden value."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.ResidentListEntry"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/billing/statements/issue": {
            "post": {
                "operationId": "InvoiceController.issueInvoices",
                "tags": [
                    "billing"
                ],
                "summary": "Issue statements for a facility",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.controllers.billing.IssueStatementsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/statements/{id}/issue": {
            "post": {
                "operationId": "InvoiceController.issueStatement",
                "tags": [
                    "billing"
                ],
                "summary": "Issue a statement for a resident",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.controllers.billing.IssueStatementsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/events": {
            "get": {
                "operationId": "BillingEventController.listPendingEvents",
                "tags": [
                    "billing"
                ],
                "summary": "list all the pending billing events for a person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/WriteableBillingEvent"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/events/{id}/status/completed": {
            "post": {
                "operationId": "BillingEventController.markComplete",
                "tags": [
                    "billing"
                ],
                "summary": "Mark a billing event as completed",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/WriteableBillingEvent"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/transactions": {
            "get": {
                "operationId": "TransactionController.listTransactions",
                "tags": [
                    "billing"
                ],
                "summary": "list all the transactions for a person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.Transaction"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/billing/closeAccountingPeriod": {
            "post": {
                "operationId": "AccountingPeriodController.closeAccountingPeriod",
                "tags": [
                    "billing"
                ],
                "summary": "Close the accounting period and generate the JEs and CSV",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "disableExternalSync",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Prevent any external system calls."
                    },
                    {
                        "in": "query",
                        "name": "allowEmptyTransactionList",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Allow closing period without transactions."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.AccountingPeriodClosing"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/billing/closeAccountingPeriod/preview/{period}": {
            "get": {
                "operationId": "AccountingPeriodController.previewAccountingPeriodClose",
                "tags": [
                    "billing"
                ],
                "summary": "Simulate closing the accounting period, then download the JEs as CSV (recording nothing in the DB)",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "period",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2025-01",
                            "pattern": "^\\d{4}-\\d{2}$",
                            "description": "Year and month in YYYY-MM format"
                        }
                    },
                    {
                        "in": "query",
                        "name": "allowEmptyTransactionList",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Allow closing period without transactions."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        },
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "type": "string",
                                    "example": "attachment; filename=\"data.csv\""
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/billing/accountingPeriodClose": {
            "get": {
                "operationId": "AccountingPeriodController.getAccountingPeriodClose",
                "tags": [
                    "billing"
                ],
                "summary": "get the account period close",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.AccountingPeriodClosing"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No past close"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pId}/billing/invoiceItems/{id}": {
            "delete": {
                "operationId": "InvoiceItemController.deleteOneTimeCharge",
                "tags": [
                    "billing"
                ],
                "summary": "delete a one time charge",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "InvoiceItemController.get",
                "tags": [
                    "billing"
                ],
                "summary": "get an invoice item",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.DetailedInvoiceItem"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pid}/billing/charges/{id}/endDate": {
            "post": {
                "operationId": "BillingChargeController.endCharge",
                "tags": [
                    "billing"
                ],
                "summary": "End a recurring charge",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.WriteableBillingCharge"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pId}/billing/charges/{id}": {
            "delete": {
                "operationId": "BillingChargeController.delete",
                "tags": [
                    "billing"
                ],
                "summary": "delete a charge that has never been billed",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/charges/{id}": {
            "post": {
                "operationId": "BillingChargeController.replaceCharge",
                "tags": [
                    "billing"
                ],
                "summary": "Replace a billing charge with a new charge",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.BillingChargeData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.BillingCharge"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/statements/{id}.html": {
            "get": {
                "operationId": "InvoiceController.viewStatement",
                "tags": [
                    "billing"
                ],
                "summary": "Strictly for testing purposes. Preview an statement in html",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/billing/statements/{id}.pdf": {
            "get": {
                "operationId": "InvoiceController.viewStatementPdf",
                "tags": [
                    "billing"
                ],
                "summary": "Get a pdf of a statement",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/billing/statements.pdf": {
            "get": {
                "operationId": "InvoiceController.downloadBulkStatements",
                "tags": [
                    "billing"
                ],
                "summary": "Get a pdf of the latest issued statment for all residents",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/billing/settings": {
            "post": {
                "operationId": "BillingSettingsController.orgCreate",
                "tags": [
                    "billing"
                ],
                "summary": "Update the billing settings for an organization",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.BillingSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/billing/settings": {
            "post": {
                "operationId": "BillingSettingsController.facilityCreate",
                "tags": [
                    "billing"
                ],
                "summary": "Update the billing settings for a facility",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.BillingSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "BillingSettingsController.get",
                "tags": [
                    "billing"
                ],
                "summary": "Get the billing settings for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.BillingSettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/billing/journalEntries": {
            "get": {
                "operationId": "JournalEntryController.listJournalEntryDownloads",
                "tags": [
                    "billing"
                ],
                "summary": "List all the journal entry dowloads for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.JournalEntryGenerationResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/billing/journalEntries/{id}": {
            "get": {
                "operationId": "JournalEntryController.getJournalEntryDownload",
                "tags": [
                    "billing"
                ],
                "summary": "Download a set of journal entries",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/payments/record": {
            "post": {
                "operationId": "PaymentController.recordManualPayments",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Record manually payments received outside of August",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.ManualPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/contacts/{contactId}/payments/rainforestPaymentMethodConfig": {
            "post": {
                "operationId": "RainforestPayController.paymentMethodConfig",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Get a payment method configuration for saving a payment method in rainforest",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.services.billing.rainforestpay.PaymentMethodConfigParameters"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "contactId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "useExistingSession",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payments/rainforestPaymentMethodConfig": {
            "post": {
                "operationId": "RainforestPayController.userPaymentMethodConfig",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Get a payment method configuration for saving a payment method in rainforest",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.services.billing.rainforestpay.PaymentMethodConfigParameters"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payers/{cId}/payments": {
            "post": {
                "operationId": "PaymentController.payInvoice",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Super user endpoint for triggering a fixed payment amount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.TriggerPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "cId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payers/{cId}/oneTimePayment": {
            "post": {
                "operationId": "PaymentController.triggerOneTimePayment",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Billing admin endpoint for triggering a one-time payment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.TriggerPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "cId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payments": {
            "post": {
                "operationId": "PaymentController.submitPayment",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Endpoint for a payer to submit a one-off payment of a fixed amount - requires confirmation if greater than the current invoice amount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.TriggerPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/payments/rainforestDashboardSession": {
            "get": {
                "operationId": "RainforestPayController.getPaymentDashboardSession",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Get a session key for viewing the payment and deposit dashboard in rainforest",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.RainforestDashboardSession"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/payments/rainforestMerchantOnboardingSession": {
            "get": {
                "operationId": "RainforestPayController.getMerchantOnboardingSession",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Get a session key for filling out the merchant onboarding form",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.RainforestMerchantOnboardingSession"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/authorized/callback/rainforestpay": {
            "post": {
                "operationId": "RainforestPayController.authorizedCallback",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Replay a rainforest callback but using super user auth instead of signature verification",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event_type": {
                                        "type": "string"
                                    },
                                    "data": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payments/{id}/return": {
            "post": {
                "operationId": "PaymentController.markReturned",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Mark a manual payment as returned (e.g. if a check bounces)",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.ReturnPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payments/{id}/enteredInError": {
            "post": {
                "operationId": "PaymentController.markEnteredInError",
                "tags": [
                    "billing_payment"
                ],
                "summary": "Mark a manual payment as entered in error - deletes the payment if it a new statement has not yet been issued",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/payers/onboarding": {
            "get": {
                "operationId": "PayerController.payerOnboarding",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Get a list of all payers for onboarding payment methods",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.PayerOnboardingList"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/payers": {
            "get": {
                "operationId": "PayerController.list",
                "tags": [
                    "billing_payer"
                ],
                "summary": "List all payers",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.Payer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts/{id}/payerSettings": {
            "get": {
                "operationId": "PayerController.getSettings",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Get contact billing settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "PayerController.upsertPayerSettings",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Set contact billing settings",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts/payerSettings": {
            "put": {
                "operationId": "PayerController.upsertMultiPayerSettings",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Set multiple contact billing settings",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsWithID"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/payers/userSettings": {
            "get": {
                "operationId": "PayerController.getUserPayerSettings",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Get contact billing settings",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.PayerWithScheduledPayment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "PayerController.upsertPayerUserSettings",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Set contact billing settings",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.PayerSettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/scheduledPayments/{endDate}/report.csv": {
            "get": {
                "operationId": "PayerController.getScheduledPaymentReport",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Scheduled payments csv",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/payers/transactions": {
            "get": {
                "operationId": "TransactionController.listPayerTransactions",
                "tags": [
                    "billing_payer"
                ],
                "summary": "List payer transactions",
                "description": "Lists statements and balances",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.billing.PayerTransaction"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payers/statements/issued/latest": {
            "get": {
                "operationId": "InvoiceController.getLatestIssued",
                "tags": [
                    "billing_payer"
                ],
                "summary": "get detailed invormation about an invoice",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.StatementSummary"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/payers/statements/{id}.pdf": {
            "get": {
                "operationId": "InvoiceController.viewPayerStatementPdf",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Get a pdf of a statement",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/statements/{statementId}/payers/{id}/resendStatement": {
            "post": {
                "operationId": "InvoiceController.resendLatestStatement",
                "tags": [
                    "billing_payer"
                ],
                "summary": "Resend the latest statement for a payer",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.billing.DetailedInvoice"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "statementId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/callback/hellosign": {
            "post": {
                "operationId": "CallbackController.helloSign",
                "tags": [
                    "callback"
                ],
                "security": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "json": {
                                        "type": "object",
                                        "example": {
                                            "event": {
                                                "event_type": "signature_request_signed",
                                                "event_time": "1603154663",
                                                "event_hash": "51298d2062a513356aefbc450d4e266e7eeb6ada4d46fdb90c781c7998a6074f",
                                                "event_metadata": {
                                                    "related_signature_id": "3fbf636158fb3db98e648bd51a37de0b",
                                                    "reported_for_account_id": null,
                                                    "reported_for_app_id": "ea8a3950a8028b6b53e9c397ccf4d966"
                                                }
                                            },
                                            "account_guid": null,
                                            "client_id": "ea8a3950a8028b6b53e9c397ccf4d966",
                                            "signature_request": {
                                                "signature_request_id": "e162e89ec19b67b323d7841c224eeb9cf443af0e",
                                                "test_mode": true,
                                                "title": "Subject",
                                                "original_title": "Subject",
                                                "subject": "Subject",
                                                "message": "Message",
                                                "metadata": {
                                                    "signed_on_domain": "app.hellosign.com"
                                                },
                                                "created_at": 1603154361,
                                                "is_complete": false,
                                                "is_declined": false,
                                                "has_error": false,
                                                "custom_fields": [],
                                                "response_data": [
                                                    {
                                                        "name": null,
                                                        "type": "signature",
                                                        "required": true,
                                                        "api_id": "980373_1",
                                                        "value": null,
                                                        "signature_id": "3fbf636158fb3db98e648bd51a37de0b"
                                                    },
                                                    {
                                                        "name": null,
                                                        "type": "date_signed",
                                                        "required": false,
                                                        "api_id": "210682_3",
                                                        "value": "10 / 19 / 2020",
                                                        "signature_id": "3fbf636158fb3db98e648bd51a37de0b"
                                                    }
                                                ],
                                                "signing_url": null,
                                                "signing_redirect_url": null,
                                                "final_copy_uri": "/v3/signature_request/final_copy/e162e89ec19b67b323d7841c224eeb9cf443af0e",
                                                "files_url": "https://api.hellosign.com/v3/signature_request/files/e162e89ec19b67b323d7841c224eeb9cf443af0e",
                                                "details_url": "https://app.hellosign.com/home/manage?guid=e162e89ec19b67b323d7841c224eeb9cf443af0e",
                                                "requester_email_address": "jesse@augusthealth.com",
                                                "signatures": [
                                                    {
                                                        "signature_id": "3fbf636158fb3db98e648bd51a37de0b",
                                                        "has_pin": false,
                                                        "signer_email_address": "rootuser@augusthealth.com",
                                                        "signer_name": "Root User",
                                                        "signer_role": null,
                                                        "order": null,
                                                        "status_code": "signed",
                                                        "signed_at": 1603154663,
                                                        "last_viewed_at": 1603154628,
                                                        "last_reminded_at": null,
                                                        "error": null
                                                    },
                                                    {
                                                        "signature_id": "e491c50d21431993f0416a5a8e0c36aa",
                                                        "has_pin": false,
                                                        "signer_email_address": "rp@augusthealth.com",
                                                        "signer_name": "Tammy Brown",
                                                        "signer_role": null,
                                                        "order": null,
                                                        "status_code": "awaiting_signature",
                                                        "signed_at": null,
                                                        "last_viewed_at": null,
                                                        "last_reminded_at": null,
                                                        "error": null
                                                    }
                                                ],
                                                "cc_email_addresses": [],
                                                "template_ids": null,
                                                "client_id": "fakeClientID"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "Hello API Event Received"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/callback/sns": {
            "post": {
                "operationId": "CallbackController.sns",
                "tags": [
                    "callback"
                ],
                "summary": "record a bounced email",
                "security": [],
                "parameters": [
                    {
                        "in": "header",
                        "name": "x-amz-sns-message-type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Notification",
                                "SubscriptionConfirmation",
                                "UnsubscribeConfirmation"
                            ]
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "example": {
                                    "Type": "Notification",
                                    "Message": "{\"notificationType\":\"Delivery\",\"mail\":{\"timestamp\":\"2018-10-08T14:05:45 +0000\",\"messageId\":\"6b72fb25-23c1-48ca-b781-e261116ccbe6\",\"source\":\"sender@example.com\",\"sourceArn\":\"arn:aws:ses:us-west-2:888888888888:identity/example.com\",\"sourceIp\":\"127.0.3.0\",\"sendingAccountId\":\"123456789012\",\"destination\":[\"ag1tjahvwnzovw7@augusthealth.com\"],\"headersTruncated\":false,\"headers\":[],\"commonHeaders\":{}},\"delivery\":{\"timestamp\":\"2014-05-28T22:41:01.184Z\",\"processingTimeMillis\":546,\"recipients\":[\"ag1tjahvwnzovw7@augusthealth.com\"],\"smtpResponse\":\"250 ok:  Message 64111812 accepted\",\"reportingMTA\":\"a8-70.smtp-out.amazonses.com\",\"remoteMtaIp\":\"127.0.2.0\"}}",
                                    "MessageId": "22b80b92-fdea-4c2c-8f9d-bdfb0c7bf324",
                                    "Token": "123",
                                    "TopicArn": "arn:aws:sns:us-west-2:965682465263:AugustHealth-SES-Notifications-Local",
                                    "Subject": "My First Message",
                                    "UnsubscribeURL": "https://sns.us-west-2.amazonaws.com/?Action=Unsubscribe&SubscriptionArn=arn:aws:sns:us-west-2:123456789012:MyTopic:c9135db0-26c4-47ec-8998-413945fb5a96",
                                    "Timestamp": "2012-05-02T00:54:06.655Z",
                                    "SignatureVersion": "1",
                                    "Signature": "EXAMPLEw6JRN...",
                                    "SigningCertURL": "https://sns.us-west-2.amazonaws.com/SimpleNotificationService-f3ecfb7224c7233fe7bb5f59f96de52f.pem"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/callback/fax": {
            "post": {
                "operationId": "CallbackController.handleFax",
                "tags": [
                    "callback"
                ],
                "security": [],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "fax": {
                                        "type": "object",
                                        "properties": {
                                            "from_number": {
                                                "type": "string"
                                            },
                                            "to_number": {
                                                "type": "string"
                                            }
                                        },
                                        "example": {
                                            "from_number": "+18775555555",
                                            "to_number": "+18775556666"
                                        }
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "fax": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/callback/pharmacies/pharmerica": {
            "post": {
                "operationId": "CallbackController.pharmerica",
                "tags": [
                    "callback"
                ],
                "summary": "handle pharmerica messages",
                "security": [
                    {
                        "Pharmerica": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/callback/pharmacies/suiterx": {
            "post": {
                "operationId": "CallbackController.suiteRx",
                "tags": [
                    "callback"
                ],
                "summary": "handle SuiteRX messages",
                "security": [
                    {
                        "SuiteRx": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/callback/pharmacies/digitalrx": {
            "post": {
                "operationId": "CallbackController.digitalRx",
                "tags": [
                    "callback"
                ],
                "summary": "handle DigitalRx messages",
                "security": [
                    {
                        "DigitalRx": []
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        },
                        "application/octet-stream": {
                            "schema": {
                                "type": "string",
                                "format": "byte"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/callback/rainforestpay": {
            "post": {
                "operationId": "CallbackController.rainforestPay",
                "tags": [
                    "callback"
                ],
                "summary": "handle RainforestPayCallbacks",
                "security": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "event_type": {
                                        "type": "string"
                                    },
                                    "data": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/care/organizationsWithFacilities": {
            "get": {
                "operationId": "CareAppController.getOrganizationsWithFacilities",
                "tags": [
                    "care_track"
                ],
                "summary": "Get organizations and facilities for Care Track",
                "description": "Return the organizations and facilities that the current user has visibility to\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/com.august.api.CareApp.OrganizationWithFacilities"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/care": {
            "get": {
                "operationId": "CareAppController.get",
                "tags": [
                    "care_track"
                ],
                "summary": "get the Care Track offline payload",
                "description": "Return the Care Track Offline Payload for the given facility and optional\nfilters.\n  - **startDate** - get data beginning on this date\n  - **endDate** - get data up until, and including, this date\n  - **startShiftId** - if supplied, only retrieve data starting at the shift with startShiftId on startDate \n  - **endShiftId** - if supplied, only retrieve data ending at the shift with endShiftId on endDate\n\nAll related records (routine orders, routine administrations, etc) will be filtered\nto provide the records relevant to given filters.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/com.august.api.CareApp.CareAppPayload"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startShiftId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endShiftId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "personId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "careGroupId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/care/progress": {
            "get": {
                "operationId": "CareAppController.getProgress",
                "tags": [
                    "care_track"
                ],
                "summary": "get the care progress page payload",
                "description": "Return the care progress page payload for the given facility and optional\nfilters.\n  - **date** - Only include administrations scheduled for this date. If absent, uses the current local date in the facility's timezone.\n  - **careGroupId** - (optional) Only include progress data for this care group.\n  - **shiftId** - (optional) Only include progress data for this shift.\n\nAll related records (routine orders, routine administrations, etc) will be filtered\nto provide the records relevant to given filters.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/com.august.api.CareApp.ProgressPayload"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "careGroupId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "shiftId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/care/bulkUpdate": {
            "post": {
                "operationId": "CareAppController.bulkUpdate",
                "tags": [
                    "care_track"
                ],
                "summary": "bulkUpdate",
                "description": "Consolidated sync endpoint for Care Track to submit data when internet connection becomes available.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "routineAdministrations": []
                            },
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/com.august.api.CareApp.BulkPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includeValidationErrors",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/careGroups": {
            "post": {
                "operationId": "CareGroupController.create",
                "tags": [
                    "care_group"
                ],
                "summary": "Adds a caregroup with the given name to a facility",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.care_group.CareGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "CareGroupController.list",
                "tags": [
                    "care_group"
                ],
                "summary": "list all the care groups configured for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.care_group.CareGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/careGroups/{id}": {
            "delete": {
                "operationId": "CareGroupController.delete",
                "tags": [
                    "care_group"
                ],
                "summary": "delete the specified care group. requires force if anyone is currently in the caregroup",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "CareGroupController.patch",
                "tags": [
                    "care_group"
                ],
                "summary": "partial update (\"merge patch\")",
                "description": "Accepts a json-patch (see example model) or a subset of an appraisal (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.care_group.CareGroup"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/charges": {
            "post": {
                "operationId": "OneTimeChargeController.create",
                "tags": [
                    "charge"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                            },
                            "example": {
                                "type": "CHARGE_TYPE_FOOD",
                                "payerId": 34,
                                "notes": "Foo Bar Baz",
                                "oneTime": {
                                    "amount": 100,
                                    "date": {
                                        "day": 31,
                                        "month": 12,
                                        "year": 2021
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "OneTimeChargeController.list",
                "tags": [
                    "charge"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 5000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/charges/{cid}": {
            "get": {
                "operationId": "OneTimeChargeController.get",
                "tags": [
                    "charge"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "cid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/charges/{id}": {
            "put": {
                "operationId": "OneTimeChargeController.update",
                "tags": [
                    "charge"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                            },
                            "example": {
                                "type": "CHARGE_TYPE_FOOD",
                                "payer": {
                                    "id": "34"
                                },
                                "notes": "Foo Bar Baz",
                                "oneTime": {
                                    "amount": 100,
                                    "date": {
                                        "day": 31,
                                        "month": 12,
                                        "year": 2021
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "OneTimeChargeController.delete",
                "tags": [
                    "charge"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/charges/report.json": {
            "get": {
                "operationId": "OneTimeChargeController.getChargesReportInJson",
                "tags": [
                    "charge"
                ],
                "summary": "return json data of the charge report",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/charges/report.csv": {
            "get": {
                "operationId": "OneTimeChargeController.getChargesReportInCsv",
                "tags": [
                    "charge"
                ],
                "summary": "return csv data of the charge report",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "text"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts": {
            "post": {
                "operationId": "ContactController.createPersonContact",
                "tags": [
                    "contact"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "ContactController.listPersonContacts",
                "tags": [
                    "contact"
                ],
                "summary": "list by person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/contacts": {
            "post": {
                "operationId": "ContactController.createFacilityContact",
                "tags": [
                    "contact"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "ContactController.listFacilityContacts",
                "tags": [
                    "contact"
                ],
                "summary": "list by facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/contacts": {
            "post": {
                "operationId": "ContactController.createOrgContact",
                "tags": [
                    "contact"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts/{id}": {
            "get": {
                "operationId": "ContactController.get",
                "tags": [
                    "contact"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "ContactController.patchPersonContact",
                "tags": [
                    "contact"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a contact (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ContactController.deletePersonContact",
                "tags": [
                    "contact"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/contacts/{id}": {
            "patch": {
                "operationId": "ContactController.patchFacilityContact",
                "tags": [
                    "contact"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a contact (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ContactController.deleteFacilityContact",
                "tags": [
                    "contact"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/contacts/{id}": {
            "patch": {
                "operationId": "ContactController.patchOrgContact",
                "tags": [
                    "contact"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a contact (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ContactController.deleteOrgContact",
                "tags": [
                    "contact"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts/responsibleParty/{id}": {
            "put": {
                "operationId": "ContactController.setResponsibleParty",
                "tags": [
                    "contact"
                ],
                "summary": "Set responsible party",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts/generalPractitioner/{id}": {
            "put": {
                "operationId": "ContactController.setGeneralPractitioner",
                "tags": [
                    "contact"
                ],
                "summary": "Set general practitioner",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts": {
            "post": {
                "operationId": "ControlledCountController.create",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Create a new Controlled Count",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.ControlledCountCreatePayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "ControlledCountController.list",
                "tags": [
                    "controlled_count"
                ],
                "summary": "List controlled counts",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "medGroupId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        },
                        "description": "Include only controlled counts for the given med group."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/potentialWitnesses": {
            "get": {
                "operationId": "ControlledCountController.potentialWitnesses",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Get a list of potential witnesses for a controlled count",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.api.medication.Emar.PotentialWitness"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{id}": {
            "get": {
                "operationId": "ControlledCountController.get",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Get a controlled count by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ControlledCountController.delete",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Delete a controlled count",
                "description": "Deletes a controlled count by ID. Only the creator of the controlled count or a superuser can delete, and only controlled counts with \"Draft\" status can be deleted.",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/orderGroups/{ogId}/inventoryLog": {
            "get": {
                "operationId": "InventoryLogController.list",
                "tags": [
                    "controlled_count"
                ],
                "summary": "List the inventory log for an order group",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiInventoryLogItem"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ogId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/orderGroups/{ogId}/inventoryLog.csv": {
            "get": {
                "operationId": "InventoryLogController.getCsv",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Get the inventory log CSV for an order group",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "text"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ogId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{ccId}/orderGroups/{ogId}/orderGroupCount": {
            "patch": {
                "operationId": "OrderGroupCountController.update",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Update an order group count",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.OrderGroupCountPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiOrderGroupCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ccId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ogId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{ccId}/orderGroups/{ogId}/orderGroupCount/exception": {
            "put": {
                "operationId": "OrderGroupCountController.setException",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Set exception for the order group count",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.medication.OrderGroupCountException"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiOrderGroupCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ccId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ogId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{ccId}/orderGroups/{ogId}/orderGroupCount/reconciliation": {
            "put": {
                "operationId": "OrderGroupCountController.setReconciliation",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Set reconciliation for the order group count",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.OrderGroupCountReconciliationPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ccId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ogId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{ccId}/orderGroups/{ogId}/inventoryAdjustment": {
            "put": {
                "operationId": "InventoryAdjustmentController.upsert",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Upsert the inventory adjustment for the controlled count and order group",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.InventoryAdjustmentPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiInventoryAdjustment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ccId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ogId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{ccId}/inventoryAdjustments/{id}": {
            "delete": {
                "operationId": "InventoryAdjustmentController.delete",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Hard delete an inventory adjustment for a draft controlled count",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiInventoryAdjustment"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "ccId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{id}/submissions": {
            "post": {
                "operationId": "ControlledCountController.submit",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Submit a controlled count",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "saveWithExceptions",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{id}/counterUserSignature": {
            "post": {
                "operationId": "ControlledCountController.processCounterUserSignature",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Apply the counter user signature",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/controlledCounts/{id}/witnessSignature": {
            "post": {
                "operationId": "ControlledCountController.initializeWitnessSignature",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Initiate the onetime passcode witness signature flow",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.InitiateWitnessSignaturePayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "ControlledCountController.finalizeWitnessSignature",
                "tags": [
                    "controlled_count"
                ],
                "summary": "Finalize the witness signature",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.WitnessSignaturePasscode"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/dashboards": {
            "get": {
                "operationId": "DashboardController.list",
                "tags": [
                    "dashboard"
                ],
                "summary": "Get list of Superset Dashboards for particular organization (returns default dashboards if none are configured on Org)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.organization.SupersetDashboard"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/dashboards/{dashboardId}/token": {
            "post": {
                "operationId": "DashboardController.token",
                "tags": [
                    "dashboard"
                ],
                "summary": "Get temporary access token to Superset Dashboard for a specific dashboard",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.token.Token"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dashboardId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/dashboards/billing": {
            "get": {
                "operationId": "DashboardController.listBillingDashboards",
                "tags": [
                    "dashboard"
                ],
                "summary": "Get list of billing Superset Dashboards for particular organization",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.organization.SupersetDashboard"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/dashboards/billing/{dashboardId}/token": {
            "post": {
                "operationId": "DashboardController.billingToken",
                "tags": [
                    "dashboard"
                ],
                "summary": "Get temporary access token to Superset Dashboard for a specific billing dashboard",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.token.Token"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dashboardId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/imports/kinds": {
            "get": {
                "operationId": "ImportController.listKinds",
                "tags": [
                    "data_import"
                ],
                "summary": "list the available imports kinds",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.import_results.AvailableImportKinds"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/imports/{id}": {
            "get": {
                "operationId": "ImportController.get",
                "tags": [
                    "data_import"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.import_results.ImportResult"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/imports/{id}": {
            "delete": {
                "operationId": "ImportController.delete",
                "tags": [
                    "data_import"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/imports": {
            "get": {
                "operationId": "ImportController.list",
                "tags": [
                    "data_import"
                ],
                "summary": "list imports satisfying all query params for a specific facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.import_results.ImportResult"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "kind",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime"
                        }
                    }
                ]
            }
        },
        "/imports": {
            "get": {
                "operationId": "ImportController.listAll",
                "tags": [
                    "data_import"
                ],
                "summary": "list all imports satisfying all query params",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.import_results.ImportResult"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "kind",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/imports/{kind}/preview": {
            "post": {
                "operationId": "ImportController.previewFacilityImport",
                "tags": [
                    "data_import"
                ],
                "summary": "preview the results of importing residents from an excel file",
                "description": "the body of the request should be an excel file",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/com.august.protos.api.import_results.DataImportResponse"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "kind",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/imports/{kind}": {
            "post": {
                "operationId": "ImportController.queueFacilityImport",
                "tags": [
                    "data_import"
                ],
                "summary": "Upload the provided excel file and start an import",
                "description": "the body of the request should be an excel file",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "kind",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind",
                            "type": "string",
                            "format": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "scheduledAt",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime",
                            "description": "java.time.ZonedDateTime"
                        },
                        "example": "2024-04-04T14:45:00+00:00",
                        "description": "Schedule the data import for this time"
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        },
                        "description": "Force import even if community already has residents"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/imports/{kind}/preview": {
            "post": {
                "operationId": "ImportController.previewOrgImport",
                "tags": [
                    "data_import"
                ],
                "summary": "preview the results of importing residents from an excel file",
                "description": "the body of the request should be an excel file",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/com.august.protos.api.import_results.DataImportResponse"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "kind",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/imports/{kind}": {
            "post": {
                "operationId": "ImportController.queueOrgImport",
                "tags": [
                    "data_import"
                ],
                "summary": "Upload the provided excel file and start an import",
                "description": "the body of the request should be an excel file",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "kind",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind",
                            "type": "string",
                            "format": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "scheduledAt",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "datetime",
                            "description": "java.time.ZonedDateTime"
                        },
                        "example": "2024-04-04T14:45:00+00:00",
                        "description": "Schedule the data import for this time"
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        },
                        "description": "Force import even if community already has residents"
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/email/unsubscribe": {
            "post": {
                "operationId": "EmailController.unsubscribe",
                "tags": [
                    "email"
                ],
                "summary": "Process unsubscribe links from emails",
                "security": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.controllers.UnsubscribeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successfully unsubscribed"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/email/test": {
            "post": {
                "operationId": "EmailController.sendTemplateTest",
                "tags": [
                    "email"
                ],
                "summary": "Send test emails",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.services.email.TemplateTestEmail"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully sent test email"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/emar": {
            "get": {
                "operationId": "EmarController.get",
                "tags": [
                    "emar"
                ],
                "summary": "GET the eMAR Offline Payload",
                "description": "Return the eMAR Offline Payload for the given facility and optional\nfilters. The filters work along two axes:\n  - **People** - you can filter either via personId or medGroupId\n  - **Occurrence** - you can filter the med pass occurrences to one of:\n    - **Cold Start** - default set starting with the previous and including all med passes once.\n    - **Refresh** - get the data for a single med pass occurrence by ID (intended to be combined with the personID, but not required to be)\n    - **Next Page** - Get the next N (`count`) med pass occurrences after the provided occurrence ID (`after`)\n\nAll related records (med orders, med administrations, etc) will be filtered\nto provide the records relevant to the people & med pass occurrence.\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarPayload"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "medGroupId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "personId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "medPassOccurrenceId",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceRef",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceRef",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "count",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "includeSignoffAdmins",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/emar/bulkUpdate": {
            "post": {
                "operationId": "EmarController.bulkUpdate",
                "tags": [
                    "emar"
                ],
                "summary": "bulkUpdate",
                "description": "Consolidated sync endpoint for the eMAR to submit data when internet connection becomes available.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "vitals": [],
                                "medicationAdministrations": [],
                                "signOffs": []
                            },
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/com.august.api.medication.Emar.BulkPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/emar/progress": {
            "get": {
                "operationId": "EmarController.getProgress",
                "tags": [
                    "emar"
                ],
                "summary": "eMAR progress payload",
                "description": "Data to populate the eMAR progress page.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarProgressPayload"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "medGroupId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/emar/regenerateForMedPassTimingChange": {
            "post": {
                "operationId": "EmarController.regenerateForMedPassTimingChange",
                "tags": [
                    "emar"
                ],
                "summary": "Update generations for med pass timing change",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/events/{id}": {
            "get": {
                "operationId": "EventController.get",
                "tags": [
                    "event"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.event.Event"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "EventController.delete",
                "tags": [
                    "event"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/events": {
            "get": {
                "operationId": "EventController.list",
                "tags": [
                    "event"
                ],
                "summary": "list",
                "description": "list all events ordered by event-time. for the sake of sorting, all-day events are assumed to begin at the beginning of the day, UTC",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.event.Event"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities": {
            "post": {
                "operationId": "FacilityController.create",
                "tags": [
                    "facility"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "FacilityController.list",
                "tags": [
                    "facility"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesInactive",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{id}": {
            "get": {
                "operationId": "FacilityController.get",
                "tags": [
                    "facility"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "FacilityController.delete",
                "tags": [
                    "facility"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "FacilityController.patch",
                "tags": [
                    "facility"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a facility (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{id}/statistics": {
            "get": {
                "operationId": "FacilityController.statistics",
                "tags": [
                    "facility"
                ],
                "summary": "get statistics",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.facility.FacilityStatistics"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/sendBulkMarV2": {
            "post": {
                "operationId": "MarController.sendBulkMarV2",
                "tags": [
                    "facility"
                ],
                "summary": "post",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Month of MAR generation (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "blank",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Whether the MAR should include resident's meds or be blank (true or false)"
                    },
                    {
                        "in": "query",
                        "name": "includePrnLog",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to include the final page PRN Log. Defaults to true."
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.jobs.GenerateBulkMarParameters.SortBy"
                        },
                        "description": "Which field to sort residents by"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "example": {
                                        "data": {},
                                        "meta": {
                                            "hello": "Request Received"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/customFieldImages/{key}": {
            "post": {
                "operationId": "FacilityController.setCustomFieldImage",
                "tags": [
                    "facility"
                ],
                "summary": "add a custom facility image to use in pdf projections",
                "description": "the body of the request should be an image file",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "image/*"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "FacilityController.getCustomFieldImage",
                "tags": [
                    "facility"
                ],
                "summary": "return a custom facility image",
                "responses": {
                    "200": {
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/sendBulkFacesheet": {
            "post": {
                "operationId": "FaceSheetController.sendBulk",
                "tags": [
                    "facility"
                ],
                "summary": "Generate and send bulk face sheet as email",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "example": {
                                        "data": {},
                                        "meta": {
                                            "hello": "Request Received"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/sendBulkEmarReport": {
            "post": {
                "operationId": "EmarReportController.sendBulk",
                "tags": [
                    "facility"
                ],
                "summary": "generate and send bulk eMAR report",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Month of MAR generation (format YYYY-MM)",
                        "deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "startMonth",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Start month of MAR generation (inclusive) (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "endMonth",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "End month of MAR generation (inclusive) (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.jobs.GenerateBulkMarParameters.SortBy"
                        },
                        "description": "Which field to sort residents by"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "example": {
                                        "data": {},
                                        "meta": {
                                            "hello": "Request Received"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/sendBulkEmergencyPackets": {
            "post": {
                "operationId": "EmergencyPacketController.sendBulk",
                "tags": [
                    "facility"
                ],
                "summary": "generate and send bulk emergency packets",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "example": {
                                        "data": {},
                                        "meta": {
                                            "hello": "Request Received"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/sendBulkMedList": {
            "post": {
                "operationId": "MedListController.sendBulk",
                "tags": [
                    "facility"
                ],
                "summary": "generate and send bulk med list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "physicianReview",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Boolean that signifies whether we want a physician signature for each resident section in the PDF"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "example": {
                                        "data": {},
                                        "meta": {
                                            "hello": "Request Received"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/sendBulkCareLog": {
            "post": {
                "operationId": "RoutineController.sendBulkCareLog",
                "tags": [
                    "facility"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startMonth",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endMonth",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sortBy",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.jobs.GenerateBulkMarParameters.SortBy"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includeCareSummary",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/forms/{dataType}.pdf": {
            "get": {
                "operationId": "FormController.getPdfWithoutFacility",
                "tags": [
                    "form"
                ],
                "summary": "get as pdf",
                "deprecated": true,
                "description": "Use the version that has facility id",
                "responses": {
                    "200": {
                        "description": "A PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{personId}/forms/{dataType}.pdf": {
            "get": {
                "operationId": "FormController.getPdf",
                "tags": [
                    "form"
                ],
                "summary": "get as pdf",
                "responses": {
                    "200": {
                        "description": "A PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/forms/{dataType}/template": {
            "get": {
                "operationId": "FormController.getTemplateForForm",
                "tags": [
                    "form"
                ],
                "summary": "get template",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignableForm"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/forms/{id}/display": {
            "put": {
                "operationId": "FormController.updateDisplay",
                "tags": [
                    "form"
                ],
                "summary": "Update template ui form",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.signable_form.FormDisplay"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/forms": {
            "post": {
                "operationId": "FormController.createTemplate",
                "tags": [
                    "form"
                ],
                "summary": "create a form template (and possibly upload a file)",
                "description": "The body of the request should be the file contents and the client should pass the content-type in the header Content-Type.",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object",
                                        "example": {
                                            "name": "required",
                                            "description": "optional",
                                            "embeddedTemplateRequest": {
                                                "signers": [
                                                    {
                                                        "role": "SIGNER_ROLE_ADMIN"
                                                    },
                                                    {
                                                        "role": "SIGNER_ROLE_RESPONSIBLE_PARTY"
                                                    }
                                                ]
                                            },
                                            "template": "Use to copy an existing template. Delete if not using.",
                                            "projection_type": "PDF_PROJ_FROM_TEMPLATE"
                                        }
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.esign.SignableFormRequest",
                                "example": {
                                    "name": "required",
                                    "description": "optional",
                                    "template": "Use to copy an existing template",
                                    "projection_type": "PDF_PROJ_FROM_TEMPLATE"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.esign.CreateSignableFormResponse"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "FormController.listTemplates",
                "tags": [
                    "form"
                ],
                "summary": "list the templates",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormMetaData"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/forms/{id}/url": {
            "get": {
                "operationId": "FormController.editTemplate",
                "tags": [
                    "form"
                ],
                "summary": "edit the template",
                "description": "Get a hellosign url to edit the template. Visit https://app.hellosign.com/api/embeddedTest to use.",
                "responses": {
                    "200": {
                        "description": "The json representation of the pdf",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.esign.EmbeddedUrlResponse"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/forms/{id}": {
            "get": {
                "operationId": "FormController.getTemplate",
                "tags": [
                    "form"
                ],
                "summary": "get the template",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignableForm"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "FormController.deleteTemplate",
                "tags": [
                    "form"
                ],
                "summary": "delete the template",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "FormController.patchMetaData",
                "tags": [
                    "form"
                ],
                "summary": "partial update of the signable form metadata",
                "description": "Accepts a json-patch (see example model) or a subset of the patched object (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormMetaData"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormMetaData"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/forms/{id}/template.pdf": {
            "get": {
                "operationId": "FormController.getTemplatePdf",
                "tags": [
                    "form"
                ],
                "summary": "get the template",
                "responses": {
                    "200": {
                        "description": "A PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/formsWithAssignments": {
            "get": {
                "operationId": "FormController.listTemplatesWithAssignments",
                "tags": [
                    "form"
                ],
                "summary": "list the templates",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormWithAssignments"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/forms/{id}/publish": {
            "put": {
                "operationId": "FormController.publishDraftTemplate",
                "tags": [
                    "form"
                ],
                "summary": "publish the template draft",
                "description": "returns 409 if there isn't a draft to publish",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormWithAssignments"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/forms/{id}/{orgId}/{facilityId}/{personId}.pdf": {
            "get": {
                "operationId": "FormController.previewTemplate",
                "tags": [
                    "form"
                ],
                "summary": "preview the pdf on the given person",
                "description": "if there's a draft, previews using the draft",
                "responses": {
                    "200": {
                        "description": "A PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/forms/{id}/{orgId}/{facilityId}/{personId}.json": {
            "get": {
                "operationId": "FormController.previewTemplateAsJson",
                "tags": [
                    "form"
                ],
                "summary": "preview the pdf on the given person (as json)",
                "responses": {
                    "200": {
                        "description": "The json representation of the pdf",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/form_assignments/{dataType}": {
            "post": {
                "operationId": "FormController.createAssignment",
                "tags": [
                    "form"
                ],
                "summary": "create a new assignment from a form to a data type",
                "description": "returns 409 if the `template` field is undefined (i.e. if the first draft was never published); return 404 if already exists",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment",
                                "example": {
                                    "signable_form_id": "required",
                                    "facility_id": "optional",
                                    "org_id": "optional"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "FormController.updateAssignment",
                "tags": [
                    "form"
                ],
                "summary": "update an assignment from a form to a data type",
                "description": "returns 409 if the `template` field is undefined (i.e. if the first draft was never published); returns 404 if an assignment doesn't exist",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment",
                                "example": {
                                    "id": "required",
                                    "signable_form_id": "required",
                                    "facility_id": "optional",
                                    "org_id": "optional"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "FormController.deleteAssignment",
                "tags": [
                    "form"
                ],
                "summary": "delete assignment",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "FormController.listAssignments",
                "tags": [
                    "form"
                ],
                "summary": "list all form assignments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/form_assignments/{dataType}/{orgId}/{facilityId}": {
            "get": {
                "operationId": "FormController.getAssignment",
                "tags": [
                    "form"
                ],
                "summary": "get assignment",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/form_assignments": {
            "get": {
                "operationId": "FormController.listOrgAssignments",
                "tags": [
                    "form"
                ],
                "summary": "list all form assignments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{personId}/forms/{dataType}.json": {
            "get": {
                "operationId": "FormController.getPdfAsJson",
                "tags": [
                    "form"
                ],
                "summary": "get pdf as json",
                "description": "This method is unstable and is for debugging only",
                "responses": {
                    "200": {
                        "description": "The json representation of the pdf",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/form_assignments": {
            "get": {
                "operationId": "FormController.listAssignmentsByParams",
                "tags": [
                    "form"
                ],
                "summary": "list all form assignments",
                "description": "List all form assignments matching the params. A missing orgId param will only match against form assignments with orgId == null, similarly with facilityId and state. Missing dataType, customType params will be treated as wildcards.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "dataType",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        },
                        "default": 2000
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        },
                        "default": 0
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormAssignment"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/forms/{id}/images/{key}": {
            "get": {
                "operationId": "FormController.getDisplayFormImage",
                "tags": [
                    "form"
                ],
                "summary": "Get an image associated with a form and key",
                "responses": {
                    "200": {
                        "description": "An image",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "FormController.addDisplayFormImage",
                "tags": [
                    "form"
                ],
                "summary": "Add an image associated with a form and key",
                "description": "the body of the request should be an image file",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "file": {
                                    "contentType": "image/*"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "FormController.deleteDisplayFormImage",
                "tags": [
                    "form"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/forms/{id}/images": {
            "get": {
                "operationId": "FormController.listDisplayFormImages",
                "tags": [
                    "form"
                ],
                "summary": "Return a list of all display form images associated with a form",
                "description": "The images can be used in display forms",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "format": "url"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/immunizations": {
            "post": {
                "operationId": "ImmunizationController.create",
                "tags": [
                    "immunization"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.immunization.Immunization"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "ImmunizationController.list",
                "tags": [
                    "immunization"
                ],
                "summary": "list",
                "description": "list all immunizations ordered by immunization-time. for the sake of sorting, all-day immunizations are assumed to begin at the beginning of the day, UTC",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.immunization.Immunization"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/immunizations/{id}/attachment": {
            "post": {
                "operationId": "ImmunizationController.attachFile",
                "tags": [
                    "immunization"
                ],
                "summary": "attach a file to the immunization record",
                "description": "the body of the request should be the file contents and the client should pass the content-type in the header Content-Type. Use the /utils/pb2json method with 'com.august.protos.snapshot.Snapshot.Data' to generate a full example of the json request body",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "$ref": "#/components/schemas/SnapshotData"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/immunizations/{id}/partialFileAttachment": {
            "post": {
                "operationId": "ImmunizationController.attachPartialFile",
                "tags": [
                    "immunization"
                ],
                "summary": "attach part of a pdf file to the immunization record",
                "description": "the body of the request should be the file contents and the client should pass the content-type in the header Content-Type. Use the /utils/pb2json method with 'com.august.protos.snapshot.Snapshot.Data' to generate a full example of the json request body",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object"
                                    },
                                    "file": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.snapshot_partial_pdf.SnapshotPartialPdf"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/immunizations/{id}": {
            "get": {
                "operationId": "ImmunizationController.get",
                "tags": [
                    "immunization"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.immunization.Immunization"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "ImmunizationController.patch",
                "tags": [
                    "immunization"
                ],
                "summary": "update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.immunization.Immunization"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.immunization.Immunization"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "ImmunizationController.delete",
                "tags": [
                    "immunization"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{id}/startAlert": {
            "post": {
                "operationId": "IncidentController.startAlert",
                "tags": [
                    "incident"
                ],
                "summary": "start alert",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAlert"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{id}/stopAlert": {
            "post": {
                "operationId": "IncidentController.stopAlert",
                "tags": [
                    "incident"
                ],
                "summary": "stop alert",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{id}/attachments": {
            "post": {
                "operationId": "IncidentController.attach",
                "tags": [
                    "incident"
                ],
                "summary": "attach",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/com.august.protos.snapshot.UploadInfo"
                                            }
                                        ],
                                        "example": {
                                            "notes": "My note"
                                        }
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            },
                            "encoding": {
                                "data": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{id}": {
            "get": {
                "operationId": "IncidentController.get",
                "tags": [
                    "incident"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Incident"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "IncidentController.patch",
                "tags": [
                    "incident"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of an incident (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/IncidentMergePatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Incident"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "IncidentController.delete",
                "tags": [
                    "incident"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{id}/attachments/{snapshotid}": {
            "delete": {
                "operationId": "IncidentController.deleteAttachment",
                "tags": [
                    "incident"
                ],
                "summary": "delete attachment",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "snapshotid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents": {
            "get": {
                "operationId": "IncidentController.list",
                "tags": [
                    "incident"
                ],
                "summary": "list incidents of a resident",
                "description": "list incidents of a resident, sorted by whether incident is on alert and then by incident creation time in descending order.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Incident"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            },
            "post": {
                "operationId": "IncidentController.create",
                "tags": [
                    "incident"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Incident"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/incidents": {
            "get": {
                "operationId": "IncidentController.listFacilityIncidents",
                "tags": [
                    "incident"
                ],
                "summary": "list all incidents within a facility",
                "description": "list all facility incidents, sorted by whether incident is on alert and then by incident creation time in descending order. Note: all specified filters will be evaluated in an AND fashion except for `noteTypes` and `incidentTypes` since they will never have any overlap.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        },
                        "description": "If set, only include incidents/notes with `occurredAt` equal to or after `startDate` (inclusive)."
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        },
                        "description": "If set, only include incidents/notes with `occurredAt` before `endDate` (exclusive)."
                    },
                    {
                        "in": "query",
                        "name": "noteTypes",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "nullable": true,
                            "items": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.NoteType"
                            }
                        },
                        "description": "If set, filter by note type. If `NOTE_TYPE_UNSPECIFIED` is included, notes with no types will be included. When specified, the set of values will be merged with `incidentTypes` and any notes or incident matching either of these lists will be included."
                    },
                    {
                        "in": "query",
                        "name": "incidentTypes",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "nullable": true,
                            "items": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentType"
                            }
                        },
                        "description": "If set, filter by incident type. If `INCIDENT_TYPE_UNSPECIFIED` is included, incidents with no types will be included. See: `noteTypes`."
                    },
                    {
                        "in": "query",
                        "name": "incidentStatus",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.IncidentStatus",
                            "nullable": true
                        },
                        "description": "If set, filter by incident status. Note: incident status only exists on incidents and not notes. No notes will be filtered out by specifying this parameter. Add `category`=`INCIDENT_CATEGORY_INCIDENT` to filter out notes."
                    },
                    {
                        "in": "query",
                        "name": "actionType",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.IncidentActionType",
                            "nullable": true
                        },
                        "description": "If set, only include incidents/notes containing one of the specified `actionType`s. Incidents/notes with no action types will be filtered out."
                    },
                    {
                        "in": "query",
                        "name": "onAlert",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        },
                        "description": "If set, only include incidents/notes that are currently on alert (`true`) or not on alert (`false`)."
                    },
                    {
                        "in": "query",
                        "name": "createdBy",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "nullable": true,
                            "items": {
                                "type": "string",
                                "format": "long",
                                "example": "1"
                            }
                        },
                        "description": "If set, only include incidents/notes that were created by one of the specified user ids."
                    },
                    {
                        "in": "query",
                        "name": "category",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.IncidentCategory",
                            "nullable": true
                        },
                        "description": "If set, filter by category (note or incident)."
                    },
                    {
                        "in": "query",
                        "name": "groupStatsBy",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.GroupByTimeUnit"
                        }
                    },
                    {
                        "in": "query",
                        "name": "residents",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "nullable": true,
                            "items": {
                                "type": "string",
                                "format": "long",
                                "example": "1"
                            }
                        },
                        "description": "If set, limit the returned incidents to the specified resident ids"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Incident"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pid}/incidents/{id}/comments": {
            "post": {
                "operationId": "IncidentController.createComment",
                "tags": [
                    "incident"
                ],
                "summary": "comment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentComment"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pid}/incidents/{incidentId}/comments/{commentId}": {
            "delete": {
                "operationId": "IncidentController.deleteComment",
                "tags": [
                    "incident"
                ],
                "summary": "delete comment",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{incidentId}/actions": {
            "post": {
                "operationId": "IncidentActionController.create",
                "tags": [
                    "incident"
                ],
                "summary": "create incident action",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "IncidentActionController.list",
                "tags": [
                    "incident"
                ],
                "summary": "list actions for a given incident",
                "description": "list incidents actions for a given incident",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "IncidentActionController.bulkPatch",
                "tags": [
                    "incident"
                ],
                "summary": "bulk partial update of an incident action",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "number"
                                        },
                                        "patch": {
                                            "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/actions/availableTemplates": {
            "get": {
                "operationId": "IncidentActionController.listAvailableIncidentActionTemplates",
                "tags": [
                    "incident"
                ],
                "summary": "list available incident action templates",
                "description": "list incident action templates that are available for the specified person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pid}/incidents/{incidentId}/actions/{actionId}": {
            "delete": {
                "operationId": "IncidentActionController.delete",
                "tags": [
                    "incident"
                ],
                "summary": "delete an action for a given incident",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/incidents/{incidentId}/actions/{actionId}": {
            "patch": {
                "operationId": "IncidentActionController.patch",
                "tags": [
                    "incident"
                ],
                "summary": "partial update of an incident action",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                            },
                            "example": {
                                "note": "So and so fell in some place"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/incidents/{incidentId}/status": {
            "post": {
                "operationId": "IncidentController.updateStatus",
                "tags": [
                    "incident"
                ],
                "summary": "update incident status",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.incidents.IncidentStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Incident"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/incidents/{incidentId}/stateIncidentReport.pdf": {
            "get": {
                "operationId": "IncidentActionController.createStateIncidentReport",
                "tags": [
                    "incident"
                ],
                "summary": "generate a state incident report (if applicable)",
                "responses": {
                    "200": {
                        "description": "A PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/incidents/{incidentId}/actions/{actionId}/report.pdf": {
            "get": {
                "operationId": "IncidentActionController.createFillableIncidentReport",
                "tags": [
                    "incident"
                ],
                "summary": "generate a fillable incident report (if applicable)",
                "responses": {
                    "200": {
                        "description": "A PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "incidentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "actionId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/incomingFiles": {
            "get": {
                "operationId": "IncomingFileController.list",
                "tags": [
                    "incoming_file"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.incoming_file.IncomingFile"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "processingStatus",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incoming_file.ProcessingStatus",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{personId}/incomingFiles/{id}/snapshots/{dataType}": {
            "post": {
                "operationId": "IncomingFileController.assign",
                "tags": [
                    "incoming_file"
                ],
                "summary": "Creates a snapshot from a incoming file and closes any open task seeking that data type",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/incomingFiles/{id}/file": {
            "get": {
                "operationId": "IncomingFileController.getFile",
                "tags": [
                    "incoming_file"
                ],
                "summary": "returns the uploaded file associated with a incomingFile",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf, image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/incomingFiles/{id}": {
            "patch": {
                "operationId": "IncomingFileController.patch",
                "tags": [
                    "incoming_file"
                ],
                "summary": "Patches an incoming file (mostly for marking ignored)",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.incoming_file.IncomingFile"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/com.august.protos.incoming_file.IncomingFile"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/incomingFiles/sources/{sourceType}/identifiers/{identifier}": {
            "post": {
                "operationId": "IncomingFileController.addIdentifier",
                "tags": [
                    "incoming_file"
                ],
                "summary": "Add a facility identifier for an incoming file integration",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "sourceType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incoming_file.FileSource"
                        }
                    },
                    {
                        "in": "path",
                        "name": "identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "IncomingFileController.deleteIdentifier",
                "tags": [
                    "incoming_file"
                ],
                "summary": "Delete a facility identifier for an incoming file integration",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "sourceType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.incoming_file.FileSource"
                        }
                    },
                    {
                        "in": "path",
                        "name": "identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/medGroups": {
            "post": {
                "operationId": "MedGroupController.create",
                "tags": [
                    "med_group"
                ],
                "summary": "Adds a med group with the given name to a facility",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.med_group.MedGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "MedGroupController.list",
                "tags": [
                    "med_group"
                ],
                "summary": "list all the med groups configured for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.med_group.MedGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/medGroups/{medGroupId}": {
            "get": {
                "operationId": "MedGroupController.get",
                "tags": [
                    "med_group"
                ],
                "summary": "Get a med group by id",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.med_group.MedGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "medGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/medGroups/{id}": {
            "delete": {
                "operationId": "MedGroupController.delete",
                "tags": [
                    "med_group"
                ],
                "summary": "delete the specified med group. requires force if anyone is currently in the med group",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "MedGroupController.patch",
                "tags": [
                    "med_group"
                ],
                "summary": "partial update (\"merge patch\")",
                "description": "Accepts a json-patch (see example model) or a subset of an appraisal (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.med_group.MedGroup"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/medPasses": {
            "put": {
                "operationId": "MedPassController.upsert",
                "tags": [
                    "med_pass"
                ],
                "summary": "upsert a list of all med passes covering a whole day",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.protos.api.med_pass.MedPass"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.med_pass.MedPass"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "MedPassController.list",
                "tags": [
                    "med_pass"
                ],
                "summary": "list all med passes for facility ordered by start time",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.med_pass.MedPass"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesInactive",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/medPasses/{id}": {
            "get": {
                "operationId": "MedPassController.get",
                "tags": [
                    "med_pass"
                ],
                "summary": "get med pass",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.med_pass.MedPass"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesInactive",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/medPasses": {
            "delete": {
                "operationId": "MedPassController.delete",
                "tags": [
                    "med_pass"
                ],
                "summary": "delete all med passes",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medPassOccurrenceSignOffs/{id}": {
            "get": {
                "operationId": "MedPassOccurrenceSignOffController.get",
                "tags": [
                    "med_pass_occurrence_sign_off"
                ],
                "summary": "Get a med pass occurrence sign off by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceSignOff"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "MedPassOccurrenceSignOffController.delete",
                "tags": [
                    "med_pass_occurrence_sign_off"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medPassOccurrenceSignOffs": {
            "put": {
                "operationId": "MedPassOccurrenceSignOffController.put",
                "tags": [
                    "med_pass_occurrence_sign_off"
                ],
                "summary": "upsert",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceSignOff"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceSignOff"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/medPassOccurrenceSignOffs/bulkPut": {
            "put": {
                "operationId": "MedPassOccurrenceSignOffController.bulkPut",
                "tags": [
                    "med_pass_occurrence_sign_off"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceSignOff"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medications": {
            "post": {
                "operationId": "MedicationController.create",
                "tags": [
                    "medication"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medications/{id}": {
            "get": {
                "operationId": "MedicationController.get",
                "tags": [
                    "medication"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "MedicationController.update",
                "tags": [
                    "medication"
                ],
                "summary": "update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medications": {
            "get": {
                "operationId": "MedicationController.list",
                "tags": [
                    "medication"
                ],
                "summary": "list",
                "description": "list all medications ordered by our medication sort order",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medicationAdministrations/{id}": {
            "get": {
                "operationId": "MedicationAdministrationController.get",
                "tags": [
                    "medication_administration"
                ],
                "summary": "Get a med administration by ID",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "MedicationAdministrationController.patch",
                "tags": [
                    "medication_administration"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "query",
                        "name": "note",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "shouldClearConflicts",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medicationAdministrations": {
            "post": {
                "operationId": "MedicationAdministrationController.create",
                "tags": [
                    "medication_administration"
                ],
                "summary": "create an administration (for use when administering prns)",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medicationAdministrations/orderGroups/{orderGroupId}": {
            "get": {
                "operationId": "MedicationAdministrationController.listForOrderGroup",
                "tags": [
                    "medication_administration"
                ],
                "summary": "listForOrderGroup",
                "description": "list all medication administrations for the order group",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/medicationAdministrations/bulkUpdate": {
            "post": {
                "operationId": "MedicationAdministrationController.bulkUpdate",
                "tags": [
                    "medication_administration"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "note",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "shouldClearConflicts",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medicationOrders": {
            "post": {
                "operationId": "MedicationOrderController.create",
                "tags": [
                    "medication_order"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/{id}": {
            "get": {
                "operationId": "MedicationOrderController.get",
                "tags": [
                    "medication_order"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "MedicationOrderController.simpleUpdate",
                "tags": [
                    "medication_order"
                ],
                "summary": "update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "post": {
                "operationId": "MedicationOrderController.updateOrReplace",
                "tags": [
                    "medication_order"
                ],
                "summary": "update or replace existing medication order",
                "description": "Replace the medication order with the given ID, which may return an update version of the existing object or a new object",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{orderGroupId}/latest": {
            "get": {
                "operationId": "MedicationOrderController.getLatest",
                "tags": [
                    "medication_order"
                ],
                "summary": "get latest by order group",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders": {
            "get": {
                "operationId": "MedicationOrderController.list",
                "tags": [
                    "medication_order"
                ],
                "summary": "list",
                "description": "list all medicationOrders ordered by our medication sort order",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/{id}/sourceData": {
            "put": {
                "operationId": "MedicationOrderController.updateSourceData",
                "tags": [
                    "medication_order"
                ],
                "summary": "super-user endpoint to update med pharmacy message source data",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.SourceData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{orderGroupId}/reactivate": {
            "post": {
                "operationId": "MedicationOrderController.reactivate",
                "tags": [
                    "medication_order"
                ],
                "summary": "reactivate a discontinued med order",
                "description": "Reactivates a discontinued med order. The medication order group to reactivate must be discontinued (i.e., the latest med order in the group must itself be discontinued).",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{orderGroupId}/history": {
            "get": {
                "operationId": "MedicationOrderController.getHistory",
                "tags": [
                    "medication_order"
                ],
                "summary": "list",
                "description": "list the history of a medication order group",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.services.MedicationHistoryEntry"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/notificationSubscriptions/emailNotificationOptions": {
            "get": {
                "operationId": "NotificationSubscriptionController.listEmailNotificationOptions",
                "tags": [
                    "notification_subscription"
                ],
                "summary": "gets a list of all email notification proto options",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.EmailNotificationEnumOption"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/notificationSubscriptions/{emailNotification}": {
            "post": {
                "operationId": "NotificationSubscriptionController.subscribe",
                "tags": [
                    "notification_subscription"
                ],
                "summary": "Subscribe an email notification",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailNotification",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.EmailNotification"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "NotificationSubscriptionController.unsubscribe",
                "tags": [
                    "notification_subscription"
                ],
                "summary": "Unsubscribe an email notification",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "emailNotification",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.EmailNotification"
                        }
                    }
                ]
            }
        },
        "/notificationSubscriptions": {
            "get": {
                "operationId": "NotificationSubscriptionController.list",
                "tags": [
                    "notification_subscription"
                ],
                "summary": "List all notification subscriptions of an user",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.NotificationSubscriptions"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/settings/{settingsType}": {
            "get": {
                "operationId": "OrgFacilitySettingsController.get",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "Get settings (given settingsType) of a facility. This would return the most specific setting if found.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "settingsType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "withHistory",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/settings/{settingsType}/byKey": {
            "get": {
                "operationId": "OrgFacilitySettingsController.listByKey",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "list facility settings by key for a settings type",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "settingsType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/taskFacilitySettings": {
            "get": {
                "operationId": "OrgFacilitySettingsController.getAllFacilityTaskSettingsByOrg",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "Get the task settings (SETTINGS_TYPE_TASK_DEFINITION and SETTINGS_TYPE_SCHEDULED_TASK) for all active facilities, divided up by org, org-state, and facility-level. Intended to support the page at tools/pdfTemplate/assignTemplates/orgs/:orgId.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.facility_settings.OrgTaskSettings.OrgTaskSettingsPayload"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/orgFacilitySettings/inherited/{settingsType}/byKey": {
            "get": {
                "operationId": "OrgFacilitySettingsController.getInheritedSettingsByKey",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "Get settings (by key for a settings type) of any combination. This would return the most specific setting if found.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "settingsType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/orgFacilitySettings/inherited/{settingsType}": {
            "get": {
                "operationId": "OrgFacilitySettingsController.getInheritedSettings",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "Get settings (given settingsType) of any combination. This would return the most specific setting if found.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "settingsType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "admissionType",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "withHistory",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/orgFacilitySettings": {
            "post": {
                "operationId": "OrgFacilitySettingsController.upsert",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "Create a new (or update existing) organization or facility settings",
                "description": "Note it is only required to input value for the settings field. <br> 1. When org id and facility id are empty, this request would create(or update existing) global settings. <br> 2. When org id is present but facility id is empty, this request would create(or update existing) org level settings. <br> 3. When both org id and facility id are present, this request would create(or update existing) facility level settings. <br>",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "get": {
                "operationId": "OrgFacilitySettingsController.listAll",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "list all org or facility settings depends on specific level (no query params returns global assignments) include both facility id and org id when searching by facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "admissionType",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "settingsType",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "withHistory",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "OrgFacilitySettingsController.delete",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "delete the record with matching settingsType,facilityId,orgId",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/settings/{settingsType}": {
            "get": {
                "operationId": "OrgFacilitySettingsController.getSettingsForOrg",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "Get settings at the organization level",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "settingsType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "withHistory",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/settings/{settingsType}/byKey": {
            "get": {
                "operationId": "OrgFacilitySettingsController.getSettingsForOrgByKey",
                "tags": [
                    "org_facility_settings"
                ],
                "summary": "list facility settings by key for a settings type",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "settingsType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/orgIntegrations": {
            "post": {
                "operationId": "OrgIntegrationController.create",
                "tags": [
                    "org_integration"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.org_integration.OrgIntegration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "get": {
                "operationId": "OrgIntegrationController.list",
                "tags": [
                    "org_integration"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.org_integration.OrgIntegration"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{orgId}/orgIntegrations": {
            "get": {
                "operationId": "OrgIntegrationController.listByOrg",
                "tags": [
                    "org_integration"
                ],
                "summary": "list by org",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.org_integration.OrgIntegration"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/orgIntegrations/{id}": {
            "get": {
                "operationId": "OrgIntegrationController.get",
                "tags": [
                    "org_integration"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.org_integration.OrgIntegration"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "OrgIntegrationController.patch",
                "tags": [
                    "org_integration"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of an vital (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.org_integration.OrgIntegration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.org_integration.OrgIntegration"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "OrgIntegrationController.delete",
                "tags": [
                    "org_integration"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/orgIntegrations/runForPath": {
            "post": {
                "operationId": "OrgIntegrationController.runForPath",
                "tags": [
                    "org_integration"
                ],
                "summary": "Run an org integration if there is an active one that matches a containing folder of the given path",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/orgIntegrations/{id}/listRuns": {
            "get": {
                "operationId": "OrgIntegrationController.listRuns",
                "tags": [
                    "org_integration"
                ],
                "summary": "list runs",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/orgIntegrations/listRuns": {
            "get": {
                "operationId": "OrgIntegrationController.listRunsForPerson",
                "tags": [
                    "org_integration"
                ],
                "summary": "list runs by person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/contacts/{cid}/orgIntegrations/listRuns": {
            "get": {
                "operationId": "OrgIntegrationController.listRunsForContact",
                "tags": [
                    "org_integration"
                ],
                "summary": "list runs by contact",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunResponse"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "cid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/orgIntegrations/{orgIntegrationId}/runs/{runId}/sourceFile": {
            "get": {
                "operationId": "OrgIntegrationController.getSourceFileForRun",
                "tags": [
                    "org_integration"
                ],
                "summary": "returns the source file for the org integration run",
                "responses": {
                    "200": {
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orgIntegrationId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "runId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/orgIntegrations/discrepancyReports/people/{pid}/date/{date}/evaluateExpression": {
            "post": {
                "operationId": "OrgIntegrationController.evaluateExpressionOnRow",
                "tags": [
                    "org_integration"
                ],
                "summary": "Evaluate expression (CEL) on a particular row",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "date",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        }
                    }
                ]
            }
        },
        "/orgIntegrations/discrepancyReports/evaluateExpression": {
            "post": {
                "operationId": "OrgIntegrationController.evaluateExpressionOnInput",
                "tags": [
                    "org_integration"
                ],
                "summary": "Evaluate expression (CEL) on a given input",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.OrgIntegration.ExpressionTestPayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations": {
            "post": {
                "operationId": "OrganizationController.create",
                "tags": [
                    "organization"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                            },
                            "example": {
                                "name": "",
                                "telecom": [
                                    {
                                        "system": "CONTACT_POINT_SYSTEM_PHONE",
                                        "value": "555-555-5555"
                                    }
                                ],
                                "orgType": "ORG_TYPE_CALIFORNIA"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "get": {
                "operationId": "OrganizationController.list",
                "tags": [
                    "organization"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesInactive",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ]
            }
        },
        "/organizations/{id}": {
            "get": {
                "operationId": "OrganizationController.get",
                "tags": [
                    "organization"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "OrganizationController.update",
                "tags": [
                    "organization"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "OrganizationController.delete",
                "tags": [
                    "organization"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilityFields.csv": {
            "get": {
                "operationId": "OrganizationController.getFacilityFieldsCsv",
                "tags": [
                    "organization"
                ],
                "summary": "get facility fields csv",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "text"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilityFields.xlsx": {
            "get": {
                "operationId": "OrganizationController.getFacilityFieldsXlsx",
                "tags": [
                    "organization"
                ],
                "summary": "get facility fields xlsx",
                "responses": {
                    "200": {
                        "content": {
                            "application/vnd.ms-excel": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/customUserGroups": {
            "post": {
                "operationId": "CustomUserGroupController.create",
                "tags": [
                    "organization"
                ],
                "summary": "create custom user group",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.permission.GroupSettings"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "CustomUserGroupController.list",
                "tags": [
                    "organization"
                ],
                "summary": "list all the custom groups for an org",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.repositories.CustomUserGroup"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people": {
            "post": {
                "operationId": "PersonController.create",
                "tags": [
                    "person"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.person.Person"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "PersonController.list",
                "tags": [
                    "person"
                ],
                "summary": "list by facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.person.Person"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "residentStatus",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{id}": {
            "get": {
                "operationId": "PersonController.getWithoutFacility",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "deprecated": true,
                "description": "This operation is deprecated; use the version that accepts a facility id to allow for tighter access controls",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields to retrieve and the list of fields used to compute the ETag"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.person.Person"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "patch": {
                "operationId": "PersonController.patchWithoutFacility",
                "tags": [
                    "person"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a person (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonMergePatch"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.person.Person"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/people": {
            "get": {
                "operationId": "PersonController.listForOrg",
                "tags": [
                    "person"
                ],
                "summary": "List people from org",
                "description": "List all people across the org that the requesting user has authorization to access",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields to retrieve and the list of fields used to compute the ETag"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.person.Person"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/people/{id}": {
            "get": {
                "operationId": "PersonController.getById",
                "tags": [
                    "person"
                ],
                "summary": "get (superuser only)",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields to retrieve and the list of fields used to compute the ETag"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.person.Person"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{id}": {
            "get": {
                "operationId": "PersonController.get",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields to retrieve and the list of fields used to compute the ETag"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.person.Person"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "patch": {
                "operationId": "PersonController.patch",
                "tags": [
                    "person"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a person (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonMergePatch"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/peopleStats": {
            "get": {
                "operationId": "PersonController.listWithStats",
                "tags": [
                    "person"
                ],
                "summary": "list with task stats",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.person_stats.PersonStats"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "residentStatus",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/emergencyPacket.pdf": {
            "get": {
                "operationId": "EmergencyPacketController.pdf",
                "tags": [
                    "person"
                ],
                "summary": "get emergency packet",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/facesheet.html": {
            "get": {
                "operationId": "FaceSheetController.html",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/facesheet.pdf": {
            "get": {
                "operationId": "FaceSheetController.pdf",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/medlist.html": {
            "get": {
                "operationId": "MedListController.html",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "physicianReview",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/medlist.pdf": {
            "get": {
                "operationId": "MedListController.pdf",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "physicianReview",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/centralMedicationLog.html": {
            "post": {
                "operationId": "CentralMedLogController.html",
                "tags": [
                    "person"
                ],
                "summary": "Generate central medication log (LIC622) based on Meds requested",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.medication_log.MedicationLog"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/centralMedicationLog.pdf": {
            "post": {
                "operationId": "CentralMedLogController.pdf",
                "tags": [
                    "person"
                ],
                "summary": "Generate central medication log (LIC622) based on Meds requested",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.medication_log.MedicationLog"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{personId}/transfer": {
            "post": {
                "operationId": "PersonController.startResidentTransfer",
                "tags": [
                    "person"
                ],
                "summary": "transfer a resident",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.jobs.PersonTransferRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{id}": {
            "delete": {
                "operationId": "PersonController.delete",
                "tags": [
                    "person"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/mar.pdf": {
            "get": {
                "operationId": "MarController.pdf",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Month of MAR generation (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "blank",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Whether the MAR should include resident's meds or be blank (true or false)"
                    },
                    {
                        "in": "query",
                        "name": "includePrnLog",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to include the final page PRN Log. Defaults to true."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/mar.html": {
            "get": {
                "operationId": "MarController.html",
                "tags": [
                    "person"
                ],
                "summary": "get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Month of MAR generation (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "blank",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Whether the MAR should include resident's meds or be blank (true or false)"
                    },
                    {
                        "in": "query",
                        "name": "includePrnLog",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Whether to include the final page PRN Log. Defaults to true."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/emarReport.pdf": {
            "get": {
                "operationId": "EmarReportController.pdf",
                "tags": [
                    "person"
                ],
                "summary": "generate eMAR report PDF",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Month of MAR generation (format YYYY-MM)",
                        "deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "startMonth",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Start month of MAR generation (inclusive) (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "endMonth",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "End month of MAR generation (inclusive) (format YYYY-MM)"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/emarReport.html": {
            "get": {
                "operationId": "EmarReportController.html",
                "tags": [
                    "person"
                ],
                "summary": "generate eMAR report HTML",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Month of MAR generation (format YYYY-MM)",
                        "deprecated": true
                    },
                    {
                        "in": "query",
                        "name": "startMonth",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Start month of MAR generation (inclusive) (format YYYY-MM)"
                    },
                    {
                        "in": "query",
                        "name": "endMonth",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "End month of MAR generation (inclusive) (format YYYY-MM)"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/bedAssignments": {
            "post": {
                "operationId": "BedAssignmentController.assignBed",
                "tags": [
                    "person"
                ],
                "summary": "assign a person to a bed",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.BedAssignmentData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/com.august.models.WriteableBedAssignment"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "BedAssignmentController.list",
                "tags": [
                    "person"
                ],
                "summary": "list the beds for a person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.BedAssignmentWithUpdate"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/bedAssignments/{id}": {
            "delete": {
                "operationId": "BedAssignmentController.delete",
                "tags": [
                    "person"
                ],
                "summary": "Delete a bed assignment",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "BedAssignmentController.update",
                "tags": [
                    "person"
                ],
                "summary": "Edit a bed assignment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.models.BedAssignmentData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/com.august.models.WriteableBedAssignment"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{id}/admit": {
            "post": {
                "operationId": "PersonController.admit",
                "tags": [
                    "person"
                ],
                "summary": "Admit a prospect",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.controllers.AdmitPerson"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/com.august.controllers.AdmitPerson"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/pharmacyIntegration": {
            "post": {
                "operationId": "PharmacyIntegrationController.addPharmacyFacility",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.PharmacyFacility"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/pharmacyIntegration/assign": {
            "post": {
                "operationId": "PharmacyIntegrationController.assignResident",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "assign resident",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyResidentIdentifier"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/pharmacyIntegration/reassign": {
            "post": {
                "operationId": "PharmacyIntegrationController.reassignResident",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "reassign existing pharmacy resident mapping",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "rematchPendingMessages",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        },
                        "description": "Update the pending messages from the previous assignment to the new assignment."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyResidentIdentifier"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/pharmacyIntegration/assignments": {
            "get": {
                "operationId": "PharmacyIntegrationController.listResidentAssignments",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "get resident assignments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyResidentIdentifier"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/pharmacies/partners/{partner}/facilities/{externalId}": {
            "patch": {
                "operationId": "PharmacyIntegrationController.patch",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a pharmacy facility (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "partner",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                        }
                    },
                    {
                        "in": "path",
                        "name": "externalId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.PharmacyFacility"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.PharmacyFacility"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/pharmacyIntegration/partners/{partner}/facilities/{externalId}/people/{externalPersonId}": {
            "delete": {
                "operationId": "PharmacyIntegrationController.unassignResident",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "Remove assignment from a resident to a pharmacy id if no orders have been accepted",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "partner",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                        }
                    },
                    {
                        "in": "path",
                        "name": "externalId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "externalPersonId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/pharmacies/facilities": {
            "get": {
                "operationId": "PharmacyIntegrationController.listPharmacyFacilities",
                "tags": [
                    "pharmacy_integration"
                ],
                "summary": "get a list of pharmacy facilities",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.PharmacyFacility"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pharmacyPartner",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "externalId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesInactive",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/pharmacyMessages/{messageId}": {
            "get": {
                "operationId": "PharmacyMessageController.getMessage",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "gets a pharmacy message",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "messageId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/pharmacyMessages": {
            "get": {
                "operationId": "PharmacyMessageController.list",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "Lists pharmacy messages for a given org and facility",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "messageStatuses",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "$ref": "#/components/schemas/com.august.repositories.pharmacy.MessageStatus"
                            }
                        },
                        "description": "Filter for a given message status. Consult com.august.repositories.pharmacy.MessageStatus for values."
                    },
                    {
                        "in": "query",
                        "name": "personId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        },
                        "description": "Filter to orders for a given personId."
                    },
                    {
                        "in": "query",
                        "name": "residentExternalIdentifier",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "Filter to orders for a given externalResidentId."
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        },
                        "description": "Filter to orders received on or after date, formatted as an extended ISO date."
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08-22"
                        },
                        "description": "Filter to orders received on or before date, formatted as an extended ISO date."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.api.medication.PharmacyMessage.PharmacyMessagePayload"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/medicationOrders/inbox": {
            "get": {
                "operationId": "PharmacyMessageController.inbox",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "Lists pending medication orders (both matched and unmatched) for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.pharmacy_integration.ResidentOrders"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/pharmacyMessages/{messageId}/approve": {
            "post": {
                "operationId": "PharmacyMessageController.approve",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "approve new order",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "messageId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/pharmacyMessages/{messageId}/approveDiscontinue": {
            "post": {
                "operationId": "PharmacyMessageController.approveDiscontinue",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "approve discontinue",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "messageId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/pharmacyMessages/{messageId}/reject": {
            "post": {
                "operationId": "PharmacyMessageController.reject",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "reject a pending message (new order, update, or discontinue)",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.ApprovalData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "messageId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/pharmacyResident/{externalId}/medicationOrders/rejectAll": {
            "post": {
                "operationId": "PharmacyMessageController.deprecatedBulkReject",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "Bulk reject unmatched medication orders",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "externalId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/partners/{partner}/pharmacyFacilities/{externalFacilityId}/pharmacyResident/{externalId}/medicationOrders/rejectAll": {
            "post": {
                "operationId": "PharmacyMessageController.bulkReject",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "Bulk reject unmatched medication orders",
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.medication_order.ApprovalData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "partner",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                        }
                    },
                    {
                        "in": "path",
                        "name": "externalFacilityId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "externalId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/medicationOrders/orderGroups/{orderGroupId}/pharmacyMessages/{messageId}": {
            "get": {
                "operationId": "PharmacyMessageController.getDiff",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "get the merger of between a medication order and a pending pharmacy message including the diff",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.services.pharmacies.MedicationOrderDiffs.OrderAndDiff"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "path",
                        "name": "messageId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/pharmacies/{partner}/order": {
            "post": {
                "operationId": "PharmacyMessageController.createMessage",
                "tags": [
                    "pharmacy_message"
                ],
                "summary": "super user endpoint for manually adding an order for a partner",
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "partner",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{medOrderGroupId}/requestRefill": {
            "post": {
                "operationId": "PharmacyRefillController.requestRefill",
                "tags": [
                    "pharmacy_refill"
                ],
                "summary": "request refill for med",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "medOrderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{medOrderGroupId}/refills": {
            "get": {
                "operationId": "PharmacyRefillController.listForMed",
                "tags": [
                    "pharmacy_refill"
                ],
                "summary": "list all refill requests for med",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.refills.PharmacyRefill"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "medOrderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{medOrderGroupId}/refills/{id}": {
            "get": {
                "operationId": "PharmacyRefillController.get",
                "tags": [
                    "pharmacy_refill"
                ],
                "summary": "get single refill request",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.models.refills.PharmacyRefill"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "medOrderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/{medOrderGroupId}/refillEligibility": {
            "get": {
                "operationId": "PharmacyRefillController.getEligibility",
                "tags": [
                    "pharmacy_refill"
                ],
                "summary": "get eligibility of med order group for refill",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.models.refills.PharmacyRefillEligibility"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "medOrderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/medicationOrders/orderGroups/refillEligibility": {
            "get": {
                "operationId": "PharmacyRefillController.listEligibility",
                "tags": [
                    "pharmacy_refill"
                ],
                "summary": "list eligibility of med orders for refill",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.refills.PharmacyRefillEligibility"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/recurring_charges": {
            "post": {
                "operationId": "RecurringChargeController.create",
                "tags": [
                    "recurring_charge"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                            },
                            "example": {
                                "type": "CHARGE_TYPE_MONTHLY_RATE",
                                "payer": {
                                    "id": "34"
                                },
                                "notes": "Foo Bar Baz",
                                "recurring": {
                                    "interval": "INTERVAL_MONTH",
                                    "rates": [
                                        {
                                            "amount": 100,
                                            "start": {
                                                "day": 31,
                                                "month": 12,
                                                "year": 2021
                                            },
                                            "end": {
                                                "day": 1,
                                                "month": 1,
                                                "year": 2022
                                            },
                                            "notes": "Because",
                                            "reason": "RATE_CHANGE_REASON_OTHER"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "RecurringChargeController.list",
                "tags": [
                    "recurring_charge"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 5000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/recurring_charges/{cid}": {
            "get": {
                "operationId": "RecurringChargeController.get",
                "tags": [
                    "recurring_charge"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "cid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/recurring_charges/{id}": {
            "put": {
                "operationId": "RecurringChargeController.update",
                "tags": [
                    "recurring_charge"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.charge.Charge"
                            },
                            "example": {
                                "type": "CHARGE_TYPE_MONTHLY_RATE",
                                "payer": {
                                    "id": "34"
                                },
                                "notes": "Foo Bar Baz",
                                "recurring": {
                                    "interval": "INTERVAL_MONTH",
                                    "rates": [
                                        {
                                            "amount": 100,
                                            "start": {
                                                "day": 31,
                                                "month": 12,
                                                "year": 2021
                                            },
                                            "end": {
                                                "day": 1,
                                                "month": 1,
                                                "year": 2022
                                            },
                                            "notes": "Because",
                                            "reason": "RATE_CHANGE_REASON_OTHER"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "RecurringChargeController.delete",
                "tags": [
                    "recurring_charge"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/reports/preview.csv": {
            "post": {
                "operationId": "ReportController.postCSVPreview",
                "tags": [
                    "report"
                ],
                "summary": "view the csv data for the report defined in the body",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Report"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "text"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/reports/{reportName}.csv": {
            "get": {
                "operationId": "ReportController.getCSV",
                "tags": [
                    "report"
                ],
                "summary": "return csv data for a given report",
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "format": "text"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "reportName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/reports/preview.json": {
            "post": {
                "operationId": "ReportController.postJsonPreview",
                "tags": [
                    "report"
                ],
                "summary": "view the json data for a report defined in the body",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Report"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.json_report.JsonReport"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/reports/{reportName}.json": {
            "get": {
                "operationId": "ReportController.getJson",
                "tags": [
                    "report"
                ],
                "summary": "return json data for a given report",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.json_report.JsonReport"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "reportName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/reports": {
            "post": {
                "operationId": "ReportController.save",
                "tags": [
                    "report"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Report"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "get": {
                "operationId": "ReportController.listAllReports",
                "tags": [
                    "report"
                ],
                "summary": "return a list of all reports",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Report"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/reports/{reportId}": {
            "put": {
                "operationId": "ReportController.update",
                "tags": [
                    "report"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Report"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "reportId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ReportController.delete",
                "tags": [
                    "report"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "reportId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/reports/assignments": {
            "post": {
                "operationId": "ReportAssignmentController.create",
                "tags": [
                    "report"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.report.ReportAssignment"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/reports": {
            "get": {
                "operationId": "ReportAssignmentController.listAssignedReports",
                "tags": [
                    "report"
                ],
                "summary": "return report names assigned to a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limitedRead",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/reports/allReportAndAssignments": {
            "get": {
                "operationId": "ReportAssignmentController.listAllReportAndAssignments",
                "tags": [
                    "report"
                ],
                "summary": "return all reports and their assignments",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.report_assignments.ReportAndAssignments"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/reports/assignments": {
            "get": {
                "operationId": "ReportAssignmentController.list",
                "tags": [
                    "report"
                ],
                "summary": "return assignment list (for managing assignments only)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.report.ReportAssignment"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/reports/assignments/{assignmentId}": {
            "patch": {
                "operationId": "ReportAssignmentController.patch",
                "tags": [
                    "report"
                ],
                "summary": "partial update assignment",
                "description": "Accepts a json-patch (see example model) or a subset of a report assignment (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.report.ReportAssignment"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.report.ReportAssignment"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ReportAssignmentController.delete",
                "tags": [
                    "report"
                ],
                "summary": "unassign",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "assignmentId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/reports/augustValues": {
            "get": {
                "operationId": "ReportController.listFields",
                "tags": [
                    "report"
                ],
                "summary": "gets a list of all the supported august values",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.json_report.AugustFieldOption"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/reports/availableFields": {
            "get": {
                "operationId": "ReportController.listAvailableFields",
                "tags": [
                    "report"
                ],
                "summary": "gets a list of all the supported report values (august values and report only fields)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.json_report.FieldOption"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms": {
            "post": {
                "operationId": "RoomController.create",
                "tags": [
                    "room"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.occupancy.CreateRoomRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "RoomController.getOccupancy",
                "tags": [
                    "room"
                ],
                "summary": "returns the facility occupancy",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.occupancy.Occupancy"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms/bulkCreate": {
            "post": {
                "operationId": "RoomController.bulkCreate",
                "tags": [
                    "room"
                ],
                "summary": "bulk create endpoint for making multiple rooms at once",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.occupancy.BulkCreateRoomRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms/occupancyStats": {
            "get": {
                "operationId": "RoomController.getOccupancyStats",
                "tags": [
                    "room"
                ],
                "summary": "returns the facility occupancy stats for the last 12 months",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.occupancy.OccupancyStats"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms/{rid}/capacity": {
            "post": {
                "operationId": "RoomController.updateCapacity",
                "tags": [
                    "room"
                ],
                "summary": "Updates the capacity of a room",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.occupancy.UpdateCapacityRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/com.august.protos.api.occupancy.Occupancy.Room"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "rid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms/{id}": {
            "patch": {
                "operationId": "RoomController.patch",
                "tags": [
                    "room"
                ],
                "summary": "update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.room.Room"
                            },
                            "example": {
                                "name": "New Room Name"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.room.Room"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "RoomController.delete",
                "tags": [
                    "room"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms/{rid}/properties/": {
            "delete": {
                "operationId": "RoomController.deleteProperties",
                "tags": [
                    "room"
                ],
                "summary": "soft delete room properties",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "rid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/rooms/{rid}/marketRates/{id}": {
            "delete": {
                "operationId": "RoomController.deleteMarketRate",
                "tags": [
                    "room"
                ],
                "summary": "super user endpoint to delete a room's market rate - this is a soft delete but is different than ending the rate which preserves the historical rate",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "rid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routines/{id}": {
            "get": {
                "operationId": "RoutineController.get",
                "tags": [
                    "routine"
                ],
                "summary": "Get",
                "description": "get a particular routine",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.Routine"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "RoutineController.patch",
                "tags": [
                    "routine"
                ],
                "summary": "update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.routine.Routine"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.Routine"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routines": {
            "get": {
                "operationId": "RoutineController.list",
                "tags": [
                    "routine"
                ],
                "summary": "list",
                "description": "list the latest version of each routine",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.routine.Routine"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/routineOptions": {
            "get": {
                "operationId": "RoutineController.listOptions",
                "tags": [
                    "routine"
                ],
                "summary": "list all predefined routines and the appraisal information associated with them",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.routine_settings.RoutineOptions"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/showerSchedule.html": {
            "get": {
                "operationId": "RoutineController.showerScheduleHtml",
                "tags": [
                    "routine"
                ],
                "summary": "generate shower schedule in HTML format",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/showerSchedule.pdf": {
            "get": {
                "operationId": "RoutineController.showerSchedulePdf",
                "tags": [
                    "routine"
                ],
                "summary": "generate shower schedule in PDF format",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/housekeepingSchedule.html": {
            "get": {
                "operationId": "RoutineController.housekeepingScheduleHtml",
                "tags": [
                    "routine"
                ],
                "summary": "generate housekeeping schedule in HTML format",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/housekeepingSchedule.pdf": {
            "get": {
                "operationId": "RoutineController.housekeepingSchedulePdf",
                "tags": [
                    "routine"
                ],
                "summary": "generate housekeeping schedule in PDF format",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/laundrySchedule.html": {
            "get": {
                "operationId": "RoutineController.laundryScheduleHtml",
                "tags": [
                    "routine"
                ],
                "summary": "generate laundry schedule in HTML format",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/laundrySchedule.pdf": {
            "get": {
                "operationId": "RoutineController.laundrySchedulePdf",
                "tags": [
                    "routine"
                ],
                "summary": "generate laundry schedule in PDF format",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{pid}/careRoutineSummary.html": {
            "get": {
                "operationId": "RoutineController.careSummaryHtml",
                "tags": [
                    "routine"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{pid}/careRoutineSummary.pdf": {
            "get": {
                "operationId": "RoutineController.careSummaryPdf",
                "tags": [
                    "routine"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/careRoutineSummary.zip": {
            "get": {
                "operationId": "RoutineController.careSummaryZip",
                "tags": [
                    "routine"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/zip": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/careNeeds.html": {
            "get": {
                "operationId": "RoutineController.careNeedsHtml",
                "tags": [
                    "routine"
                ],
                "summary": "generate care needs in HTML format",
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/routines/careNeeds.pdf": {
            "get": {
                "operationId": "RoutineController.careNeedsPdf",
                "tags": [
                    "routine"
                ],
                "summary": "generate care needs in PDF format",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{pid}/careLog.pdf": {
            "get": {
                "operationId": "RoutineController.careLogPdf",
                "tags": [
                    "routine"
                ],
                "summary": "generate care log in PDF format",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startMonth",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Range of months to start with (format YYYY-MM)."
                    },
                    {
                        "in": "query",
                        "name": "endMonth",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Range of months to end with, inclusive."
                    },
                    {
                        "in": "query",
                        "name": "includeCareSummary",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "Whether to include the care summary as a first page. Defaults to false."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{pid}/careLog.html": {
            "get": {
                "operationId": "RoutineController.careLogHtml",
                "tags": [
                    "routine"
                ],
                "summary": "generate care log html",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startMonth",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Range of months to start with (format YYYY-MM)."
                    },
                    {
                        "in": "query",
                        "name": "endMonth",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "example": "2023-08"
                        },
                        "description": "Range of months to end with, inclusive."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/routineAdministrations/{id}": {
            "patch": {
                "operationId": "RoutineAdministrationController.patch",
                "tags": [
                    "routine_administration"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/routineAdministrations/bulkUpdate": {
            "post": {
                "operationId": "RoutineAdministrationController.bulkUpdate",
                "tags": [
                    "routine_administration"
                ],
                "summary": "Update multiple routine administrations at once.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "example": {
                                "routineAdministrations": []
                            },
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/com.august.api.routine_administrations.BulkUpdatePayload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/com.august.api.routine_administrations.BulkUpdateResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/routineAdministrations/routineOrderGroups/{routineOrderGroupId}": {
            "get": {
                "operationId": "RoutineAdministrationController.listForRoutineOrderGroup",
                "tags": [
                    "routine_administration"
                ],
                "summary": "listForRoutineOrderGroup",
                "description": "list all routine administrations for the order group",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministration"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routineOrderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routineOrders": {
            "post": {
                "operationId": "RoutineOrderController.create",
                "tags": [
                    "routine_order"
                ],
                "summary": "create",
                "description": "create a new routine",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "RoutineOrderController.list",
                "tags": [
                    "routine_order"
                ],
                "summary": "list",
                "description": "list latest version of each routine order for a person",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routineOrders/{id}": {
            "get": {
                "operationId": "RoutineOrderController.get",
                "tags": [
                    "routine_order"
                ],
                "summary": "get",
                "description": "get a routine order",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "RoutineOrderController.updateOrReplace",
                "tags": [
                    "routine_order"
                ],
                "summary": "Replace existing routine order",
                "description": "Replaces the routine order with the given ID, returning an updated version of the existing object.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routineOrders/orderGroups/{orderGroupId}/latest": {
            "get": {
                "operationId": "RoutineOrderController.getLatest",
                "tags": [
                    "routine_order"
                ],
                "summary": "get latest by order group",
                "description": "get the latest version of routine order in a group",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "orderGroupId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routineOrders/{id}/discontinue": {
            "post": {
                "operationId": "RoutineOrderController.discontinue",
                "tags": [
                    "routine_order"
                ],
                "summary": "Discontinue an existing routine order",
                "description": "Discontinues the routine order with the given ID. Returns the discontinued order.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routineOrders/{id}/unschedule": {
            "post": {
                "operationId": "RoutineOrderController.unschedule",
                "tags": [
                    "routine_order"
                ],
                "summary": "Unschedule an active assessment routine order",
                "description": "Removes the schedule and returns the routine to a draft state. The routine must currently be active and scheduled.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fid}/people/{pid}/routineOrders/{id}/discard": {
            "post": {
                "operationId": "RoutineOrderController.discard",
                "tags": [
                    "routine_order"
                ],
                "summary": "Discard a draft assessment routine order",
                "description": "Discards the routine order with the given ID. Returns the discared order. Must be an assessment routine in a draft state.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/scheduledJobs": {
            "post": {
                "operationId": "ScheduledJobController.create",
                "tags": [
                    "scheduled_job"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.scheduled_job.ScheduledJob"
                            },
                            "example": {
                                "cronString": "0 0/2 * ? * * *",
                                "job": {
                                    "helloWorld": {
                                        "message": "It runs"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "get": {
                "operationId": "ScheduledJobController.list",
                "tags": [
                    "scheduled_job"
                ],
                "summary": "list all scheduled jobs",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.scheduled_job.ScheduledJob"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "includeExpired",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/queueJob": {
            "post": {
                "operationId": "ScheduledJobController.queueJob",
                "tags": [
                    "scheduled_job"
                ],
                "summary": "add a job to the job queue",
                "description": "Accepts a job name (see `payload` field of jobs.proto) and arguments. Use an empty object for a job with no args (`\"job_with_no_args\": {}`)\n",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.jobs.Job"
                            },
                            "example": {
                                "generate_med_administrations_for_facility": {
                                    "facility": {
                                        "org_id": 2,
                                        "facility_id": 4
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/scheduledJobs/{id}": {
            "get": {
                "operationId": "ScheduledJobController.get",
                "tags": [
                    "scheduled_job"
                ],
                "summary": "get a specific scheduled job",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.scheduled_job.ScheduledJob"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "ScheduledJobController.patch",
                "tags": [
                    "scheduled_job"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a facility (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.scheduled_job.ScheduledJob"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.scheduled_job.ScheduledJob"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "delete": {
                "operationId": "ScheduledJobController.delete",
                "tags": [
                    "scheduled_job"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/service_plan/objective_options": {
            "get": {
                "operationId": "ServicePlanController.getObjectiveOptions",
                "tags": [
                    "service_plan"
                ],
                "summary": "get a list of objective options & their human readable description",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.service_plan_objectives.ServicePlanObjectivesGetResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/shifts": {
            "put": {
                "operationId": "ShiftController.upsert",
                "tags": [
                    "shift"
                ],
                "summary": "upsert a list of all shifts covering a whole day",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.protos.shift.Shift"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.shift.Shift"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "ShiftController.deleteForFacility",
                "tags": [
                    "shift"
                ],
                "summary": "Delete all shifts for a facility. Requires force = true to actually delete the shift.",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "force",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        }
                    }
                ]
            },
            "get": {
                "operationId": "ShiftController.list",
                "tags": [
                    "shift"
                ],
                "summary": "List all the shifts configured for a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.shift.Shift"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/shifts/{sId}": {
            "get": {
                "operationId": "ShiftController.get",
                "tags": [
                    "shift"
                ],
                "summary": "Get a shift by id",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.shift.Shift"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "sId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/shiftCareGroups": {
            "put": {
                "operationId": "ShiftCareGroupController.upsert",
                "tags": [
                    "shift_care_group"
                ],
                "summary": "upsert a list of shift care groups for a person",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.api.ShiftCareGroups.ShiftCareGroupUpsert"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.api.ShiftCareGroups.ShiftCareGroupUpsert"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}": {
            "post": {
                "operationId": "SnapshotController.create",
                "tags": [
                    "snapshot"
                ],
                "summary": "create a snapshot (and possibly upload a file)",
                "description": "the body of the request should be the file contents and the client should pass the content-type in the header Content-Type. Use the /utils/pb2json method with 'com.august.protos.snapshot.Snapshot.Data' to generate a full example of the json request body",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object"
                                    },
                                    "file": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SnapshotData"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/partialFile": {
            "post": {
                "operationId": "SnapshotController.createPartialPdf",
                "tags": [
                    "snapshot"
                ],
                "summary": "create a snapshot (and possibly upload a file)",
                "description": "the body of the request should be the file contents and the client should pass the content-type in the header Content-Type. Use the /utils/pb2json method with 'com.august.protos.snapshot.Snapshot.Data' to generate a full example of the json request body",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object"
                                    },
                                    "file": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.snapshot_partial_pdf.SnapshotPartialPdf"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/latest/signatureDetails/url": {
            "get": {
                "operationId": "SnapshotController.getSignatureUrl",
                "tags": [
                    "snapshot"
                ],
                "summary": "get a url for the current user to use to esign",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.esign.EmbeddedUrlResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/latest/signatureDetails/inPerson/url": {
            "get": {
                "operationId": "SnapshotController.getInPersonSignatureUrl",
                "tags": [
                    "snapshot"
                ],
                "summary": "get a url for the current user to use to esign",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.esign.EmbeddedUrlResponse"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots": {
            "get": {
                "operationId": "SnapshotController.list",
                "tags": [
                    "snapshot"
                ],
                "summary": "list",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "dataType",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.SnapshotStatus",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 2000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{id}": {
            "get": {
                "operationId": "SnapshotController.get",
                "tags": [
                    "snapshot"
                ],
                "summary": "retrieve a specific snapshot",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/latest": {
            "get": {
                "operationId": "SnapshotController.getLatest",
                "tags": [
                    "snapshot"
                ],
                "summary": "retrieve the latest snapshot of a datatype",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "create",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            },
            "post": {
                "operationId": "SnapshotController.getOrCreateLatest",
                "tags": [
                    "snapshot"
                ],
                "summary": "Get or create a new draft snapshot",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/latest/file": {
            "get": {
                "operationId": "SnapshotController.getLatestFile",
                "tags": [
                    "snapshot"
                ],
                "summary": "return the uploaded file associated with the latest snapshot of a dataType",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf, image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/{id}": {
            "get": {
                "operationId": "SnapshotController.getSpecified",
                "tags": [
                    "snapshot"
                ],
                "summary": "retrieve the specified snapshot of a datatype",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "SnapshotController.patch",
                "tags": [
                    "snapshot"
                ],
                "summary": "partial update (\"merge patch\")",
                "description": "Accepts a json-patch (see example model) or a subset of a person (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "the id or 'latest'"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "delete": {
                "operationId": "SnapshotController.delete",
                "tags": [
                    "snapshot"
                ],
                "summary": "delete a snapshot and any associated file",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/snapshots/{dataType}/{id}/file": {
            "get": {
                "operationId": "SnapshotController.getSpecifiedFile",
                "tags": [
                    "snapshot"
                ],
                "summary": "return the uploaded file associated with the specified snapshot of a datatype",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf, image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/profilePhoto/size/{size}": {
            "get": {
                "operationId": "SnapshotController.profilePhotoUrl",
                "tags": [
                    "snapshot"
                ],
                "summary": "returns a link to an image of the requested size",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "This image is not found or not available in this size"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "size",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.ImageSize"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/snapshots/{dataType}/sendBulk": {
            "post": {
                "operationId": "SnapshotController.sendBulk",
                "tags": [
                    "snapshot"
                ],
                "summary": "Send a bulk snapshot pdf to the client via email (asynchronously)",
                "requestBody": {
                    "required": false
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{pId}/snapshots/{id}/reactivate": {
            "post": {
                "operationId": "SnapshotController.reactivate",
                "tags": [
                    "snapshot"
                ],
                "summary": "Reactivate a soft deleted snapshot",
                "requestBody": {
                    "required": false
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/profilePhotoFile/size/{size}": {
            "get": {
                "operationId": "SnapshotController.getProfileImage",
                "tags": [
                    "snapshot"
                ],
                "summary": "returns a profile image of the requested size",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "size",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.ImageSize"
                        }
                    },
                    {
                        "name": "If-Modified-Since",
                        "in": "header",
                        "description": "Return not modified if file has not changed since this instant"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf, image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/people/{personId}/profilePhotoFile/snapshots/{snapshotId}": {
            "get": {
                "operationId": "SnapshotController.getSpecifiedProfileImage",
                "tags": [
                    "snapshot"
                ],
                "summary": "returns a specific version of a profile image with a cache forever header",
                "responses": {
                    "200": {
                        "content": {
                            "application/pdf, image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "snapshotId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/facilityCompletionStats": {
            "get": {
                "operationId": "FacilityStatsController.getFacilityCompletionStats",
                "tags": [
                    "stats"
                ],
                "summary": "Get facility completion stats",
                "deprecated": true,
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.facility_stats.FacilityCompletionStats"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/facilityCompliance": {
            "get": {
                "operationId": "FacilityStatsController.getFacilityCompliance",
                "tags": [
                    "stats"
                ],
                "summary": "Get facility compliance stats. Similar to facilityCompletionStats but only filters out completion types tied to tasks that aren't configured for the org/facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.ehr.FacilityCompliance"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/residentCompletionStats": {
            "get": {
                "operationId": "FacilityStatsController.listResidentCompletionStats",
                "tags": [
                    "stats"
                ],
                "summary": "Get completion stats for every resident in a facility",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.facility_stats.ResidentCompletionStats"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/people/{pId}/residentCompletionStats": {
            "get": {
                "operationId": "FacilityStatsController.getResidentCompletionStats",
                "tags": [
                    "stats"
                ],
                "summary": "Get a single resident completion stats",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.facility_stats.ResidentCompletionStats"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "pId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/metrics": {
            "post": {
                "operationId": "OrganizationMetricController.facilityMetricsAggregateHistory",
                "tags": [
                    "stats"
                ],
                "summary": "request facility metrics",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.FacilityMetricAggregateDescriptor"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.FacilityMetricAggregateHistory"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/metrics/data": {
            "post": {
                "operationId": "OrganizationMetricController.facilityMetricsDataHistory",
                "tags": [
                    "stats"
                ],
                "summary": "request raw data for facility metrics (without aggregates for specific dates)",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.FacilityMetricDataDescriptor"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.FacilityMetricDataHistory"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/analytics": {
            "get": {
                "operationId": "ApplicationEventController.eventCountByFacility",
                "tags": [
                    "stats"
                ],
                "summary": "Application Event count per facility",
                "description": "Returns arrays of counts for each event passed. \\\nA request with repeated events would look like `analytics?event=PROSPECT_MOVED_IN&event=SERVICE_APPRAISAL&startDate=2022-05-01&endDate=2022-05-10&interval=day`. \\\nThe start and end dates should ideally be `yyyy-MM-dd` but any ISO compatible string will get parsed. The smallest interval resolution is `day` so anything else will get truncated.\n",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "event",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/com.august.protos.application_event.ApplicationEvent"
                            }
                        },
                        "description": "optionally repeating string of event enum names, see application_event.proto"
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "start date in ISO format (inclusive)"
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "end date in ISO format (inclusive)"
                    },
                    {
                        "in": "query",
                        "name": "interval",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "the rollup interval, one of [day, week, month, quarter, year]"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.application_event.ApplicationEventCounts"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/{taskId}/listPossibleSigners": {
            "get": {
                "operationId": "SignaturePacketController.listPossibleSigners",
                "tags": [
                    "task"
                ],
                "summary": "list possible signers of a given task",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.api.esign.Esign.PossibleSigners"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesUserWithOrgAccess",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesRp",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/{taskId}/signaturePacket/processSignature": {
            "post": {
                "operationId": "SignaturePacketController.processSignature",
                "tags": [
                    "task"
                ],
                "summary": "process signature by marking a signer as signature processing with given email",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/{taskId}/signaturePacket": {
            "post": {
                "operationId": "SignaturePacketController.createSignaturePacket",
                "tags": [
                    "task"
                ],
                "summary": "create signature packet",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.controllers.ConfigureSigner"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "SignaturePacketController.updateSignaturePacket",
                "tags": [
                    "task"
                ],
                "summary": "change signer on pre-existing signature packet",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/com.august.protos.snapshot.Signer"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/{dataType}/dueDate": {
            "get": {
                "operationId": "TaskController.getDueDate",
                "tags": [
                    "task"
                ],
                "summary": "get task due date",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "The resource matches the given etag."
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "post": {
                "operationId": "TaskController.changeDueDate",
                "tags": [
                    "task"
                ],
                "summary": "change task due date (this may create a new task)",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.task_due_date.ChangeTaskDueDateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/tasks/{id}": {
            "get": {
                "operationId": "TaskController.get",
                "tags": [
                    "task"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "304": {
                        "description": "The resource matches the given etag."
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "TaskController.patch",
                "tags": [
                    "task"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of a task (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields being modified, and the list of fields from which to compute the ETag (only relevant if an If-Match header is given). This should match the list of fields given when using GET"
                    },
                    {
                        "name": "If-Match",
                        "in": "header",
                        "description": "Only do the update if this matches the current ETag returned by GET"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.task.Task"
                            }
                        },
                        "application/json-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonPatch"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "delete": {
                "operationId": "TaskController.delete",
                "tags": [
                    "task"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/tasks/{id}": {
            "get": {
                "operationId": "TaskController.getById",
                "tags": [
                    "task"
                ],
                "summary": "get (superuser only)",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/tasks/{id}/close": {
            "post": {
                "operationId": "TaskController.close",
                "tags": [
                    "task"
                ],
                "summary": "close",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/tasks/{id}/completeViaUpload": {
            "post": {
                "operationId": "TaskController.completeViaUpload",
                "tags": [
                    "task"
                ],
                "summary": "upload a file to complete a task",
                "description": "the body of the request should be the file contents and the client should pass the content-type in the header Content-Type. Use the /utils/pb2json method with 'com.august.protos.snapshot.Snapshot.Data' to generate a full example of the json request body",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot.Data"
                                            }
                                        },
                                        "example": {
                                            "uploadInfo": {
                                                "notes": "I uploaded this",
                                                "signatureData": {
                                                    "dateSigned": {
                                                        "year": 2021,
                                                        "month": 1,
                                                        "day": 12
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/tasks/{id}/completeViaPartialUpload": {
            "post": {
                "operationId": "TaskController.completeViaPartialUpload",
                "tags": [
                    "task"
                ],
                "summary": "create a snapshot (and possibly upload a file)",
                "description": "the body of the request should be the file contents and the client should pass the content-type in the header Content-Type. Use the /utils/pb2json method with 'com.august.protos.snapshot.Snapshot.Data' to generate a full example of the json request body",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object"
                                    },
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.snapshot_partial_pdf.SnapshotPartialPdf"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/{id}/completeManually": {
            "post": {
                "operationId": "TaskController.completeManually",
                "tags": [
                    "task"
                ],
                "summary": "complete task manually",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.snapshot.SnapshotDetail"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/people/{personId}/tasks": {
            "get": {
                "operationId": "TaskController.list",
                "tags": [
                    "task"
                ],
                "summary": "list",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "open",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        },
                        "description": "Set as true to filter for tasks with status considered open, false to filter for those with status considered closed, leave absent to query for all tasks."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.task.Task"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/people/{personId}/tasks/share": {
            "post": {
                "operationId": "TaskController.shareWithoutFacility",
                "tags": [
                    "task"
                ],
                "summary": "Share the supplied task ids (deprecated- use path with facility id)",
                "deprecated": true,
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.sharing.Sharing"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/share": {
            "post": {
                "operationId": "TaskController.share",
                "tags": [
                    "task"
                ],
                "summary": "Share the supplied task ids",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.sharing.Sharing"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/remind": {
            "post": {
                "operationId": "TaskController.sendReminder",
                "tags": [
                    "task"
                ],
                "summary": "Remind the responsible party of open tasks",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/tasks/{dataType}": {
            "post": {
                "operationId": "TaskController.recreate",
                "tags": [
                    "task"
                ],
                "summary": "create (copy existing data from previous completed task of same type if applicable)",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "dataType",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "customType",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/taskTemplateInfos": {
            "get": {
                "operationId": "TaskController.listTaskTemplates",
                "tags": [
                    "task"
                ],
                "summary": "List all relevant tasks for a facility",
                "description": "A list of tasks (templates) that are relevant for the given facility.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.task.TaskTemplateInfo"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/taskTemplateInfosForToolUsers": {
            "get": {
                "operationId": "TaskController.listTaskTemplateInfosForToolUsers",
                "tags": [
                    "task"
                ],
                "summary": "List all relevant tasks for a facility (same as /taskTemplateInfos but this one is for tool users only)",
                "description": "A list of tasks (templates) that are relevant for the given facility.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.task.TaskTemplateInfo"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{fId}/tasks": {
            "get": {
                "operationId": "TaskController.listPerPersonTasks",
                "tags": [
                    "task"
                ],
                "summary": "List per person task list in a facility",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "fId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "residentStatus",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus",
                            "nullable": true
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        },
                        "description": "The list of fields to retrieve and the list of fields used to compute the ETag"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "in": "query",
                        "name": "open",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "nullable": true
                        },
                        "description": "Set as true to filter for tasks with status considered open, false to filter for those with status considered closed, leave absent to query for all tasks."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.person_tasks.PersonTasks"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/groupPermissions": {
            "get": {
                "operationId": "UserController.listPermissions",
                "tags": [
                    "user"
                ],
                "summary": "list group permissions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.models.users.PermissionCategory"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/users/{id}": {
            "put": {
                "operationId": "UserController.updateFacilityUser",
                "tags": [
                    "user"
                ],
                "summary": "update facility user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "UserController.patchFacilityUser",
                "tags": [
                    "user"
                ],
                "summary": "partial update",
                "description": "Accepts a subset of a UserAccount (for a merge-patch). See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/users": {
            "get": {
                "operationId": "UserController.listFacilityUsers",
                "tags": [
                    "user"
                ],
                "summary": "list facility users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserAccount"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "includesUserWithOrgAccess",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ]
            },
            "post": {
                "operationId": "UserController.createFacilityUser",
                "tags": [
                    "user"
                ],
                "summary": "create facility user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/users": {
            "post": {
                "operationId": "UserController.createMultiFacilityUser",
                "tags": [
                    "user"
                ],
                "summary": "create multi-facility user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/users": {
            "post": {
                "operationId": "UserController.createOrgUser",
                "tags": [
                    "user"
                ],
                "summary": "create org or facility user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "UserController.listOrgUsers",
                "tags": [
                    "user"
                ],
                "summary": "list org or facility users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserAccount"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/users/{id}": {
            "put": {
                "operationId": "UserController.updateOrgUser",
                "tags": [
                    "user"
                ],
                "summary": "update an org or facility user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UserController.deleteOrgUser",
                "tags": [
                    "user"
                ],
                "summary": "delete an organization user",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "UserController.patchOrgUser",
                "tags": [
                    "user"
                ],
                "summary": "partial update",
                "description": "Accepts a subset of a UserAccount (for a merge-patch). See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/internalUsers": {
            "get": {
                "operationId": "UserController.listInternalUsers",
                "tags": [
                    "user"
                ],
                "summary": "list internal users",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserAccount"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/users": {
            "post": {
                "operationId": "UserController.create",
                "tags": [
                    "user"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/user": {
            "get": {
                "operationId": "UserController.getRequestUser",
                "tags": [
                    "user"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/users/emarPin": {
            "post": {
                "operationId": "UserController.createEmarPin",
                "tags": [
                    "user"
                ],
                "summary": "create or regenerate user PIN for emar",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiGeneratedEmarPin"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "operationId": "UserController.get",
                "tags": [
                    "user"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "put": {
                "operationId": "UserController.update",
                "tags": [
                    "user"
                ],
                "summary": "update",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UserController.delete",
                "tags": [
                    "user"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "UserController.patch",
                "tags": [
                    "user"
                ],
                "summary": "partial update",
                "description": "Accepts a subset of a UserAccount (for a merge-patch). See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserAccount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/users/email/{email}": {
            "get": {
                "operationId": "UserController.getByEmail",
                "tags": [
                    "user"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/login": {
            "post": {
                "operationId": "UserController.emailMagicLink",
                "tags": [
                    "user"
                ],
                "summary": "Send magic link",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.login.Login"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "example": {
                                        "data": {},
                                        "meta": {
                                            "hello": "Sent"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/token": {
            "post": {
                "operationId": "UserController.initiateAuth",
                "tags": [
                    "user"
                ],
                "summary": "Programmatic Login",
                "security": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.token.Token"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/users/{userId}/setPassword": {
            "post": {
                "operationId": "UserController.setPassword",
                "tags": [
                    "user"
                ],
                "summary": "Set the password for a user",
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "temporary",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        },
                        "description": "If true, the password is temporary and must be reset on login. (default false)"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Updated"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/users/aliasExists": {
            "post": {
                "operationId": "UserController.aliasExists",
                "tags": [
                    "user"
                ],
                "summary": "Check if a user alias exists",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "$ref": "#/components/schemas/com.august.protos.api.user_exists.UserExistsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/changeTemporaryPassword": {
            "post": {
                "operationId": "UserController.changeTemporaryPassword",
                "tags": [
                    "user"
                ],
                "summary": "Change a user's temporary password",
                "security": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.api.ChangeTemporaryPassword.ChangeTemporaryPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/users/forgotPassword": {
            "post": {
                "operationId": "UserController.forgotPassword",
                "tags": [
                    "user"
                ],
                "summary": "Forgotten password",
                "security": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.forgot_password.ForgotPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.forgot_password.ForgotPasswordResponse"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/users/confirmForgotPassword": {
            "post": {
                "operationId": "UserController.confirmForgotPassword",
                "tags": [
                    "user"
                ],
                "summary": "Confirm forgotten password reset",
                "security": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.protos.api.forgot_password.ConfirmForgotPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/organizations/{orgId}/users/{id}/resetMfaMethod": {
            "post": {
                "operationId": "UserController.resetMfaMethodForOrgUser",
                "tags": [
                    "user"
                ],
                "summary": "Reset an MFA method",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.services.auth.ResetMfaRequest"
                            },
                            "example": {
                                "method": "EMAIL"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/users/{id}/resetMfaMethod": {
            "post": {
                "operationId": "UserController.resetMfaMethod",
                "tags": [
                    "user"
                ],
                "summary": "Reset an MFA method for a user. This is a super-user endpoint intended for managing internal users",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.services.auth.ResetMfaRequest"
                            },
                            "example": {
                                "method": "EMAIL"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/userSessions": {
            "post": {
                "operationId": "UserSessionController.create",
                "tags": [
                    "user_session"
                ],
                "summary": "Create a user session",
                "security": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "New session was created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.auth.CreateSessionResponse"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "AugustSession=eyJhbGciOiJIUzI1NiJ9...; SameSite=Lax; Path=/; Secure; HTTPOnly"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User must perform a required action before they can authenticate (e.g., password reset)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.models.auth.UserAction"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/userSessions/current": {
            "get": {
                "operationId": "UserSessionController.validate",
                "tags": [
                    "user_session"
                ],
                "summary": "Check if session is valid",
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session passed validation checks"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            },
            "delete": {
                "operationId": "UserSessionController.end",
                "tags": [
                    "user_session"
                ],
                "summary": "End a user session. Session cookie will be dropped, even if the request doesn't authenticate or errors.",
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Session ended successfully"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "reason",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.user_session.UserSessionLogoutReason",
                            "nullable": true
                        }
                    }
                ]
            }
        },
        "/userSessions/mfa/configure": {
            "post": {
                "operationId": "UserSessionController.configureMfa",
                "tags": [
                    "user_session"
                ],
                "summary": "Configures MFA options for a user",
                "security": [
                    {
                        "TemporaryCookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.services.auth.MfaConfiguration"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/userSessions/mfa/verify": {
            "post": {
                "operationId": "UserSessionController.verifyMfaCode",
                "tags": [
                    "user_session"
                ],
                "summary": "Verify an MFA code",
                "security": [
                    {
                        "TemporaryCookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.services.auth.MfaCodeVerification"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Code verified successfully"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/userSessions/mfa/resend": {
            "post": {
                "operationId": "UserSessionController.resendMfaCode",
                "tags": [
                    "user_session"
                ],
                "summary": "Resend an MFA code",
                "security": [
                    {
                        "TemporaryCookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/com.august.services.auth.MfaResendCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request for new MFA code sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.services.auth.MfaChallenge"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "operationId": "UtilController.ping",
                "tags": [
                    "util"
                ],
                "summary": "health-check",
                "security": [],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ping/db": {
            "get": {
                "operationId": "UtilController.dbPing",
                "tags": [
                    "util"
                ],
                "summary": "Database health-check",
                "security": [],
                "responses": {
                    "200": {
                        "description": "Database is up"
                    },
                    "503": {
                        "description": "Database is down"
                    }
                }
            }
        },
        "/version": {
            "get": {
                "operationId": "UtilController.version",
                "tags": [
                    "util"
                ],
                "summary": "version information",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "minClientVersion": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/migrations": {
            "get": {
                "operationId": "UtilController.completedMigrations",
                "tags": [
                    "util"
                ],
                "summary": "list completed migrations",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/emails/sent": {
            "get": {
                "operationId": "UtilController.sentEmails",
                "tags": [
                    "util"
                ],
                "summary": "list email records",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "orgId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "facilityId",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/emails/blocked/{email}": {
            "get": {
                "operationId": "UtilController.blockedEmail",
                "tags": [
                    "util"
                ],
                "summary": "return information regarding blocked status of requested email",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.blocked_email.BlockedEmail"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "UtilController.deleteBlockedEmail",
                "tags": [
                    "util"
                ],
                "summary": "delete blocked email in app list and with provider, if exists",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/util/slowQuery": {
            "get": {
                "operationId": "UtilController.issueSlowQuery",
                "tags": [
                    "util"
                ],
                "summary": "issue a slow postgres query",
                "description": "asks 'SELECT pg_sleep(3)' of postgres",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/util/logWarning": {
            "get": {
                "operationId": "UtilController.logWarning",
                "tags": [
                    "util"
                ],
                "summary": "log a warning",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/util/logError": {
            "get": {
                "operationId": "UtilController.logError",
                "tags": [
                    "util"
                ],
                "summary": "log an error",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/util/statusCode": {
            "get": {
                "operationId": "UtilController.statusCode",
                "tags": [
                    "util"
                ],
                "summary": "return an error response with the given status code",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ]
            }
        },
        "/util/permissions": {
            "get": {
                "operationId": "UtilController.listPermissions",
                "tags": [
                    "util"
                ],
                "summary": "current group types and associated permissions",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.api.user_permissions_response.GroupTypePermissions"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                }
            }
        },
        "/util/validateObjects": {
            "get": {
                "operationId": "UtilController.validateObjects",
                "tags": [
                    "util"
                ],
                "summary": "Validate objects in the database",
                "description": "This runs validation on DB objects. It is recommended to add a limit so we don't overload the system. Below is an example usage <br> entityClassName -> com.august.protos.contact.Contact <br> tableClassName -> com.august.slick.Tables.Contacts <br> validatorClassName -> com.august.validation.ContactValidator <br>",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "entityClassName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "tableClassName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "validatorClassName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/util/checkDate": {
            "get": {
                "operationId": "UtilController.checkDate",
                "tags": [
                    "util"
                ],
                "summary": "Validate date objects in the database",
                "description": "This checks for any invalid dates in the at a specific path in the json column of a table.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "selectId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "id"
                        }
                    },
                    {
                        "in": "query",
                        "name": "jsonPath",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "'start'"
                        }
                    },
                    {
                        "in": "query",
                        "name": "tableName",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "recurring_charges"
                        }
                    },
                    {
                        "in": "query",
                        "name": "arrayPrefix",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true,
                            "example": "json_value->'recurring'->'rates'"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/vitals": {
            "post": {
                "operationId": "VitalController.create",
                "tags": [
                    "vital"
                ],
                "summary": "create",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vital"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Created"
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "get": {
                "operationId": "VitalController.list",
                "tags": [
                    "vital"
                ],
                "summary": "list vitals of a resident",
                "description": "list vitals of a resident, sorted by vital creation time in descending order.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1000
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/vitals/latest": {
            "get": {
                "operationId": "VitalController.getLatest",
                "tags": [
                    "vital"
                ],
                "summary": "get latest vital observation of each type",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.api.latest_vital.LatestVital"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            }
        },
        "/organizations/{orgId}/facilities/{facilityId}/people/{personId}/vitals/{id}": {
            "get": {
                "operationId": "VitalController.get",
                "tags": [
                    "vital"
                ],
                "summary": "get",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "$ref": "#/components/responses/Error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "VitalController.delete",
                "tags": [
                    "vital"
                ],
                "summary": "delete",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Deleted"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "VitalController.patch",
                "tags": [
                    "vital"
                ],
                "summary": "partial update",
                "description": "Accepts a json-patch (see example model) or a subset of an vital (for a merge-patch). Make sure to set the the content-type accordingly. See https://tools.ietf.org/html/rfc6902 and https://tools.ietf.org/html/rfc7396 for more details on the protocol.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/merge-patch+json": {
                            "schema": {
                                "$ref": "#/components/schemas/Vital"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "orgId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "facilityId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "personId",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "nullable": true
                        }
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "com.august.models.billing.NoPaymentCap": {
                "properties": {}
            },
            "com.august.models.billing.PercentagePaymentCap": {
                "properties": {
                    "percentage": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "percentage"
                ]
            },
            "com.august.models.billing.FixedPaymentCap": {
                "properties": {
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "amountCents"
                ]
            },
            "com.august.protos.encryption.EncryptionMethod": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ENCRYPTION_METHOD_CLEAR_TEXT",
                    "ENCRYPTION_METHOD_KMS"
                ]
            },
            "com.august.protos.api.token.AuthParameters.AuthParamsOneof": {
                "properties": {}
            },
            "com.august.protos.api.token.AuthParameters": {
                "properties": {
                    "authParamsOneof": {
                        "$ref": "#/components/schemas/com.august.protos.api.token.AuthParameters.AuthParamsOneof"
                    }
                },
                "required": [
                    "authParamsOneof"
                ]
            },
            "com.august.models.billing.RoomDescription": {
                "properties": {
                    "bedId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "roomNumber": {
                        "type": "string"
                    },
                    "bedNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "capacity": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "bedId",
                    "roomNumber",
                    "capacity"
                ]
            },
            "com.august.models.billing.RoomChanged": {
                "properties": {
                    "previousRoom": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.billing.RoomDescription"
                    },
                    "newRoom": {
                        "$ref": "#/components/schemas/com.august.models.billing.RoomDescription"
                    }
                },
                "required": [
                    "newRoom"
                ]
            },
            "com.august.models.billing.RoomChangedEvent": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "eventData": {
                        "$ref": "#/components/schemas/com.august.models.billing.RoomChanged"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "COMPLETED"
                        ]
                    }
                },
                "required": [
                    "personId",
                    "eventData",
                    "status"
                ]
            },
            "com.august.models.billing.ResidentStatusChanged": {
                "properties": {
                    "previousStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus"
                    },
                    "newStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus"
                    }
                },
                "required": [
                    "previousStatus",
                    "newStatus"
                ]
            },
            "com.august.models.billing.ResidentStatusChangedEvent": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "eventData": {
                        "$ref": "#/components/schemas/com.august.models.billing.ResidentStatusChanged"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "PENDING",
                            "COMPLETED"
                        ]
                    }
                },
                "required": [
                    "personId",
                    "eventData",
                    "status"
                ]
            },
            "com.august.models.MetaData": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdById",
                    "createdAt",
                    "modifiedById",
                    "modifiedAt"
                ]
            },
            "com.august.protos.api.latest_vital.HeightResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Height"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.PainResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Pain"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.OxygenSaturationResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.OxygenSaturation"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.BloodSugarResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodSugar"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.RespiratoryRateResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.RespiratoryRate"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.HeartRateResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.HeartRate"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.BloodPressureResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodPressure"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.TemperatureResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Temperature"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.WeightResponse": {
                "properties": {
                    "record": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Weight"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.latest_vital.CompositePanel": {
                "properties": {
                    "weight": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.WeightResponse"
                    },
                    "temperature": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.TemperatureResponse"
                    },
                    "bloodPressure": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.BloodPressureResponse"
                    },
                    "heartRate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.HeartRateResponse"
                    },
                    "respiratoryRate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.RespiratoryRateResponse"
                    },
                    "bloodSugar": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.BloodSugarResponse"
                    },
                    "oxygenSaturation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.OxygenSaturationResponse"
                    },
                    "pain": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.PainResponse"
                    },
                    "height": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.HeightResponse"
                    }
                }
            },
            "com.august.protos.api.latest_vital.LatestVital": {
                "properties": {
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "compositePanel": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.latest_vital.CompositePanel"
                    }
                }
            },
            "com.august.protos.api.user_permissions_response.GroupTypePermissions": {
                "properties": {
                    "groupType": {
                        "$ref": "#/components/schemas/com.august.protos.permission.GroupType"
                    },
                    "groupPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.permission.GroupPermission"
                        }
                    }
                },
                "required": [
                    "groupType",
                    "groupPermissions"
                ]
            },
            "com.august.protos.api.blocked_email.EmailProviderSuppressedDestination": {
                "properties": {
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastUpdateTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.blocked_email.BlockedEmail": {
                "properties": {
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "blocked": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "providerSuppressedDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.blocked_email.EmailProviderSuppressedDestination"
                    }
                }
            },
            "com.august.services.auth.MfaResendCodeRequest": {
                "properties": {
                    "credentials": {
                        "$ref": "#/components/schemas/com.august.services.auth.MfaCredentials"
                    }
                },
                "required": [
                    "credentials"
                ]
            },
            "com.august.services.auth.MfaCodeVerification": {
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "challengeSessionId": {
                        "type": "string"
                    },
                    "method": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaMethod"
                    }
                },
                "required": [
                    "code",
                    "challengeSessionId",
                    "method"
                ]
            },
            "com.august.services.auth.MfaCredentials": {
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": [
                    "username",
                    "password"
                ]
            },
            "com.august.services.auth.MfaConfiguration": {
                "properties": {
                    "value": {
                        "type": "string",
                        "nullable": true
                    },
                    "credentials": {
                        "$ref": "#/components/schemas/com.august.services.auth.MfaCredentials"
                    },
                    "method": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaMethod"
                    }
                },
                "required": [
                    "credentials",
                    "method"
                ]
            },
            "com.august.protos.user_session.UserSessionLogoutReason": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "USER_SESSION_LOGOUT_REASON_EXPLICIT",
                    "USER_SESSION_LOGOUT_REASON_UNAUTHORIZED_RESPONSE",
                    "USER_SESSION_LOGOUT_REASON_INACTIVITY",
                    "USER_SESSION_LOGOUT_REASON_OVERRIDDEN_BY_NEW",
                    "USER_SESSION_LOGOUT_REASON_ERROR"
                ]
            },
            "com.august.models.auth.UserAction": {
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": [
                            "SETUP_MFA",
                            "ACCOUNT_LOCKED_TRY_AGAIN_LATER",
                            "SMS_MFA",
                            "NEW_PASSWORD_REQUIRED",
                            "EMAIL_OTP",
                            "NO_ACTION"
                        ]
                    }
                },
                "required": [
                    "action"
                ]
            },
            "com.august.services.auth.MfaChallenge": {
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "method": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaMethod"
                    },
                    "challengeSessionId": {
                        "type": "string"
                    },
                    "maskedCodeDeliveryDestination": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "username",
                    "method",
                    "challengeSessionId"
                ]
            },
            "com.august.models.auth.CreateSessionResponse": {
                "properties": {
                    "username": {
                        "type": "string",
                        "nullable": true
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "SETUP_MFA",
                            "ACCOUNT_LOCKED_TRY_AGAIN_LATER",
                            "SMS_MFA",
                            "NEW_PASSWORD_REQUIRED",
                            "EMAIL_OTP",
                            "NO_ACTION"
                        ]
                    },
                    "mfaChallenge": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.services.auth.MfaChallenge"
                    }
                },
                "required": [
                    "action"
                ]
            },
            "com.august.services.auth.ResetMfaRequest": {
                "properties": {
                    "method": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaMethod"
                    }
                },
                "required": [
                    "method"
                ]
            },
            "com.august.protos.api.forgot_password.ConfirmForgotPasswordRequest": {
                "properties": {
                    "userAlias": {
                        "type": "string",
                        "nullable": true
                    },
                    "verificationCode": {
                        "type": "string",
                        "nullable": true
                    },
                    "newPassword": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.security_policy.PasswordPolicy": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PASSWORD_POLICY_STANDARD",
                    "PASSWORD_POLICY_STANDARD_PLUS",
                    "PASSWORD_POLICY_STRICT"
                ]
            },
            "com.august.protos.api.forgot_password.ForgotPasswordResponse": {
                "properties": {
                    "passwordPolicy": {
                        "$ref": "#/components/schemas/com.august.protos.settings.security_policy.PasswordPolicy"
                    }
                },
                "required": [
                    "passwordPolicy"
                ]
            },
            "com.august.protos.api.forgot_password.ForgotPasswordRequest": {
                "properties": {
                    "userAlias": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.api.ChangeTemporaryPassword.ChangeTemporaryPasswordRequest": {
                "properties": {
                    "userAlias": {
                        "type": "string"
                    },
                    "currentPassword": {
                        "type": "string"
                    },
                    "newPassword": {
                        "type": "string"
                    }
                },
                "required": [
                    "userAlias",
                    "currentPassword",
                    "newPassword"
                ]
            },
            "com.august.protos.api.user_exists.UserExistsRequest.UserAliasOneof": {
                "properties": {}
            },
            "com.august.protos.api.user_exists.UserExistsRequest": {
                "properties": {
                    "userAliasOneof": {
                        "$ref": "#/components/schemas/com.august.protos.api.user_exists.UserExistsRequest.UserAliasOneof"
                    }
                },
                "required": [
                    "userAliasOneof"
                ]
            },
            "com.august.protos.api.login.Login": {
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "email"
                ]
            },
            "com.august.api.medication.Emar.ApiGeneratedEmarPin": {
                "properties": {
                    "plaintextPin": {
                        "type": "string"
                    }
                },
                "required": [
                    "plaintextPin"
                ]
            },
            "com.august.models.users.PermissionOption": {
                "properties": {
                    "permission": {
                        "$ref": "#/components/schemas/com.august.protos.permission.GroupPermission"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "permission",
                    "displayName",
                    "description"
                ]
            },
            "com.august.models.users.PermissionCategory": {
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.users.PermissionOption"
                        }
                    }
                },
                "required": [
                    "category",
                    "permissions"
                ]
            },
            "com.august.protos.api.person_tasks.PersonTasks": {
                "properties": {
                    "person": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.task.Task"
                        }
                    },
                    "profilePhotoUrl": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "tasks"
                ]
            },
            "com.august.protos.api.sharing.Sharing": {
                "properties": {
                    "taskIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "taskIds"
                ]
            },
            "com.august.protos.api.task_due_date.ChangeTaskDueDateRequest": {
                "properties": {
                    "dueDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                }
            },
            "com.august.controllers.ConfigureSigner": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignerRole"
                    },
                    "roleIndex": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "userAccountId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "skip": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "role",
                    "roleIndex",
                    "skip"
                ]
            },
            "com.august.protos.task.SignableTaskDetails": {
                "properties": {
                    "signaturePacketReady": {
                        "type": "boolean"
                    },
                    "signaturePacketCreationRetries": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "signaturePacketReady",
                    "signaturePacketCreationRetries"
                ]
            },
            "com.august.protos.task.Metadata.DataFormat": {
                "properties": {}
            },
            "com.august.protos.task.Metadata": {
                "properties": {
                    "dataFormat": {
                        "$ref": "#/components/schemas/com.august.protos.task.Metadata.DataFormat"
                    }
                },
                "required": [
                    "dataFormat"
                ]
            },
            "com.august.protos.task.SignatureStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SIGNATURE_STATUS_NOT_SIGNED",
                    "SIGNATURE_STATUS_PROCESSING",
                    "SIGNATURE_STATUS_SIGNED"
                ]
            },
            "com.august.protos.task.SignatureInfo": {
                "properties": {
                    "signer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Signer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.task.SignatureStatus"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "status"
                ]
            },
            "com.august.protos.task.TaskStatusHistory": {
                "properties": {
                    "startingStatus": {
                        "$ref": "#/components/schemas/com.august.protos.task.TaskStatus"
                    },
                    "endingStatus": {
                        "$ref": "#/components/schemas/com.august.protos.task.TaskStatus"
                    },
                    "modifiedByUserId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedByUserName": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "modificationTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "startingStatus",
                    "endingStatus"
                ]
            },
            "com.august.protos.task.TaskStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TASK_STATUS_NOT_STARTED",
                    "TASK_STATUS_ASSIGNED_TO_ADMIN",
                    "TASK_STATUS_ASSIGNED_TO_RP",
                    "TASK_STATUS_AWAITING_REVIEW",
                    "TASK_STATUS_PENDING_ADMIN_SIG",
                    "TASK_STATUS_PENDING_RP_SIG",
                    "TASK_STATUS_COMPLETE",
                    "TASK_STATUS_COMPLETE_BUT_NEW",
                    "TASK_STATUS_ADMIN_SIGNATURE_PROCESSING",
                    "TASK_STATUS_RP_SIGNATURE_PROCESSING",
                    "TASK_STATUS_PENDING_SIGNATURES",
                    "TASK_STATUS_MANUALLY_CLOSED",
                    "TASK_STATUS_MANUALLY_COMPLETED"
                ]
            },
            "com.august.protos.task.Task": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "snapshotId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "taskTemplateInfo": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.task.TaskTemplateInfo"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.task.TaskStatus"
                    },
                    "shared": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "statusHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.task.TaskStatusHistory"
                        }
                    },
                    "lastModification": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "signatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.task.SignatureInfo"
                        }
                    },
                    "dueDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "metadata": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.task.Metadata"
                    },
                    "signableTaskDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.task.SignableTaskDetails"
                    }
                },
                "required": [
                    "status",
                    "statusHistory",
                    "signatures"
                ]
            },
            "com.august.api.esign.Esign.PossibleSigners": {
                "properties": {
                    "communitySigners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.Signer"
                        }
                    },
                    "externalSigners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.Signer"
                        }
                    }
                },
                "required": [
                    "communitySigners",
                    "externalSigners"
                ]
            },
            "com.august.protos.application_event.ApplicationEventCounts": {
                "properties": {
                    "eventCounts": {
                        "type": "object",
                        "example": {
                            "MAR_BULK_PDF": {
                                "periodStartTimes": [
                                    "2022-05-31T07:00:00Z"
                                ],
                                "counts": [
                                    10
                                ]
                            }
                        },
                        "additionalProperties": {
                            "$ref": "#/components/schemas/com.august.protos.application_event.ApplicationEventCounts"
                        }
                    }
                },
                "required": [
                    "eventCounts"
                ]
            },
            "com.august.protos.application_event.ApplicationEvent": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "APPLICATION_EVENT_HELLO_WORLD",
                    "FACESHEET_PDF",
                    "CARE_SUMMARY_PDF",
                    "MAR_INDIVIDUAL_PDF",
                    "MAR_BULK_PDF",
                    "SERVICE_APPRAISAL",
                    "SERVICE_PLAN",
                    "INCIDENT_CREATE",
                    "INCIDENT_CLOSED",
                    "INCIDENT_UPDATE",
                    "INCIDENT_DELETE",
                    "INCIDENT_ATTACHMENT_CREATE",
                    "INCIDENT_ATTACHMENT_DELETE",
                    "INCIDENT_COMMENT_CREATE",
                    "INCIDENT_COMMENT_DELETE",
                    "INCIDENT_NOTIFY_STATE_FORM_GENERATED",
                    "NOTE_CREATE",
                    "NOTE_UPDATE",
                    "NOTE_COMMENT_CREATE",
                    "NOTE_COMMENT_DELETE",
                    "TASK_COMPLETE",
                    "TASK_MANUALLY_COMPLETED",
                    "TASK_MANUALLY_CLOSED",
                    "TASK_DELETED",
                    "PROSPECT_CREATED",
                    "PROSPECT_CLOSED",
                    "PROSPECT_MOVED_IN",
                    "RESIDENT_MOVED_OUT",
                    "RESIDENT_CREATED",
                    "RESIDENT_AWAY",
                    "RESIDENT_RETURNED",
                    "ROOM_CHANGED",
                    "BILLING_CHANGED",
                    "ALERT_CREATED",
                    "ALERT_EXPIRES",
                    "LEVEL_OF_CARE_CHANGED",
                    "RP_UPLOADED_DOCUMENT",
                    "RP_CHANGED_CONTACTS",
                    "MEDICATION_CREATED",
                    "MEDICATION_UPDATED",
                    "MEDICATION_REACTIVATED",
                    "MEDICATION_LIST",
                    "MEDICATION_LOG",
                    "ROUTINE_APPROVED",
                    "ROUTINE_UPDATED",
                    "SNAPSHOT_SEND_BULK",
                    "SEND_BULK_FACE_SHEET",
                    "CARE_SUMMARY_BULK_ZIP",
                    "SEND_BULK_EMAR_REPORT",
                    "SEND_BULK_EMERGENCY_PACKET",
                    "SEND_BULK_MED_LIST",
                    "SEND_BULK_CARE_LOG",
                    "FINANCIAL_MOVE_IN_SET",
                    "FINANCIAL_MOVE_OUT_SET",
                    "FINANCIAL_MOVE_IN_OUT_CHANGED",
                    "YARDI_CENSUS_IMPORT",
                    "CUSTOM_ROUTINE_APPROVED",
                    "CUSTOM_ROUTINE_UPDATED",
                    "BILLING_ACH_RETURN",
                    "BILLING_DEPOSIT_RECEIVED",
                    "BILLING_REFUND_INITIATED",
                    "BILLING_MANUAL_PAYMENT_RECORDED",
                    "BILLING_DRAFT_BULK_STATEMENTS",
                    "BILLING_ISSUE_BULK_STATEMENTS",
                    "BILLING_DRAFT_SINGLE_STATEMENT",
                    "BILLING_ISSUE_SINGLE_STATEMENT"
                ]
            },
            "com.august.protos.api.facility_metrics.FacilityMetricDataHistory": {
                "properties": {
                    "metricDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.FacilityMetricDataDescriptor"
                    },
                    "dates": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "any"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "any"
                        }
                    }
                },
                "required": [
                    "dates",
                    "ids",
                    "values"
                ]
            },
            "com.august.protos.api.facility_metrics.FacilityMetricDataDescriptor": {
                "properties": {
                    "metric": {
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.Metric"
                    },
                    "dates": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    "clientId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "metric",
                    "dates"
                ]
            },
            "com.august.protos.api.facility_metrics.FacilityMetricAggregateHistory": {
                "properties": {
                    "metricDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.FacilityMetricAggregateDescriptor"
                    },
                    "periodStartTimes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                },
                "required": [
                    "periodStartTimes",
                    "values"
                ]
            },
            "com.august.protos.api.facility_metrics.AggregateInterval": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "AGGREGATE_INTERVAL_DAY",
                    "AGGREGATE_INTERVAL_WEEK",
                    "AGGREGATE_INTERVAL_MONTH",
                    "AGGREGATE_INTERVAL_QUARTER",
                    "AGGREGATE_INTERVAL_YEAR"
                ]
            },
            "com.august.protos.api.facility_metrics.AggregateFunction": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "AGGREGATE_FUNCTION_AVG",
                    "AGGREGATE_FUNCTION_COUNT",
                    "AGGREGATE_FUNCTION_MIN",
                    "AGGREGATE_FUNCTION_MAX",
                    "AGGREGATE_FUNCTION_SUM"
                ]
            },
            "com.august.protos.api.facility_metrics.Metric": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "METRIC_PROSPECTS",
                    "METRIC_CURRENT_RESIDENTS",
                    "METRIC_CLOSED_RESIDENTS",
                    "METRIC_DISCHARGED_RESIDENTS",
                    "METRIC_RESIDENT_TENURE_DAYS",
                    "METRIC_SALES_CYCLE_DAYS",
                    "METRIC_DAYS_SINCE_APPRAISAL",
                    "METRIC_RESIDENT_POINTS",
                    "METRIC_RESIDENT_CARE_LEVELS",
                    "METRIC_CURRENT_RESIDENT_AGE",
                    "METRIC_PROSPECT_AGE",
                    "METRIC_RESIDENT_MONTHLY_CARE_FEE",
                    "METRIC_RESIDENT_WEEKLY_CARE_FEE",
                    "METRIC_RESIDENT_DAILY_CARE_FEE",
                    "METRIC_BEDS"
                ]
            },
            "com.august.protos.api.facility_metrics.FacilityMetricAggregateDescriptor": {
                "properties": {
                    "metric": {
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.Metric"
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "dataAggregate": {
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.AggregateFunction"
                    },
                    "timeAggregate": {
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.AggregateFunction"
                    },
                    "timeInterval": {
                        "$ref": "#/components/schemas/com.august.protos.api.facility_metrics.AggregateInterval"
                    },
                    "clientId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "metric",
                    "dataAggregate",
                    "timeAggregate",
                    "timeInterval"
                ]
            },
            "com.august.protos.api.facility_stats.ResidentCompletionStats": {
                "properties": {
                    "person": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person"
                    },
                    "completionStatus": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                },
                "required": [
                    "completionStatus"
                ]
            },
            "com.august.protos.api.facility_stats.CompletionType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "COMPLETION_TYPE_HAS_602",
                    "COMPLETION_TYPE_HAS_PROFILE_PHOTO",
                    "COMPLETION_TYPE_HAS_POLST",
                    "COMPLETION_TYPE_HAS_PRIMARY_DR",
                    "COMPLETION_TYPE_HAS_RESPONSIBLE_PERSON",
                    "COMPLETION_TYPE_HAS_MEDICATIONS",
                    "COMPLETION_TYPE_HAS_DIET",
                    "COMPLETION_TYPE_HAS_AMBULATORY_STATUS",
                    "COMPLETION_TYPE_HAS_APPRAISAL",
                    "COMPLETION_TYPE_HAS_SERVICE_PLAN",
                    "COMPLETION_TYPE_HAS_ANNUAL_MEDICAL_EVALUATION",
                    "COMPLETION_TYPE_HAS_ASSESSMENT"
                ]
            },
            "com.august.models.ehr.FacilityComplianceStat": {
                "properties": {
                    "completionType": {
                        "$ref": "#/components/schemas/com.august.protos.api.facility_stats.CompletionType"
                    },
                    "label": {
                        "type": "string"
                    },
                    "subLabel": {
                        "type": "string",
                        "nullable": true
                    },
                    "compliantCount": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personCount": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "completionType",
                    "label",
                    "compliantCount",
                    "personCount"
                ]
            },
            "com.august.models.ehr.FacilityCompliance": {
                "properties": {
                    "stats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.ehr.FacilityComplianceStat"
                        }
                    }
                },
                "required": [
                    "stats"
                ]
            },
            "com.august.protos.api.facility_stats.FacilityCompletionStats": {
                "properties": {
                    "personCount": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "completionCount": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number"
                        }
                    }
                },
                "required": [
                    "completionCount"
                ]
            },
            "com.august.protos.snapshot.ImageSize": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "IMAGE_SIZE_32X32",
                    "IMAGE_SIZE_168X168",
                    "IMAGE_SIZE_184X184"
                ]
            },
            "com.august.api.ShiftCareGroups.ShiftCareGroupUpsert": {
                "properties": {
                    "shiftId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "careGroupId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "shiftId",
                    "careGroupId"
                ]
            },
            "com.august.protos.api.service_plan_objectives.ServicePlanObjectivesGetResponse.CustomObjective": {
                "properties": {
                    "customKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "objectivePlan": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.ObjectivePlan"
                    }
                }
            },
            "com.august.protos.api.service_plan_objectives.ServicePlanObjectivesGetResponse.Objective": {
                "properties": {
                    "categoryKey": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.PlanCategoryKey"
                    },
                    "value": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.ObjectiveOption"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "required": [
                    "categoryKey",
                    "value",
                    "label"
                ]
            },
            "com.august.protos.api.service_plan_objectives.ServicePlanObjectivesGetResponse": {
                "properties": {
                    "objectiveOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.service_plan_objectives.ServicePlanObjectivesGetResponse.Objective"
                        }
                    },
                    "customObjectives": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.service_plan_objectives.ServicePlanObjectivesGetResponse.CustomObjective"
                        }
                    }
                },
                "required": [
                    "objectiveOptions",
                    "customObjectives"
                ]
            },
            "com.august.protos.jobs.Job.Payload": {
                "properties": {}
            },
            "com.august.protos.jobs.Job": {
                "properties": {
                    "requestId": {
                        "type": "string",
                        "nullable": true
                    },
                    "user": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                    },
                    "payload": {
                        "$ref": "#/components/schemas/com.august.protos.jobs.Job.Payload"
                    }
                },
                "required": [
                    "payload"
                ]
            },
            "com.august.protos.scheduled_job.ScheduledJob": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "cronString": {
                        "type": "string",
                        "nullable": true
                    },
                    "job": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.jobs.Job"
                    },
                    "nextRunTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastRequestId": {
                        "type": "string",
                        "nullable": true
                    },
                    "lastRunTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "expired": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "source": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.api.routine_administrations.BulkUpdateResponse": {
                "properties": {
                    "routineAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministration"
                        }
                    }
                },
                "required": [
                    "routineAdministrations"
                ]
            },
            "com.august.api.routine_administrations.BulkUpdatePayload": {
                "properties": {
                    "routineAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppRoutineAdministration"
                        }
                    }
                },
                "required": [
                    "routineAdministrations"
                ]
            },
            "com.august.protos.routine_administration.RoutineAdministrationConflict": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ROUTINE_ADMINISTRATION_CONFLICT_ADMINISTERED_DEACTIVATED",
                    "ROUTINE_ADMINISTRATION_CONFLICT_MULTIPLE_ADMINISTRATIONS",
                    "ROUTINE_ADMINISTRATION_CONFLICT_ADMINISTERED_OVERRIDDEN",
                    "ROUTINE_ADMINISTRATION_CONFLICT_UNEXPECTED_STATUS_TRANSITION",
                    "ROUTINE_ADMINISTRATION_CONFLICT_FORCE_ADMINISTERED_BY_EVENT_COUNT"
                ]
            },
            "com.august.protos.routine_administration.RoutineAdministration": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "routineOrderId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orderName": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationStatus"
                    },
                    "occurredAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "recordedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "source": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEventSource"
                    },
                    "allSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEventSource"
                        }
                    },
                    "beginScheduledTime": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "endScheduledTime": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "reasonForException": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationExceptionReason"
                    },
                    "effortLevel": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "shiftId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "shiftOccurrenceDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "beginAdministrationWindow": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "endAdministrationWindow": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "scheduleId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "routineOrderGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isPrn": {
                        "type": "boolean"
                    },
                    "prnCategory": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.PrnCategory"
                    },
                    "isTwoPerson": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEvent"
                        }
                    },
                    "conflicts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationConflict"
                        }
                    }
                },
                "required": [
                    "status",
                    "source",
                    "allSources",
                    "reasonForException",
                    "isActive",
                    "isPrn",
                    "events",
                    "conflicts"
                ]
            },
            "com.august.protos.api.routine_settings.RoutineOptions": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "categoryOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategory"
                        }
                    }
                },
                "required": [
                    "categoryOptions"
                ]
            },
            "com.august.protos.service_plan.ServicePlan.ObjectiveOption": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "OBJECTIVE_OPTION_REDUCE_BATHING_RESISTANCE",
                    "OBJECTIVE_OPTION_PROVIDE_SPONGE_BATHING",
                    "OBJECTIVE_OPTION_PROVIDE_HANDHELD_SHOWER",
                    "OBJECTIVE_OPTION_PROVIDE_WHIRLPOOL_BATHS",
                    "OBJECTIVE_OPTION_PROVIDE_DRY_SHAMPOO",
                    "OBJECTIVE_OPTION_PROVIDE_ADDITIONAL_STAFF",
                    "OBJECTIVE_OPTION_PROVIDE_SHOWER_EQUIPMENT",
                    "OBJECTIVE_OPTION_HELP_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_GROOMING_RESISTANCE",
                    "OBJECTIVE_OPTION_GROOMING_SUPPLIES",
                    "OBJECTIVE_OPTION_CLEAN_HAIR",
                    "OBJECTIVE_OPTION_SHAVING",
                    "OBJECTIVE_OPTION_CREAM_LOTION",
                    "OBJECTIVE_OPTION_MANICURE",
                    "OBJECTIVE_OPTION_GROOMING_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_DRESSING_RESISTANCE",
                    "OBJECTIVE_OPTION_CLEAN_CLOTHES",
                    "OBJECTIVE_OPTION_DRESSING_SAFETY",
                    "OBJECTIVE_OPTION_DRESSING_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_DENTAL_RESISTANCE",
                    "OBJECTIVE_OPTION_DENTURE_CARE",
                    "OBJECTIVE_OPTION_TOOTH_BRUSHING",
                    "OBJECTIVE_OPTION_DENTAL_INDEPENDENCE",
                    "OBJECTIVE_OPTION_TOILETING_ROUTINES",
                    "OBJECTIVE_OPTION_REDUCE_TOILET_RESISTANCE",
                    "OBJECTIVE_OPTION_ALT_TOILETING",
                    "OBJECTIVE_OPTION_MONITOR_TOILET_OUTPUT",
                    "OBJECTIVE_OPTION_TOILETING_COMPLIANCE",
                    "OBJECTIVE_OPTION_REGULAR_BMS",
                    "OBJECTIVE_OPTION_REDUCE_UTIS",
                    "OBJECTIVE_OPTION_STAFF_SAFE_TOILET",
                    "OBJECTIVE_OPTION_SETUP_ASSISTIVE_TOILET",
                    "OBJECTIVE_OPTION_INCONTINENCE_PLAN",
                    "OBJECTIVE_OPTION_REDUCE_INCONT_RESISTANCE",
                    "OBJECTIVE_OPTION_CLEAN_DRY",
                    "OBJECTIVE_OPTION_REGULAR_BM_OUTPUT",
                    "OBJECTIVE_OPTION_HEALTHY_SKIN",
                    "OBJECTIVE_OPTION_RESOLVE_INCONTINENCE",
                    "OBJECTIVE_OPTION_ADDL_STAFF_INCONTINENCE",
                    "OBJECTIVE_OPTION_RELY_LESS_PADS",
                    "OBJECTIVE_OPTION_ORDER_TOILETING_SUPPLIES",
                    "OBJECTIVE_OPTION_EMPTY_CATHETER",
                    "OBJECTIVE_OPTION_SELF_CATHETER",
                    "OBJECTIVE_OPTION_SELF_COLOSTOMY",
                    "OBJECTIVE_OPTION_CLEAN_COMMODE",
                    "OBJECTIVE_OPTION_CLEAN_URINAL",
                    "OBJECTIVE_OPTION_CLEAN_RISER",
                    "OBJECTIVE_OPTION_ORDER_INCONTINENCE_SUPPLIES",
                    "OBJECTIVE_OPTION_REDUCE_TRANSFER_DEVICE_RESISTANCE",
                    "OBJECTIVE_OPTION_REMIND_TRANSFER_DEVICES",
                    "OBJECTIVE_OPTION_SAFE_TRANSFERS_TO_WHEELCHAIR",
                    "OBJECTIVE_OPTION_SAFE_TRANSFERS_TO_WALKER",
                    "OBJECTIVE_OPTION_REPOSITION_IN_BED",
                    "OBJECTIVE_OPTION_REMOVE_TRIP_HAZARDS",
                    "OBJECTIVE_OPTION_SAFELY_AMBULATE_WITH_DEVICES",
                    "OBJECTIVE_OPTION_OBSERVE_TO_REDUCE_FALL_RISK",
                    "OBJECTIVE_OPTION_COORDINATE_WITH_PHYSICAL_REHAB",
                    "OBJECTIVE_OPTION_FALL_PRECAUTION",
                    "OBJECTIVE_OPTION_ESCORT_TO_MEALS",
                    "OBJECTIVE_OPTION_ESCORT_TO_ACTIVITIES",
                    "OBJECTIVE_OPTION_SAFETY_DURING_TRANSFERS",
                    "OBJECTIVE_OPTION_TRANSFER_INDEPENDENCE",
                    "OBJECTIVE_OPTION_MECHANICAL_DEVICE_SUPPORT",
                    "OBJECTIVE_OPTION_SAFE_STORAGE_OF_DEVICES",
                    "OBJECTIVE_OPTION_CLINICAL_REVIEW_OF_TRANSFER_DEVICES",
                    "OBJECTIVE_OPTION_CLINICAL_REVIEW_OF_MOBILITY_DEVICES",
                    "OBJECTIVE_OPTION_CLEAN_ASSISTIVE_DEVICES",
                    "OBJECTIVE_OPTION_REDUCE_HEARING_RESISTANCE",
                    "OBJECTIVE_OPTION_MAINTAIN_HEALTHY_HEARING",
                    "OBJECTIVE_OPTION_SET_UP_HEADPHONES",
                    "OBJECTIVE_OPTION_CHANGE_AID_BATTERIES",
                    "OBJECTIVE_OPTION_CLEAN_AIDS",
                    "OBJECTIVE_OPTION_SUPPORT_USING_AIDS",
                    "OBJECTIVE_OPTION_HEARING_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_VISION_RESISTANCE",
                    "OBJECTIVE_OPTION_MAINTAIN_HEALTHY_VISION",
                    "OBJECTIVE_OPTION_FIND_GLASSES",
                    "OBJECTIVE_OPTION_CLEAN_GLASSES",
                    "OBJECTIVE_OPTION_CONTACT_LENSES",
                    "OBJECTIVE_OPTION_SUNGLASSES",
                    "OBJECTIVE_OPTION_VISION_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_COMM_RESISTANCE",
                    "OBJECTIVE_OPTION_SHARE_COMM_CUES",
                    "OBJECTIVE_OPTION_UNDERSTAND_APHASIA",
                    "OBJECTIVE_OPTION_ENGLISH_NOT_PRIMARY",
                    "OBJECTIVE_OPTION_COMM_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_MED_RESISTANCE",
                    "OBJECTIVE_OPTION_ADHERE_TO_MEDS",
                    "OBJECTIVE_OPTION_SELF_MEDS",
                    "OBJECTIVE_OPTION_SELF_INHALERS",
                    "OBJECTIVE_OPTION_SELF_PATCHES",
                    "OBJECTIVE_OPTION_SELF_OINTMENTS",
                    "OBJECTIVE_OPTION_SELF_EYES",
                    "OBJECTIVE_OPTION_MONITOR_GLUCOSE",
                    "OBJECTIVE_OPTION_MONITOR_VITALS",
                    "OBJECTIVE_OPTION_MONITOR_TEMPS",
                    "OBJECTIVE_OPTION_MONITOR_OXYGEN",
                    "OBJECTIVE_OPTION_REDUCE_PSYCHOTROPICS",
                    "OBJECTIVE_OPTION_OBSERVE_SIDE_EFFECTS",
                    "OBJECTIVE_OPTION_REPORT_WEIGHT_GAIN",
                    "OBJECTIVE_OPTION_REPORT_WEIGHT_LOSS",
                    "OBJECTIVE_OPTION_MEDS_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_ADDL_CARE_RESISTANCE",
                    "OBJECTIVE_OPTION_PROVIDE_CARE_INFO",
                    "OBJECTIVE_OPTION_COORD_HOSPICE",
                    "OBJECTIVE_OPTION_COORD_REHAB",
                    "OBJECTIVE_OPTION_COORD_NURSING",
                    "OBJECTIVE_OPTION_COORD_TELEMEDICINE",
                    "OBJECTIVE_OPTION_COORD_CARE_PLANS",
                    "OBJECTIVE_OPTION_COORD_HOME_CARE",
                    "OBJECTIVE_OPTION_COORD_LAB_WORK",
                    "OBJECTIVE_OPTION_COORD_XRAYS",
                    "OBJECTIVE_OPTION_COORD_DENTAL",
                    "OBJECTIVE_OPTION_COORD_HOUSE_VISITS",
                    "OBJECTIVE_OPTION_COORD_PALLIATIVE",
                    "OBJECTIVE_OPTION_IMMEDIATE_CRISIS",
                    "OBJECTIVE_OPTION_ADVOCATE_CARE",
                    "OBJECTIVE_OPTION_TED_HOUSE",
                    "OBJECTIVE_OPTION_SKIN_BREAKDOWN",
                    "OBJECTIVE_OPTION_DIABETES_CARE",
                    "OBJECTIVE_OPTION_STABILIZE_CHRONIC",
                    "OBJECTIVE_OPTION_COORD_PAIN_MANAGEMENT",
                    "OBJECTIVE_OPTION_REDUCE_ALCOHOL",
                    "OBJECTIVE_OPTION_ABSTAIN_ALCOHOL",
                    "OBJECTIVE_OPTION_SAFE_TOBACCO",
                    "OBJECTIVE_OPTION_ABSTAIN_TOBACCO",
                    "OBJECTIVE_OPTION_REDUCE_COGNITIVE_RESISTANCE",
                    "OBJECTIVE_OPTION_CUE_DAILY",
                    "OBJECTIVE_OPTION_MAKE_LISTS",
                    "OBJECTIVE_OPTION_SHARE_NEEDS",
                    "OBJECTIVE_OPTION_BRAIN_ACTIVITIES",
                    "OBJECTIVE_OPTION_COGNITIVE_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_EXITS",
                    "OBJECTIVE_OPTION_MOVE_SAFELY_INSIDE",
                    "OBJECTIVE_OPTION_WANDERGUARD",
                    "OBJECTIVE_OPTION_REDIRECT_ROOMS",
                    "OBJECTIVE_OPTION_REDUCE_NIGHT_EXIT",
                    "OBJECTIVE_OPTION_REDUCE_DAY_EXIT",
                    "OBJECTIVE_OPTION_MOVE_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_BEHAVIORAL_RESISTANCE",
                    "OBJECTIVE_OPTION_REDUCE_CARE_RESISTANCE",
                    "OBJECTIVE_OPTION_CONFLICT_RESOLUTION",
                    "OBJECTIVE_OPTION_DEESCALATE",
                    "OBJECTIVE_OPTION_ENCOURAGE_POSITIVES",
                    "OBJECTIVE_OPTION_INVOLVE_IN_PLANNING",
                    "OBJECTIVE_OPTION_ACTIVITIES_REDUCE_SAD",
                    "OBJECTIVE_OPTION_ACTIVITIES_REDUCE_GRIEF",
                    "OBJECTIVE_OPTION_REDUCE_PARANOIA",
                    "OBJECTIVE_OPTION_REDUCE_LONELINESS",
                    "OBJECTIVE_OPTION_REDUCE_VERBAL",
                    "OBJECTIVE_OPTION_REDUCE_PHYSICAL",
                    "OBJECTIVE_OPTION_REDUCE_SEXUAL",
                    "OBJECTIVE_OPTION_IDENTIFY_TRIGGERS",
                    "OBJECTIVE_OPTION_ACCESS_TREATMENT",
                    "OBJECTIVE_OPTION_STABILIZE_NEGATIVE_MENTAL",
                    "OBJECTIVE_OPTION_IDENTIFY_REDUCE_SUICIDE",
                    "OBJECTIVE_OPTION_REDUCE_ADDICTIVE",
                    "OBJECTIVE_OPTION_ENCOURAGE_FAMILY_SUPPORT",
                    "OBJECTIVE_OPTION_BEHAVIOR_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_SLEEP_RESISTANCE",
                    "OBJECTIVE_OPTION_REDUCE_SUNDOWNING",
                    "OBJECTIVE_OPTION_RISE_EARLY",
                    "OBJECTIVE_OPTION_RISE_LATE",
                    "OBJECTIVE_OPTION_PROMOTE_SLEEP_EVENING",
                    "OBJECTIVE_OPTION_REDUCE_NIGHT_WAKING",
                    "OBJECTIVE_OPTION_SLEEP_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_PSE_RESISTANCE",
                    "OBJECTIVE_OPTION_ENCOURAGE_PSE",
                    "OBJECTIVE_OPTION_ENCOURAGE_PSE_CALENDAR",
                    "OBJECTIVE_OPTION_REMIND_ACTIVITIES",
                    "OBJECTIVE_OPTION_SETUP_EXERCISE",
                    "OBJECTIVE_OPTION_ENCOURAGE_VOLUNTEER",
                    "OBJECTIVE_OPTION_KNOW_PREFS_PARTICIPATE",
                    "OBJECTIVE_OPTION_HELP_PHONE",
                    "OBJECTIVE_OPTION_SUPPORT_CULTURE",
                    "OBJECTIVE_OPTION_SUPPORT_GENDER",
                    "OBJECTIVE_OPTION_COORD_TRANSPORT",
                    "OBJECTIVE_OPTION_COORD_NON_EMERGENCY_TRANSPORT",
                    "OBJECTIVE_OPTION_PET_CARE",
                    "OBJECTIVE_OPTION_SUPPORT_LAUNDRY",
                    "OBJECTIVE_OPTION_REDUCE_HOARDING",
                    "OBJECTIVE_OPTION_HANDLE_CASH",
                    "OBJECTIVE_OPTION_PSE_INDEPENDENCE",
                    "OBJECTIVE_OPTION_REDUCE_MEAL_RESISTANCE",
                    "OBJECTIVE_OPTION_MONITOR_DIET",
                    "OBJECTIVE_OPTION_COORD_MEAL_DEVICES",
                    "OBJECTIVE_OPTION_FEEDING_SUPPORT",
                    "OBJECTIVE_OPTION_MONITOR_MEAL_CONSUMPTION",
                    "OBJECTIVE_OPTION_MONITOR_LIQUIDS",
                    "OBJECTIVE_OPTION_ENCOURAGE_HYDRATION",
                    "OBJECTIVE_OPTION_FOOD_ALLERGIES",
                    "OBJECTIVE_OPTION_TRAY_SERVICE",
                    "OBJECTIVE_OPTION_MEAL_INDEPENDENCE"
                ]
            },
            "com.august.protos.routine.ServicePlanOption": {
                "properties": {
                    "presetPlan": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.ObjectiveOption"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "presetPlan"
                ]
            },
            "com.august.protos.routine.ServicePlanTasks": {
                "properties": {
                    "servicePlanOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine.ServicePlanOption"
                        }
                    },
                    "objectiveText": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "servicePlanOptions"
                ]
            },
            "com.august.protos.routine.AppraisalDetail": {
                "properties": {
                    "detail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryDetail"
                    },
                    "group": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AnswerGroup"
                    }
                }
            },
            "com.august.protos.routine.AppraisalTasks": {
                "properties": {
                    "level": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryLevel"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine.AppraisalDetail"
                        }
                    },
                    "appraisalNotes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "details"
                ]
            },
            "com.august.protos.routine.CategoryTasks": {
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.PlanCategoryKey"
                    },
                    "appraisalTasks": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.routine.AppraisalTasks"
                    },
                    "servicePlanTasks": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.routine.ServicePlanTasks"
                    }
                },
                "required": [
                    "category"
                ]
            },
            "com.august.protos.routine.Routine": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "timing": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.timing.Timing"
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine.CategoryTasks"
                        }
                    },
                    "createdAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "start": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "end": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.routine.RoutineStatus"
                    },
                    "approvedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "lastUpdated": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "userClosed": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "tasks",
                    "status"
                ]
            },
            "com.august.protos.api.occupancy.UpdateCapacityRequest": {
                "properties": {
                    "capacity": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                }
            },
            "com.august.protos.date.ValidDatePeriod": {
                "properties": {
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                }
            },
            "com.august.protos.api.occupancy.MonthlyOccupancyStats": {
                "properties": {
                    "period": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.ValidDatePeriod"
                    },
                    "residentDays": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "bedDays": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.api.occupancy.OccupancyStats": {
                "properties": {
                    "monthlyStats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.occupancy.MonthlyOccupancyStats"
                        }
                    }
                },
                "required": [
                    "monthlyStats"
                ]
            },
            "com.august.protos.api.occupancy.BulkCreateRoomRequest": {
                "properties": {
                    "rooms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.occupancy.CreateRoomRequest"
                        }
                    }
                },
                "required": [
                    "rooms"
                ]
            },
            "com.august.protos.api.occupancy.RoomPropertiesData": {
                "properties": {
                    "roomId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "marketingDescription": {
                        "type": "string",
                        "nullable": true
                    },
                    "squareFeet": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "required": [
                    "roomId",
                    "admissionType"
                ]
            },
            "com.august.protos.api.occupancy.Occupancy.Occupant": {
                "properties": {
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "residentStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus"
                    },
                    "profilePhotoUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "gender",
                    "residentStatus"
                ]
            },
            "com.august.protos.api.occupancy.Occupancy.Bed": {
                "properties": {
                    "bed": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.bed.Bed"
                    },
                    "occupants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.occupancy.Occupancy.Occupant"
                        }
                    }
                },
                "required": [
                    "occupants"
                ]
            },
            "com.august.protos.api.occupancy.Occupancy.Room": {
                "properties": {
                    "room": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.room.Room"
                    },
                    "beds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.occupancy.Occupancy.Bed"
                        }
                    },
                    "properties": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.occupancy.RoomPropertiesData"
                    }
                },
                "required": [
                    "beds"
                ]
            },
            "com.august.protos.api.occupancy.Occupancy": {
                "properties": {
                    "rooms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.occupancy.Occupancy.Room"
                        }
                    }
                },
                "required": [
                    "rooms"
                ]
            },
            "com.august.protos.api.occupancy.CreateRoomRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "capacity": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                }
            },
            "com.august.protos.report.Report.FieldAccessor.Accessor.Field": {
                "properties": {}
            },
            "com.august.protos.report.Report.FieldAccessor.Accessor": {
                "properties": {
                    "field": {
                        "$ref": "#/components/schemas/com.august.protos.report.Report.FieldAccessor.Accessor.Field"
                    }
                },
                "required": [
                    "field"
                ]
            },
            "com.august.protos.api.json_report.FieldOption": {
                "properties": {
                    "accessor": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.report.Report.FieldAccessor.Accessor"
                    },
                    "displayInfo": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.enum_utils.AugustEnumDescriptor"
                    }
                }
            },
            "com.august.protos.enum_utils.AugustEnumDescriptor": {
                "properties": {
                    "displayName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    }
                },
                "required": [
                    "displayName",
                    "description",
                    "category"
                ]
            },
            "com.august.protos.api.json_report.AugustFieldOption": {
                "properties": {
                    "field": {
                        "$ref": "#/components/schemas/com.august.protos.custom_field.AugustFieldType"
                    },
                    "displayInfo": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.enum_utils.AugustEnumDescriptor"
                    }
                },
                "required": [
                    "field"
                ]
            },
            "com.august.protos.report.ReportContext": {
                "properties": {
                    "reportDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                }
            },
            "com.august.protos.report.ReportFilter.FilterType": {
                "properties": {}
            },
            "com.august.protos.report.ReportFilter": {
                "properties": {
                    "filterType": {
                        "$ref": "#/components/schemas/com.august.protos.report.ReportFilter.FilterType"
                    }
                },
                "required": [
                    "filterType"
                ]
            },
            "com.august.protos.report.Report.OrderBy": {
                "properties": {
                    "fieldAccessor": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.report.Report.FieldAccessor"
                    }
                }
            },
            "com.august.protos.report.Report.FieldAccessor.StringGetter": {
                "properties": {}
            },
            "com.august.protos.report.Report.FieldAccessor": {
                "properties": {
                    "stringGetter": {
                        "$ref": "#/components/schemas/com.august.protos.report.Report.FieldAccessor.StringGetter"
                    },
                    "conversions": {
                        "type": "object",
                        "example": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "stringGetter",
                    "conversions"
                ]
            },
            "com.august.protos.report.Report.FieldDescriptor": {
                "properties": {
                    "displayName": {
                        "type": "string",
                        "nullable": true
                    },
                    "aggregate": {
                        "$ref": "#/components/schemas/com.august.protos.report.Report.Aggregate"
                    },
                    "fieldAccessor": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.report.Report.FieldAccessor"
                    }
                },
                "required": [
                    "aggregate"
                ]
            },
            "com.august.protos.report.Report": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.report.Report.FieldDescriptor"
                        }
                    },
                    "orderBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.report.Report.OrderBy"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.report.ReportFilter"
                        }
                    },
                    "includeNonResidents": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "context": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.report.ReportContext"
                    }
                },
                "required": [
                    "fields",
                    "filters"
                ]
            },
            "com.august.protos.api.report_assignments.ReportAndAssignments": {
                "properties": {
                    "report": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.report.Report"
                    },
                    "assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.report.ReportAssignment"
                        }
                    }
                },
                "required": [
                    "assignments"
                ]
            },
            "com.august.protos.report.ReportAssignment": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "reportId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "allowLimitedRead": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.api.json_report.MetaData": {
                "properties": {
                    "profilePhotoUrl": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.report.Report.Aggregate": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "AGGREGATE_SUM",
                    "AGGREGATE_COUNT"
                ]
            },
            "com.august.protos.api.json_report.AggregateResults": {
                "properties": {
                    "header": {
                        "type": "string",
                        "nullable": true
                    },
                    "aggregate": {
                        "$ref": "#/components/schemas/com.august.protos.report.Report.Aggregate"
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "aggregate"
                ]
            },
            "com.august.protos.api.json_report.JsonReport": {
                "properties": {
                    "headers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "aggregates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.json_report.AggregateResults"
                        }
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.json_report.MetaData"
                        }
                    }
                },
                "required": [
                    "headers",
                    "rows",
                    "aggregates",
                    "metadata"
                ]
            },
            "com.august.models.refills.PopulatedRefillEvent": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "SENT",
                            "RECEIVED",
                            "ERROR",
                            "DISPENSED"
                        ]
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "actingPharmacy": {
                        "type": "string",
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "status",
                    "createdBy"
                ]
            },
            "com.august.models.refills.EligibilityRefillData": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "SENT",
                            "RECEIVED",
                            "ERROR",
                            "DISPENSED"
                        ]
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.refills.PopulatedRefillEvent"
                        }
                    }
                },
                "required": [
                    "status",
                    "events"
                ]
            },
            "com.august.models.PopulatedMetaData[Long]": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "modifiedBy": {
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdBy",
                    "modifiedBy"
                ]
            },
            "com.august.models.refills.EligibilityRefill": {
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.PopulatedMetaData[Long]"
                    },
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.refills.EligibilityRefillData"
                    }
                },
                "required": [
                    "meta",
                    "data"
                ]
            },
            "com.august.models.refills.PharmacyRefillEligibility": {
                "properties": {
                    "medOrderGroupId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "refillAllowed": {
                        "type": "boolean"
                    },
                    "refills": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.refills.EligibilityRefill"
                        }
                    }
                },
                "required": [
                    "medOrderGroupId",
                    "refillAllowed",
                    "refills"
                ]
            },
            "com.august.models.refills.RefillEvent[Any]": {
                "properties": {}
            },
            "com.august.models.refills.PharmacyRefillData": {
                "properties": {
                    "medOrderGroupId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "SENT",
                            "RECEIVED",
                            "ERROR",
                            "DISPENSED"
                        ]
                    },
                    "hl7MessageId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.refills.RefillEvent[Any]"
                        }
                    }
                },
                "required": [
                    "medOrderGroupId",
                    "status",
                    "hl7MessageId",
                    "events"
                ]
            },
            "com.august.models.refills.PharmacyRefill": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.refills.PharmacyRefillData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.services.pharmacies.MedicationOrderDiffs.MedicationOrderDiff": {
                "properties": {
                    "mergedOrder": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                    },
                    "diffs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.services.pharmacies.MedicationOrderDiffs.Diff"
                        }
                    },
                    "dosageDiffs": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/com.august.services.pharmacies.MedicationOrderDiffs.Diff"
                            }
                        }
                    },
                    "warnings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "mergedOrder",
                    "diffs",
                    "dosageDiffs",
                    "warnings"
                ]
            },
            "com.august.services.pharmacies.MedicationOrderDiffs.OrderAndDiff": {
                "properties": {
                    "existingOrder": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                    },
                    "withDiffs": {
                        "$ref": "#/components/schemas/com.august.services.pharmacies.MedicationOrderDiffs.MedicationOrderDiff"
                    }
                },
                "required": [
                    "existingOrder",
                    "withDiffs"
                ]
            },
            "com.august.protos.api.pharmacy_integration.ResidentMatchDetails.Id": {
                "properties": {}
            },
            "com.august.protos.api.pharmacy_integration.ResidentMatchDetails": {
                "properties": {
                    "id": {
                        "$ref": "#/components/schemas/com.august.protos.api.pharmacy_integration.ResidentMatchDetails.Id"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "com.august.protos.api.pharmacy_integration.ResidentOrders": {
                "properties": {
                    "matchDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.pharmacy_integration.ResidentMatchDetails"
                    },
                    "medicationOrders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                        }
                    },
                    "latestReceived": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "medicationOrders"
                ]
            },
            "com.august.protos.pharmacy_message.PharmacyResident": {
                "properties": {
                    "identifier": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyResidentIdentifier"
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "birthDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    }
                },
                "required": [
                    "gender"
                ]
            },
            "com.august.protos.pharmacy_message.PharmacyMessage": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "resident": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyResident"
                    },
                    "medicationOrder": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                    }
                }
            },
            "com.august.services.pharmacies.PharmacyMessageId": {
                "properties": {
                    "personId": {
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyResidentIdentifier"
                    },
                    "messageId": {
                        "type": "string"
                    }
                },
                "required": [
                    "personId",
                    "messageId"
                ]
            },
            "com.august.api.medication.PharmacyMessage.PharmacyMessagePayload": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "receivedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "messageId": {
                        "$ref": "#/components/schemas/com.august.services.pharmacies.PharmacyMessageId"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "messageStatus": {
                        "type": "string",
                        "enum": [
                            "NoOp",
                            "Accepted",
                            "Processed",
                            "NotSupported",
                            "Received",
                            "Rejected",
                            "Matched",
                            "NegativeAckRejected",
                            "Replaced"
                        ]
                    },
                    "pharmacyMessage": {
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_message.PharmacyMessage"
                    },
                    "lastError": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "receivedAt",
                    "messageId",
                    "messageStatus",
                    "pharmacyMessage"
                ]
            },
            "com.august.repositories.pharmacy.MessageStatus": {
                "properties": {}
            },
            "com.august.protos.pharmacy_message.PharmacyResidentIdentifier": {
                "properties": {
                    "partner": {
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                    },
                    "externalFacilityIdentifier": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalResidentIdentifier": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "partner"
                ]
            },
            "com.august.protos.pharmacy_facility.ParsingConfiguration": {
                "properties": {
                    "hasExclusiveEndDate": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.pharmacy_facility.HL7MessageType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "HL7_MESSAGE_TYPE_OMP",
                    "HL7_MESSAGE_TYPE_RDE",
                    "HL7_MESSAGE_TYPE_ADT_A03"
                ]
            },
            "com.august.protos.pharmacy_facility.PartnerSpecificConfiguration.Config": {
                "properties": {}
            },
            "com.august.protos.pharmacy_facility.PartnerSpecificConfiguration": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.PartnerSpecificConfiguration.Config"
                    }
                },
                "required": [
                    "config"
                ]
            },
            "com.august.protos.pharmacy_facility.PharmacyFacility": {
                "properties": {
                    "partner": {
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                    },
                    "externalIdentifier": {
                        "type": "string"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityPassword": {
                        "nullable": true,
                        "type": "object",
                        "properties": {
                            "method": {
                                "$ref": "#/components/schemas/com.august.protos.encryption.EncryptionMethod"
                            },
                            "unencryptedPlainText": {
                                "type": "string"
                            },
                            "encryptedValue": {
                                "type": "string"
                            }
                        }
                    },
                    "isActive": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "partnerSpecificConfiguration": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.PartnerSpecificConfiguration"
                    },
                    "pharmacyId": {
                        "type": "string",
                        "nullable": true
                    },
                    "supportedOutboundMessageTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.HL7MessageType"
                        }
                    },
                    "augustApplicationId": {
                        "type": "string",
                        "nullable": true
                    },
                    "pharmacyApplicationId": {
                        "type": "string",
                        "nullable": true
                    },
                    "parsingConfig": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_facility.ParsingConfiguration"
                    }
                },
                "required": [
                    "partner",
                    "externalIdentifier",
                    "facilityId",
                    "supportedOutboundMessageTypes"
                ]
            },
            "com.august.controllers.ProspectBedAssignment": {
                "properties": {
                    "bedId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "occupancyType": {
                        "type": "string",
                        "enum": [
                            "PRIVATE",
                            "SHARED",
                            "SECOND_OCCUPANT"
                        ]
                    }
                },
                "required": [
                    "bedId",
                    "occupancyType"
                ]
            },
            "com.august.controllers.AdmitPerson": {
                "properties": {
                    "moveInDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "isRespite": {
                        "type": "boolean"
                    },
                    "isHospice": {
                        "type": "boolean"
                    },
                    "bedAssignment": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.controllers.ProspectBedAssignment"
                    }
                },
                "required": [
                    "moveInDate",
                    "admissionType",
                    "isRespite",
                    "isHospice"
                ]
            },
            "com.august.models.BedAssignment": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.BedAssignmentData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    },
                    "bed": {
                        "$ref": "#/components/schemas/com.august.protos.bed.Bed"
                    },
                    "room": {
                        "$ref": "#/components/schemas/com.august.protos.room.Room"
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "bed",
                    "room"
                ]
            },
            "com.august.models.BedAssignmentWithUpdate": {
                "properties": {
                    "currentAssignment": {
                        "$ref": "#/components/schemas/com.august.models.BedAssignment"
                    },
                    "scheduledUpdate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.BedAssignment"
                    }
                },
                "required": [
                    "currentAssignment"
                ]
            },
            "com.august.models.WriteableBedAssignment": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.BedAssignmentData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.BedAssignmentData": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "bedId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "occupancyType": {
                        "type": "string",
                        "enum": [
                            "PRIVATE",
                            "SHARED",
                            "SECOND_OCCUPANT"
                        ]
                    },
                    "isPrimaryBed": {
                        "type": "boolean"
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "replacesId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "personId",
                    "bedId",
                    "occupancyType",
                    "isPrimaryBed"
                ]
            },
            "com.august.protos.jobs.FacilityReference": {
                "properties": {
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.jobs.PersonReference": {
                "properties": {
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.jobs.PersonTransferRequest": {
                "properties": {
                    "person": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.jobs.PersonReference"
                    },
                    "newFacility": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.jobs.FacilityReference"
                    }
                }
            },
            "com.august.protos.api.medication_log.MedicationLogEntry": {
                "properties": {
                    "medication": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.api.medication_log.MedicationLog": {
                "properties": {
                    "storedMedications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.medication_log.MedicationLogEntry"
                        }
                    },
                    "destroyedMedications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.medication_log.MedicationLogEntry"
                        }
                    }
                },
                "required": [
                    "storedMedications",
                    "destroyedMedications"
                ]
            },
            "com.august.protos.api.last_update.LastUpdate": {
                "properties": {
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "userId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "userName": {
                        "type": "string",
                        "nullable": true
                    },
                    "updatedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.person_stats.TaskStats": {
                "properties": {
                    "total": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "complete": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "lastModification": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                }
            },
            "com.august.protos.api.person_stats.PersonStats": {
                "properties": {
                    "person": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person"
                    },
                    "taskStats": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.person_stats.TaskStats"
                    },
                    "lastUpdate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.last_update.LastUpdate"
                    },
                    "profilePhotoUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "incidents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.Incident"
                        }
                    },
                    "alerts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.Incident"
                        }
                    }
                },
                "required": [
                    "incidents",
                    "alerts"
                ]
            },
            "com.august.repositories.CustomUserGroup": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.protos.permission.GroupSettings"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    },
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "orgId"
                ]
            },
            "com.august.protos.permission.GroupSettings": {
                "properties": {
                    "displayName": {
                        "type": "string",
                        "nullable": true
                    },
                    "groupPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.permission.GroupPermission"
                        }
                    }
                },
                "required": [
                    "groupPermissions"
                ]
            },
            "com.august.protos.settings.yardi_discrepancy_settings.YardiDiscrepancySettings.ExpressionInput": {
                "properties": {
                    "augustCareLevel": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "augustAssessmentPoints": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "augustRoomNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "augustAdmissionType": {
                        "type": "string",
                        "nullable": true
                    },
                    "augustResidentStatus": {
                        "type": "string",
                        "nullable": true
                    },
                    "augustCareCostCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "augustCareLevelName": {
                        "type": "string",
                        "nullable": true
                    },
                    "augustLastAssessmentTimestamp": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "augustNextAssessmentDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "yardiCareLevel": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiAssessmentPoints": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "yardiRoomNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiAdmissionType": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiResidentStatus": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiCareCostCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "yardiMedicaid": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "yardiMedLevel": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiMedRate": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.api.OrgIntegration.ExpressionTestPayload": {
                "properties": {
                    "expression": {
                        "type": "string"
                    },
                    "expressionInput": {
                        "$ref": "#/components/schemas/com.august.protos.settings.yardi_discrepancy_settings.YardiDiscrepancySettings.ExpressionInput"
                    }
                },
                "required": [
                    "expression",
                    "expressionInput"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunContactDiffData": {
                "properties": {
                    "orgIntegrationRunEventId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "contactId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "before": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                    },
                    "after": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                    }
                },
                "required": [
                    "orgIntegrationRunEventId",
                    "after"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunContactDiff": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunContactDiffData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.protos.person.PersonBillingSettings": {
                "properties": {
                    "dueDateOverride": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.DueDateSettings"
                    }
                }
            },
            "com.august.protos.person.MedGroupDetails": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.person.Person.ExternalFields": {
                "properties": {
                    "yardiResidentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiRoomNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "eldermarkResidentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "welcomeHomeResidentId": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiExtRefId": {
                        "type": "string",
                        "nullable": true
                    },
                    "caregroveResidentId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.family_member_history.FamilyMemberHistory.FamilyMemberHistoryCondition": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.condition.ConditionCode"
                    }
                },
                "required": [
                    "code"
                ]
            },
            "com.august.protos.family_member_history.FamilyMemberHistory": {
                "properties": {
                    "condition": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.family_member_history.FamilyMemberHistory.FamilyMemberHistoryCondition"
                        }
                    }
                },
                "required": [
                    "condition"
                ]
            },
            "com.august.protos.functional_status.FunctionalStatus.Capability.Capability": {
                "properties": {}
            },
            "com.august.protos.functional_status.FunctionalStatus.Capability": {
                "properties": {
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "capability": {
                        "$ref": "#/components/schemas/com.august.protos.functional_status.FunctionalStatus.Capability.Capability"
                    }
                },
                "required": [
                    "capability"
                ]
            },
            "com.august.protos.functional_status.FunctionalStatus": {
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.functional_status.FunctionalStatus.Capability"
                        }
                    }
                },
                "required": [
                    "capabilities"
                ]
            },
            "com.august.protos.observation.Observation.Value": {
                "properties": {}
            },
            "com.august.protos.observation.Observation.Effective": {
                "properties": {}
            },
            "com.august.protos.observation.Observation": {
                "properties": {
                    "effective": {
                        "$ref": "#/components/schemas/com.august.protos.observation.Observation.Effective"
                    },
                    "value": {
                        "$ref": "#/components/schemas/com.august.protos.observation.Observation.Value"
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "effective",
                    "value"
                ]
            },
            "com.august.protos.social_history.SocialHistory": {
                "properties": {
                    "diet": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.social_history.SocialHistory.Diet"
                    },
                    "alcoholUse": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.observation.Observation"
                    },
                    "tobaccoUse": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.observation.Observation"
                    },
                    "recentTbExposure": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.observation.Observation"
                    },
                    "interestsAndActivitiesSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "dislikesAndHardshipsSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "educationSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "occupationSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "other": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.diagnostic_report.DiagnosticReport.ConclusionCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CONCLUSION_CODE_POSITIVE",
                    "CONCLUSION_CODE_NEGATIVE"
                ]
            },
            "com.august.protos.diagnostic_report.DiagnosticReport.Effective": {
                "properties": {}
            },
            "com.august.protos.diagnostic_report.DiagnosticReport.DiagnosticReportCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DIAGNOSTIC_REPORT_CODE_TB_SKIN_TEST",
                    "DIAGNOSTIC_REPORT_CODE_TB_BLOOD_TEST",
                    "DIAGNOSTIC_REPORT_CODE_TB_UNSPECIFIED_TEST"
                ]
            },
            "com.august.protos.diagnostic_report.DiagnosticReport": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.diagnostic_report.DiagnosticReport.DiagnosticReportCode"
                    },
                    "effective": {
                        "$ref": "#/components/schemas/com.august.protos.diagnostic_report.DiagnosticReport.Effective"
                    },
                    "conclusionCode": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.diagnostic_report.DiagnosticReport.ConclusionCode"
                        }
                    },
                    "additionalDetails": {
                        "type": "string",
                        "nullable": true
                    },
                    "actionTaken": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "effective",
                    "conclusionCode"
                ]
            },
            "com.august.protos.person.Person.DiagnosticResults": {
                "properties": {
                    "diagnosticReports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.diagnostic_report.DiagnosticReport"
                        }
                    }
                },
                "required": [
                    "diagnosticReports"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.UnstructuredMedication": {
                "properties": {
                    "summary": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionResponse.ResponseCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "RESPONSE_CODE_YES",
                    "RESPONSE_CODE_NO"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionResponse": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionResponse.ResponseCode"
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "code"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.ServiceNeeded.ServiceCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SERVICE_CODE_OBSERVATION_DUE_TO_CONFUSION",
                    "SERVICE_CODE_OBSERVATION_DUE_TO_HARM",
                    "SERVICE_CODE_SPECIAL_MEDICAL_ATTENTION",
                    "SERVICE_CODE_OTHER"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.ServiceNeeded": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.ServiceNeeded.ServiceCode"
                    },
                    "response": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionResponse"
                    }
                },
                "required": [
                    "code"
                ]
            },
            "com.august.protos.condition.ConditionCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CONDITION_CODE_TB",
                    "CONDITION_CODE_VISION_IMPAIRED",
                    "CONDITION_CODE_HEARING_IMPAIRED",
                    "CONDITION_CODE_SPEECH_IMPAIRED",
                    "CONDITION_CODE_MOBILITY_IMPAIRED",
                    "CONDITION_CODE_BOWEL_IMPAIRED",
                    "CONDITION_CODE_BLADDER_IMPAIRED",
                    "CONDITION_CODE_PROSTHESIS",
                    "CONDITION_CODE_OTHER_PHYSICAL",
                    "CONDITION_CODE_CONFUSED_OR_FORGETFUL",
                    "CONDITION_CODE_DEPRESSED_OR_HOPELESS",
                    "CONDITION_CODE_NERVOUS_OR_ANXIOUS",
                    "CONDITION_CODE_WITHDRAWN_FROM_ACTIVITIES",
                    "CONDITION_CODE_SOCIAL_ISOLATION",
                    "CONDITION_CODE_AGGRESSIVE_BEHAVIOR",
                    "CONDITION_CODE_ADDICTION",
                    "CONDITION_CODE_OTHER_MENTAL"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.Severity": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SEVERITY_MILD",
                    "SEVERITY_MODERATE",
                    "SEVERITY_SEVERE",
                    "SEVERITY_ABSENT",
                    "SEVERITY_PRESENT"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionnaireCondition": {
                "properties": {
                    "severity": {
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.Severity"
                    },
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.condition.ConditionCode"
                    }
                },
                "required": [
                    "severity",
                    "code"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.Hospitalizations": {
                "properties": {
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "inThePastFiveYears": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire.OverallCondition": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "OVERALL_CONDITION_POOR",
                    "OVERALL_CONDITION_FAIR",
                    "OVERALL_CONDITION_GOOD"
                ]
            },
            "com.august.protos.health_questionnaire.HealthQuestionnaire": {
                "properties": {
                    "overallConditionCode": {
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.OverallCondition"
                    },
                    "overallConditionSummary": {
                        "type": "string",
                        "nullable": true
                    },
                    "hospitalizations": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.Hospitalizations"
                    },
                    "physicalDisabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionnaireCondition"
                        }
                    },
                    "mentalHealth": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionnaireCondition"
                        }
                    },
                    "servicesNeeded": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.ServiceNeeded"
                        }
                    },
                    "admissionSuitabilitySummary": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.QuestionResponse"
                    },
                    "medications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire.UnstructuredMedication"
                        }
                    }
                },
                "required": [
                    "overallConditionCode",
                    "physicalDisabilities",
                    "mentalHealth",
                    "servicesNeeded",
                    "medications"
                ]
            },
            "com.august.protos.coverage.Coverage.CoverageClass": {
                "properties": {
                    "value": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.coverage.Coverage.CoverageType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "COVERAGE_TYPE_MEDICAL",
                    "COVERAGE_TYPE_DENTAL",
                    "COVERAGE_TYPE_PHARMACY",
                    "COVERAGE_TYPE_MEDICARE",
                    "COVERAGE_TYPE_PUBLIC_POLICY"
                ]
            },
            "com.august.protos.coverage.Coverage": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.coverage.Coverage.CoverageType"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "subscriberId": {
                        "type": "string",
                        "nullable": true
                    },
                    "plan": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.coverage.Coverage.CoverageClass"
                    },
                    "rxbin": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.coverage.Coverage.CoverageClass"
                    },
                    "rxpcn": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.coverage.Coverage.CoverageClass"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "period": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.InclusiveDatePeriod"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "com.august.protos.location.Location": {
                "properties": {
                    "address": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.address.Address"
                    }
                }
            },
            "com.august.protos.healthcare_service.HealthcareService.ServiceCategory": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SERVICE_CATEGORY_HOSPITAL",
                    "SERVICE_CATEGORY_DENTAL"
                ]
            },
            "com.august.protos.healthcare_service.HealthcareService": {
                "properties": {
                    "category": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.healthcare_service.HealthcareService.ServiceCategory"
                        }
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "location": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.location.Location"
                        }
                    }
                },
                "required": [
                    "category",
                    "telecom",
                    "location"
                ]
            },
            "com.august.protos.person.Person.MaritalStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MARITAL_STATUS_MARRIED",
                    "MARITAL_STATUS_DIVORCED",
                    "MARITAL_STATUS_WIDOWED",
                    "MARITAL_STATUS_SINGLE",
                    "MARITAL_STATUS_SEPARATED",
                    "MARITAL_STATUS_DOMESTIC_PARTNER"
                ]
            },
            "com.august.protos.person.ResidentHistory.ArchivedItem": {
                "properties": {}
            },
            "com.august.protos.person.ResidentHistory": {
                "properties": {
                    "archivedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "archivedItem": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentHistory.ArchivedItem"
                    }
                },
                "required": [
                    "archivedItem"
                ]
            },
            "com.august.protos.discharge_details.DischargeDetails.DischargeReason": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DISCHARGE_REASON_DECEASED",
                    "DISCHARGE_REASON_MOVE_TO_PRIVATE",
                    "DISCHARGE_REASON_MOVE_TO_INDEPENDENT_LIVING",
                    "DISCHARGE_REASON_MOVE_TO_OTHER_ASSISTED_LIVING",
                    "DISCHARGE_REASON_MOVE_TO_SKILLED_NURSING",
                    "DISCHARGE_REASON_OTHER"
                ]
            },
            "com.august.protos.discharge_details.DischargeDetails": {
                "properties": {
                    "reason": {
                        "$ref": "#/components/schemas/com.august.protos.discharge_details.DischargeDetails.DischargeReason"
                    },
                    "moveOutDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "financialMoveOutDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "reason"
                ]
            },
            "com.august.protos.communication.Communication": {
                "properties": {
                    "languageStr": {
                        "type": "string",
                        "nullable": true
                    },
                    "preferred": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.person.CareGroupDetails": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.person.ResidentInfo": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.person.ProspectInfo.TouredStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TOURED_STATUS_COMPLETED",
                    "TOURED_STATUS_NOT_COMPLETED"
                ]
            },
            "com.august.protos.person.ProspectInfo.DepositStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DEPOSIT_STATUS_PAID",
                    "DEPOSIT_STATUS_NOT_PAID"
                ]
            },
            "com.august.protos.person.ProspectInfo": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilitiesOfInterest": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    "depositStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ProspectInfo.DepositStatus"
                    },
                    "touredStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ProspectInfo.TouredStatus"
                    },
                    "starred": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "budget": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "details": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "facilitiesOfInterest",
                    "depositStatus",
                    "touredStatus"
                ]
            },
            "com.august.protos.person.Person": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                        }
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "birthDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "prospectInfo": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.ProspectInfo"
                    },
                    "residentInfo": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentInfo"
                    },
                    "careGroupDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.CareGroupDetails"
                    },
                    "residentStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus"
                    },
                    "ambulatoryStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus"
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "contact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                        }
                    },
                    "communication": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.communication.Communication"
                        }
                    },
                    "hospiceStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.hospice.HospiceStatus"
                    },
                    "respiteStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.respite.RespiteStatus"
                    },
                    "levelOfCare": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCare"
                    },
                    "assessmentFinalizedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "admissionsInformation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation"
                    },
                    "dischargeInformation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.discharge_details.DischargeDetails"
                    },
                    "residentHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.person.ResidentHistory"
                        }
                    },
                    "address": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.address.Address"
                        }
                    },
                    "maritalStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.Person.MaritalStatus"
                    },
                    "hospital": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.healthcare_service.HealthcareService"
                    },
                    "coverage": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.coverage.Coverage"
                        }
                    },
                    "religiousPreference": {
                        "type": "string",
                        "nullable": true
                    },
                    "healthQuestionnaire": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.health_questionnaire.HealthQuestionnaire"
                    },
                    "allergiesAndIntolerances": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person.AllergiesAndIntolerances"
                    },
                    "diagnosticResults": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person.DiagnosticResults"
                    },
                    "socialHistory": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.social_history.SocialHistory"
                    },
                    "functionalStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.functional_status.FunctionalStatus"
                    },
                    "familyMemberHistory": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.family_member_history.FamilyMemberHistory"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.condition.Condition"
                        }
                    },
                    "cprCode": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Polst.CPR"
                    },
                    "createdAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "isOnAlert": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "outOfFacilityDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.OutOfFacilityDetail"
                    },
                    "outOfFacilityHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.person.OutOfFacilityDetail"
                        }
                    },
                    "isOutOfFacility": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "assessment": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AppraisalStatus"
                    },
                    "externalFields": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person.ExternalFields"
                    },
                    "medGroupDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.MedGroupDetails"
                    },
                    "ssn": {
                        "nullable": true,
                        "type": "object",
                        "properties": {
                            "method": {
                                "$ref": "#/components/schemas/com.august.protos.encryption.EncryptionMethod"
                            },
                            "unencryptedPlainText": {
                                "type": "string"
                            },
                            "encryptedValue": {
                                "type": "string"
                            }
                        }
                    },
                    "billingSettings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.PersonBillingSettings"
                    },
                    "shiftCareGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.person.ShiftCareGroupDetails"
                        }
                    }
                },
                "required": [
                    "name",
                    "gender",
                    "residentStatus",
                    "telecom",
                    "contact",
                    "communication",
                    "residentHistory",
                    "address",
                    "maritalStatus",
                    "coverage",
                    "conditions",
                    "cprCode",
                    "outOfFacilityHistory",
                    "shiftCareGroups"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunPersonDiffData": {
                "properties": {
                    "orgIntegrationRunEventId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "before": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.Person"
                    },
                    "after": {
                        "$ref": "#/components/schemas/com.august.protos.person.Person"
                    }
                },
                "required": [
                    "orgIntegrationRunEventId",
                    "after"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunPersonDiff": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunPersonDiffData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunEventData": {
                "properties": {
                    "orgIntegrationRunId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "eventType": {
                        "type": "string",
                        "enum": [
                            "ERROR",
                            "CREATE_PERSON",
                            "CREATE_CONTACT",
                            "UPDATE_CONTACT",
                            "UPDATE_PERSON"
                        ]
                    },
                    "log": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "orgIntegrationRunId",
                    "eventType"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunEvent": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunEventData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunEventResponse": {
                "properties": {
                    "event": {
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunEvent"
                    },
                    "personDiff": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunPersonDiff"
                    },
                    "contactDiff": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunContactDiff"
                    }
                },
                "required": [
                    "event"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunData": {
                "properties": {
                    "orgIntegrationId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "integrationType": {
                        "$ref": "#/components/schemas/com.august.protos.org_integration.IntegrationType"
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "requestId": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgIntegrationId",
                    "orgId",
                    "integrationType",
                    "requestId"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRun": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.org_integration.OrgIntegrationRunResponse": {
                "properties": {
                    "run": {
                        "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRun"
                    },
                    "sourceLink": {
                        "type": "string",
                        "nullable": true
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.org_integration.OrgIntegrationRunEventResponse"
                        }
                    }
                },
                "required": [
                    "run",
                    "events"
                ]
            },
            "com.august.protos.org_integration.IntegrationConfig.Config": {
                "properties": {}
            },
            "com.august.protos.org_integration.IntegrationConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/com.august.protos.org_integration.IntegrationConfig.Config"
                    }
                },
                "required": [
                    "config"
                ]
            },
            "com.august.protos.org_integration.IntegrationTransport.Transport": {
                "properties": {}
            },
            "com.august.protos.org_integration.IntegrationTransport": {
                "properties": {
                    "transport": {
                        "$ref": "#/components/schemas/com.august.protos.org_integration.IntegrationTransport.Transport"
                    }
                },
                "required": [
                    "transport"
                ]
            },
            "com.august.protos.org_integration.IntegrationType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INTEGRATION_TYPE_YARDI_EXPORT_ASSESSMENT",
                    "INTEGRATION_TYPE_YARDI_IMPORT_CENSUS",
                    "INTEGRATION_TYPE_YARDI_IMPORT_CRM",
                    "INTEGRATION_TYPE_YARDI_EXPORT_CONTACT",
                    "INTEGRATION_TYPE_YARDI_EXPORT_ASSESSMENT_V2"
                ]
            },
            "com.august.protos.org_integration.OrgIntegration": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.org_integration.IntegrationType"
                    },
                    "isActive": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "lastRunAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "transport": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.org_integration.IntegrationTransport"
                    },
                    "config": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.org_integration.IntegrationConfig"
                    }
                },
                "required": [
                    "type"
                ]
            },
            "com.august.api.facility_settings.OrgTaskSettings.ScheduledTaskDefinitions": {
                "properties": {
                    "orgSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                        }
                    },
                    "orgStateSettings": {
                        "type": "collection.immutable.map[string,seq[com.august.protos.org_facility_settings.orgfacilitysettings]]"
                    },
                    "facilitySettings": {
                        "type": "collection.immutable.map[long,seq[com.august.protos.org_facility_settings.orgfacilitysettings]]"
                    }
                },
                "required": [
                    "orgSettings",
                    "orgStateSettings",
                    "facilitySettings"
                ]
            },
            "com.august.api.facility_settings.OrgTaskSettings.TaskDefinitions": {
                "properties": {
                    "orgSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.OrgFacilitySettings"
                        }
                    },
                    "orgStateSettings": {
                        "type": "collection.immutable.map[string,seq[com.august.protos.org_facility_settings.orgfacilitysettings]]"
                    },
                    "inheritedFacilitySettings": {
                        "type": "collection.immutable.map[long,seq[com.august.protos.org_facility_settings.orgfacilitysettings]]"
                    }
                },
                "required": [
                    "orgSettings",
                    "orgStateSettings",
                    "inheritedFacilitySettings"
                ]
            },
            "com.august.api.facility_settings.OrgTaskSettings.OrgTaskSettingsPayload": {
                "properties": {
                    "organizationId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "activeFacilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                        }
                    },
                    "taskDefinitions": {
                        "$ref": "#/components/schemas/com.august.api.facility_settings.OrgTaskSettings.TaskDefinitions"
                    },
                    "scheduledTaskDefinitions": {
                        "$ref": "#/components/schemas/com.august.api.facility_settings.OrgTaskSettings.ScheduledTaskDefinitions"
                    }
                },
                "required": [
                    "organizationId",
                    "activeFacilities",
                    "taskDefinitions",
                    "scheduledTaskDefinitions"
                ]
            },
            "com.august.protos.org_facility_settings.SettingsType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SETTINGS_TYPE_APPRAISAL_SETTINGS",
                    "SETTINGS_TYPE_MAR_SETTINGS",
                    "SETTINGS_TYPE_TASK_DEFINITION",
                    "SETTINGS_TYPE_LEVEL_OF_CARE_SETTINGS",
                    "SETTINGS_TYPE_SCHEDULED_TASK",
                    "SETTINGS_TYPE_DIET_SETTINGS",
                    "SETTINGS_TYPE_AMBULATORY_SETTINGS",
                    "SETTINGS_TYPE_SECURITY_POLICY",
                    "SETTINGS_TYPE_PDF_VIEW_SETTINGS",
                    "SETTINGS_TYPE_BILLING_SETTINGS",
                    "SETTINGS_TYPE_YARDI_DISCREPANCY_SETTINGS",
                    "SETTINGS_TYPE_TAX_RATE_SETTINGS"
                ]
            },
            "com.august.protos.org_facility_settings.Settings.SettingsOneof": {
                "properties": {}
            },
            "com.august.protos.org_facility_settings.Settings": {
                "properties": {
                    "settingsOneof": {
                        "$ref": "#/components/schemas/com.august.protos.org_facility_settings.Settings.SettingsOneof"
                    }
                },
                "required": [
                    "settingsOneof"
                ]
            },
            "com.august.protos.org_facility_settings.OrgFacilitySettings": {
                "properties": {
                    "state": {
                        "type": "string",
                        "nullable": true
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "settings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.org_facility_settings.Settings"
                    },
                    "settingsType": {
                        "$ref": "#/components/schemas/com.august.protos.org_facility_settings.SettingsType"
                    },
                    "key": {
                        "type": "string",
                        "nullable": true
                    },
                    "settingsHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.org_facility_settings.Settings"
                        }
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "admissionType",
                    "settingsType",
                    "settingsHistory"
                ]
            },
            "com.august.protos.notification_subscriptions.NotificationSubscriptions": {
                "properties": {
                    "userId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.EmailNotification"
                        }
                    }
                },
                "required": [
                    "notifications"
                ]
            },
            "com.august.protos.notification_subscriptions.EmailNotificationDescriptor": {
                "properties": {
                    "shortName": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "notificationGroup": {
                        "type": "string"
                    },
                    "emailSubject": {
                        "type": "string"
                    },
                    "emailBody": {
                        "type": "string"
                    },
                    "permission": {
                        "$ref": "#/components/schemas/com.august.protos.permission.GroupPermission"
                    },
                    "resourcePath": {
                        "type": "string"
                    }
                },
                "required": [
                    "shortName",
                    "displayName",
                    "notificationGroup",
                    "emailSubject",
                    "emailBody",
                    "permission",
                    "resourcePath"
                ]
            },
            "com.august.protos.notification_subscriptions.EmailNotification": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "EMAIL_NOTIFICATION_NEW_MOVE_IN",
                    "EMAIL_NOTIFICATION_NEW_MOVE_OUT",
                    "EMAIL_NOTIFICATION_ROOM_CHANGE",
                    "EMAIL_NOTIFICATION_BILLING_CHANGES",
                    "EMAIL_NOTIFICATION_NEW_ALERT",
                    "EMAIL_NOTIFICATION_ALERT_EXPIRES",
                    "EMAIL_NOTIFICATION_INCIDENT_CLOSE",
                    "EMAIL_NOTIFICATION_LEVEL_OF_CARE_CHANGE",
                    "EMAIL_NOTIFICATION_SERVICE_APPRAISAL_UPDATED",
                    "EMAIL_NOTIFICATION_RP_UPLOADS_NEW_DOCUMENT",
                    "EMAIL_NOTIFICATION_RP_CHANGES_CONTACTS",
                    "EMAIL_NOTIFICATION_INCIDENT_CREATED",
                    "EMAIL_NOTIFICATION_INCIDENT_UPDATED",
                    "EMAIL_NOTIFICATION_RESIDENT_AWAY",
                    "EMAIL_NOTIFICATION_RESIDENT_RETURNED",
                    "EMAIL_NOTIFICATION_SERVICE_PLAN_READY",
                    "EMAIL_NOTIFICATION_FINANCIAL_START_DATE_SET",
                    "EMAIL_NOTIFICATION_FINANCIAL_MOVE_OUT_DATE_SET",
                    "EMAIL_NOTIFICATION_FINANCIAL_MOVE_IN_OUT_CHANGED",
                    "EMAIL_NOTIFICATION_YARDI_CENSUS_IMPORT",
                    "EMAIL_NOTIFICATION_BILLING_ACH_RETURN",
                    "EMAIL_NOTIFICATION_BILLING_DEPOSIT_RECEIVED",
                    "EMAIL_NOTIFICATION_BILLING_REFUND_INITIATED",
                    "EMAIL_NOTIFICATION_BILLING_MANUAL_PAYMENT_RECORDED",
                    "EMAIL_NOTIFICATION_BILLING_DRAFT_BULK_STATEMENTS",
                    "EMAIL_NOTIFICATION_BILLING_ISSUE_BULK_STATEMENTS",
                    "EMAIL_NOTIFICATION_BILLING_DRAFT_SINGLE_STATEMENT",
                    "EMAIL_NOTIFICATION_BILLING_ISSUE_SINGLE_STATEMENT"
                ]
            },
            "com.august.protos.notification_subscriptions.EmailNotificationEnumOption": {
                "properties": {
                    "notification": {
                        "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.EmailNotification"
                    },
                    "description": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.notification_subscriptions.EmailNotificationDescriptor"
                    }
                },
                "required": [
                    "notification"
                ]
            },
            "com.august.services.pharmacies.ChangeTypes.ChangeType[Any]": {
                "properties": {}
            },
            "com.august.services.pharmacies.MedicationOrderDiffs.Diff": {
                "properties": {
                    "key": {
                        "$ref": "#/components/schemas/com.august.services.pharmacies.ChangeTypes.ChangeType[Any]"
                    },
                    "originalValue": {
                        "type": "string"
                    },
                    "updatedValue": {
                        "type": "string"
                    },
                    "userConflictingEdit": {
                        "type": "string",
                        "nullable": true
                    },
                    "requiresApproval": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "key",
                    "originalValue",
                    "updatedValue",
                    "requiresApproval"
                ]
            },
            "com.august.services.MedicationHistoryEntry": {
                "properties": {
                    "modification": {
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "diffs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.services.pharmacies.MedicationOrderDiffs.Diff"
                        }
                    },
                    "dosageDiffs": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/com.august.services.pharmacies.MedicationOrderDiffs.Diff"
                            }
                        }
                    }
                },
                "required": [
                    "modification",
                    "diffs",
                    "dosageDiffs"
                ]
            },
            "com.august.protos.incoming_file.FileSource": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "FILE_SOURCE_FAX",
                    "FILE_SOURCE_EMAIL"
                ]
            },
            "com.august.protos.incoming_file.ProcessingStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PROCESSING_STATUS_INBOX",
                    "PROCESSING_STATUS_FILED",
                    "PROCESSING_STATUS_IGNORED"
                ]
            },
            "com.august.protos.incoming_file.IncomingFile": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "from": {
                        "type": "string",
                        "nullable": true
                    },
                    "to": {
                        "type": "string",
                        "nullable": true
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "receivedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "snapshotId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "processingStatus": {
                        "$ref": "#/components/schemas/com.august.protos.incoming_file.ProcessingStatus"
                    },
                    "source": {
                        "$ref": "#/components/schemas/com.august.protos.incoming_file.FileSource"
                    }
                },
                "required": [
                    "processingStatus",
                    "source"
                ]
            },
            "com.august.protos.incidents.IncidentAction.IncidentActionSideEffect.SideEffectOneof": {
                "properties": {}
            },
            "com.august.protos.incidents.IncidentAction.IncidentActionSideEffect": {
                "properties": {
                    "sideEffectOneof": {
                        "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction.IncidentActionSideEffect.SideEffectOneof"
                    }
                },
                "required": [
                    "sideEffectOneof"
                ]
            },
            "com.august.protos.incidents.IncidentActionStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INCIDENT_ACTION_STATUS_OPEN",
                    "INCIDENT_ACTION_STATUS_COMPLETED"
                ]
            },
            "com.august.protos.incidents.IncidentAction": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.incidents.IncidentActionType"
                    },
                    "otherType": {
                        "type": "string",
                        "nullable": true
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.incidents.IncidentActionStatus"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "incidentId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "sideEffect": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAction.IncidentActionSideEffect"
                    }
                },
                "required": [
                    "type",
                    "status"
                ]
            },
            "com.august.protos.incidents.GroupByTimeUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "GROUP_BY_TIME_UNIT_DAY",
                    "GROUP_BY_TIME_UNIT_WEEK",
                    "GROUP_BY_TIME_UNIT_MONTH"
                ]
            },
            "com.august.protos.incidents.IncidentCategory": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INCIDENT_CATEGORY_INCIDENT",
                    "INCIDENT_CATEGORY_NOTE"
                ]
            },
            "com.august.protos.incidents.IncidentActionType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INCIDENT_ACTION_TYPE_OTHER",
                    "INCIDENT_ACTION_TYPE_NOTIFY_RP",
                    "INCIDENT_ACTION_TYPE_NOTIFY_GP",
                    "INCIDENT_ACTION_TYPE_NOTIFY_CA_LIC_624",
                    "INCIDENT_ACTION_TYPE_UPDATE_SERVICE_PLAN",
                    "INCIDENT_ACTION_TYPE_NOTIFY_LTC_OMBUDSMAN",
                    "INCIDENT_ACTION_TYPE_NOTIFY_LAW_ENFORCEMENT",
                    "INCIDENT_ACTION_TYPE_NOTIFY_PLACEMENT_AGENCY",
                    "INCIDENT_ACTION_TYPE_NEEDS_INVESTIGATION",
                    "INCIDENT_ACTION_TYPE_RESIDENT_INCIDENT_REPORT",
                    "INCIDENT_ACTION_TYPE_INSURANCE_INCIDENT_REPORT"
                ]
            },
            "com.august.protos.incidents.IncidentStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INCIDENT_STATUS_OPEN",
                    "INCIDENT_STATUS_COMPLETED"
                ]
            },
            "com.august.protos.incidents.IncidentType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INCIDENT_TYPE_OTHER",
                    "INCIDENT_TYPE_FALL",
                    "INCIDENT_TYPE_MED_ERROR",
                    "INCIDENT_TYPE_ELOPEMENT",
                    "INCIDENT_TYPE_HOSPITALIZATION",
                    "INCIDENT_TYPE_SKIN",
                    "INCIDENT_TYPE_MEDICAL_EMERGENCY",
                    "INCIDENT_TYPE_INJURY",
                    "INCIDENT_TYPE_ILLNESS",
                    "INCIDENT_TYPE_ABUSE",
                    "INCIDENT_TYPE_BEHAVIORAL",
                    "INCIDENT_TYPE_COVID",
                    "INCIDENT_TYPE_ON_FLOOR",
                    "INCIDENT_TYPE_ER_VISIT"
                ]
            },
            "com.august.protos.incidents.NoteType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "NOTE_TYPE_OTHER",
                    "NOTE_TYPE_PROGRESS",
                    "NOTE_TYPE_OBSERVATION",
                    "NOTE_TYPE_CLINICIAN_VISIT",
                    "NOTE_TYPE_AGENCY_VISIT",
                    "NOTE_TYPE_SHIFT_CHANGE",
                    "NOTE_TYPE_CARE_CONFERENCE",
                    "NOTE_TYPE_ROOM_CHANGE",
                    "NOTE_TYPE_ROOM_RATE_CHANGE",
                    "NOTE_TYPE_COVID",
                    "NOTE_TYPE_HOSPITAL_DISCHARGE",
                    "NOTE_TYPE_VITAL",
                    "NOTE_TYPE_FAMILY_OUTREACH"
                ]
            },
            "com.august.protos.snapshot.UploadInfo.Data": {
                "properties": {}
            },
            "com.august.protos.snapshot.UploadInfo": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.UploadInfo.Data"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "com.august.protos.api.snapshot_partial_pdf.SnapshotPartialPdf": {
                "properties": {
                    "pages": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "data": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot.Data"
                    }
                },
                "required": [
                    "pages"
                ]
            },
            "com.august.protos.immunization.DoseNumber": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DOSE_NUMBER_1",
                    "DOSE_NUMBER_2",
                    "DOSE_NUMBER_BOOSTER",
                    "DOSE_NUMBER_BOOSTER_2",
                    "DOSE_NUMBER_BOOSTER_3",
                    "DOSE_NUMBER_BOOSTER_4"
                ]
            },
            "com.august.protos.immunization.Protocol": {
                "properties": {
                    "targetDisease": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    },
                    "doseNumber": {
                        "$ref": "#/components/schemas/com.august.protos.immunization.DoseNumber"
                    },
                    "seriesDoses": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "required": [
                    "doseNumber"
                ]
            },
            "com.august.protos.annotation.Annotation": {
                "properties": {
                    "author": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "time": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "text": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.immunization.Immunization": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "manufacturer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.generic_organization.GenericOrganization"
                    },
                    "occurrenceDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "note": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.Annotation"
                    },
                    "protocolApplied": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.immunization.Protocol"
                    },
                    "attachmentSnapshotId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "performer": {
                        "type": "string",
                        "nullable": true
                    },
                    "lotNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "site": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    },
                    "route": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    }
                }
            },
            "com.august.protos.signable_form.SignableFormAssignment": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "state": {
                        "type": "string",
                        "nullable": true
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "dataType": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                    },
                    "customType": {
                        "type": "string",
                        "nullable": true
                    },
                    "signableFormId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "dataType"
                ]
            },
            "com.august.protos.signable_form.OrgState": {
                "properties": {
                    "state": {
                        "type": "string",
                        "nullable": true
                    },
                    "organization": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                    }
                }
            },
            "com.august.protos.signable_form.SignableFormWithAssignments": {
                "properties": {
                    "signableForm": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.SignableFormMetaData"
                    },
                    "orgStates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.OrgState"
                        }
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                        }
                    },
                    "organizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                        }
                    },
                    "states": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "global": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "orgStates",
                    "facilities",
                    "organizations",
                    "states"
                ]
            },
            "com.august.protos.signable_form.SignableFormMetaData": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "draftStatus": {
                        "$ref": "#/components/schemas/com.august.protos.signable_form.DraftStatus"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.error_response.Error"
                        }
                    },
                    "hellosign": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.HelloSign"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "deprecatedDisplay": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.FormDisplay"
                    },
                    "projectionType": {
                        "$ref": "#/components/schemas/com.august.protos.signable_form.PdfProj"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "copiedFromSignableFormId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "signers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.SignerRole"
                        }
                    },
                    "signerConfiguration": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignerRequest"
                        }
                    }
                },
                "required": [
                    "draftStatus",
                    "errors",
                    "projectionType",
                    "signers",
                    "signerConfiguration"
                ]
            },
            "com.august.protos.api.esign.EmbeddedUrlResponse": {
                "properties": {
                    "url": {
                        "type": "string",
                        "nullable": true
                    },
                    "clientId": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.api.esign.CreateSignableFormResponse": {
                "properties": {
                    "embedded": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.esign.EmbeddedUrlResponse"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.api.esign.SignableFormRequest": {
                "properties": {
                    "template": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.PdfTemplate"
                    },
                    "embeddedTemplateRequest": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.EmbeddedTemplateRequest"
                    },
                    "copyFromSignableFormId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "projectionType": {
                        "$ref": "#/components/schemas/com.august.protos.signable_form.PdfProj"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "projectionType"
                ]
            },
            "com.august.protos.signable_form.PdfProj": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PDF_PROJ_CA_601",
                    "PDF_PROJ_CA_603",
                    "PDF_PROJ_ADMISSIONS",
                    "PDF_PROJ_FROM_TEMPLATE",
                    "PDF_PROJ_CA_603A",
                    "PDF_PROJ_CA_601_RP_SIG",
                    "PDF_PROJ_SERVICE_PLAN",
                    "PDF_PROJ_INCIDENT_REPORT",
                    "PDF_PROJ_CA_624",
                    "PDF_PROJ_VA_UAI",
                    "PDF_PROJ_VA_SERVICE_PLAN",
                    "PDF_PROJ_NY_4397B",
                    "PDF_PROJ_NY_SERVICE_PLAN"
                ]
            },
            "com.august.protos.signable_form.CustomDisplayField": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "formFieldConfiguration": {
                        "nullable": true,
                        "type": "object"
                    }
                }
            },
            "com.august.protos.signable_form.DisplayField": {
                "properties": {
                    "fieldType": {
                        "$ref": "#/components/schemas/com.august.protos.custom_field.AugustFieldType"
                    },
                    "required": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "fieldType"
                ]
            },
            "com.august.protos.signable_form.DisplayPage": {
                "properties": {
                    "menuTitle": {
                        "type": "string",
                        "nullable": true
                    },
                    "pageTitle": {
                        "type": "string",
                        "nullable": true
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.DisplayField"
                        }
                    },
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.CustomDisplayField"
                        }
                    },
                    "adminOnly": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "fields",
                    "customFields"
                ]
            },
            "com.august.protos.signable_form.FormDisplay": {
                "properties": {
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "pages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.DisplayPage"
                        }
                    }
                },
                "required": [
                    "pages"
                ]
            },
            "com.august.protos.signable_form.SignerRequest": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignerRole"
                    },
                    "roleIndex": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "canSkip": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "role",
                    "roleIndex"
                ]
            },
            "com.august.protos.signable_form.EmbeddedTemplateRequest": {
                "properties": {
                    "signers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignerRequest"
                        }
                    }
                },
                "required": [
                    "signers"
                ]
            },
            "com.august.protos.signable_form.HelloSign": {
                "properties": {
                    "embeddedTemplateRequest": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.EmbeddedTemplateRequest"
                    },
                    "templateId": {
                        "type": "string",
                        "nullable": true
                    },
                    "blankPages": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "subtemplateOf": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.signable_form.DraftStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DRAFT_STATUS_PENDING",
                    "DRAFT_STATUS_ERROR",
                    "DRAFT_STATUS_READY"
                ]
            },
            "com.august.protos.signable_form.FormField.FieldTypeOneof": {
                "properties": {}
            },
            "com.august.protos.signable_form.FormField": {
                "properties": {
                    "x": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "y": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "width": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "height": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "isRequired": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "fieldTypeOneof": {
                        "$ref": "#/components/schemas/com.august.protos.signable_form.FormField.FieldTypeOneof"
                    }
                },
                "required": [
                    "fieldTypeOneof"
                ]
            },
            "com.august.protos.signable_form.SignatureConfiguration": {
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.FormField"
                        }
                    },
                    "signerRole": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignerRole"
                    },
                    "roleIndex": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "canSkip": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "fields",
                    "signerRole",
                    "roleIndex"
                ]
            },
            "com.august.protos.signable_form.PdfTemplate": {
                "properties": {
                    "signers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignatureConfiguration"
                        }
                    },
                    "preFilledFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.FormField"
                        }
                    }
                },
                "required": [
                    "signers",
                    "preFilledFields"
                ]
            },
            "com.august.protos.signable_form.SignableForm": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "template": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.PdfTemplate"
                    },
                    "draftTemplate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.PdfTemplate"
                    },
                    "draftStatus": {
                        "$ref": "#/components/schemas/com.august.protos.signable_form.DraftStatus"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.error_response.Error"
                        }
                    },
                    "hellosign": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.HelloSign"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "display": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.signable_form.FormDisplay"
                    },
                    "projectionType": {
                        "$ref": "#/components/schemas/com.august.protos.signable_form.PdfProj"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "copiedFromSignableFormId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "signerConfiguration": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.signable_form.SignerRequest"
                        }
                    }
                },
                "required": [
                    "draftStatus",
                    "errors",
                    "projectionType",
                    "signerConfiguration"
                ]
            },
            "com.august.protos.jobs.GenerateBulkMarParameters.SortBy": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SORT_BY_LAST_NAME",
                    "SORT_BY_ROOM_NUMBER"
                ]
            },
            "com.august.protos.event.Event.ModificationMetadata": {
                "properties": {
                    "userId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "userName": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "time": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.event.Event.DateTimeOneof": {
                "properties": {}
            },
            "com.august.protos.event.Event.EventType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "EVENT_TYPE_911",
                    "EVENT_TYPE_ASSESSMENT",
                    "EVENT_TYPE_CARE_CONFERENCE",
                    "EVENT_TYPE_COVID_TEST_ADMINISTERED",
                    "EVENT_TYPE_COVID_TEST_NEGATIVE",
                    "EVENT_TYPE_COVID_TEST_POSITIVE",
                    "EVENT_TYPE_DOCTOR_VISIT",
                    "EVENT_TYPE_HOSPITALIZATION",
                    "EVENT_TYPE_HOSPITALIZATION_DISCHARGE",
                    "EVENT_TYPE_OTHER_CLINICAL_VISIT",
                    "EVENT_TYPE_NOTES",
                    "EVENT_TYPE_ONSITE_DOCTOR_VISIT",
                    "EVENT_TYPE_SURGERY",
                    "EVENT_TYPE_OTHER",
                    "EVENT_TYPE_ADMIT_LONG_TERM",
                    "EVENT_TYPE_ADMIN_SHORT_TERM",
                    "EVENT_TYPE_DISCHARGE",
                    "EVENT_TYPE_DISCHARE_PENDING",
                    "EVENT_TYPE_DISCHARE_TEMPORARY",
                    "EVENT_TYPE_HOSPICE",
                    "EVENT_TYPE_OUT_OF_HOSPICE",
                    "EVENT_TYPE_READMIT",
                    "EVENT_TYPE_ROOM_CHANGE"
                ]
            },
            "com.august.protos.event.Event": {
                "properties": {
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.event.Event.EventType"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "dateTimeOneof": {
                        "$ref": "#/components/schemas/com.august.protos.event.Event.DateTimeOneof"
                    },
                    "creationMetadata": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.event.Event.ModificationMetadata"
                    },
                    "lastModification": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.event.Event.ModificationMetadata"
                    }
                },
                "required": [
                    "type",
                    "dateTimeOneof"
                ]
            },
            "com.august.api.medication.Emar.MissedAdministrationsDay": {
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "date",
                    "count"
                ]
            },
            "com.august.api.medication.Emar.MedAdminWithMedication": {
                "properties": {
                    "administration": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarMedAdministration"
                    },
                    "medication": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication.Medication"
                    }
                },
                "required": [
                    "administration"
                ]
            },
            "com.august.api.medication.Emar.EmarProgressPerson": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "room": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.room.Room"
                    },
                    "bed": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.bed.Bed"
                    },
                    "name": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "medGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "gender"
                ]
            },
            "com.august.protos.api.med_pass.MedPass": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "period": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.TimePeriod"
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "eventTiming": {
                        "$ref": "#/components/schemas/com.august.protos.timing.EventTiming"
                    }
                },
                "required": [
                    "eventTiming"
                ]
            },
            "com.august.api.medication.Emar.EmarProgressPayload": {
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "currentMedPassDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "inTrialMode": {
                        "type": "boolean"
                    },
                    "goLiveMedPassDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "selectedMedGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.med_group.MedGroup"
                        }
                    },
                    "lastRequested": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "medPasses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.med_pass.MedPass"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarProgressPerson"
                        }
                    },
                    "medicationAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.MedAdminWithMedication"
                        }
                    },
                    "missedAdministrationsHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.MissedAdministrationsDay"
                        }
                    },
                    "vitals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                        }
                    }
                },
                "required": [
                    "date",
                    "currentMedPassDate",
                    "inTrialMode",
                    "medGroups",
                    "lastRequested",
                    "medPasses",
                    "people",
                    "medicationAdministrations",
                    "missedAdministrationsHistory",
                    "vitals"
                ]
            },
            "com.august.api.medication.Emar.BulkPayload": {
                "properties": {
                    "vitals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                        }
                    },
                    "medicationAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                        }
                    },
                    "signOffs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceSignOff"
                        }
                    }
                },
                "required": [
                    "vitals",
                    "medicationAdministrations",
                    "signOffs"
                ]
            },
            "com.august.models.MedPassOccurrenceRef": {
                "properties": {
                    "medPassId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "medPassId",
                    "medPassDate"
                ]
            },
            "com.august.protos.medication_administration.MedAdministrationHistory": {
                "properties": {
                    "medAdmins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                        }
                    }
                },
                "required": [
                    "medAdmins"
                ]
            },
            "com.august.models.MedPassOccurrenceSignOff": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "signedOffBy": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "medPassId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "openedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "closedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "medPassOccurrenceId": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "medAdministrationHistory": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.MedAdministrationHistory"
                    },
                    "signedOffByName": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    }
                },
                "required": [
                    "id",
                    "medPassDate",
                    "medPassId",
                    "personId",
                    "openedAt",
                    "medPassOccurrenceId"
                ]
            },
            "com.august.protos.dosage_deviation.DosageTransitionStrategy": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DOSAGE_TRANSITION_STRATEGY_IMMEDIATE",
                    "DOSAGE_TRANSITION_STRATEGY_DEFERRED"
                ]
            },
            "com.august.protos.dosage_deviation.DosageTransition": {
                "properties": {
                    "strategy": {
                        "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DosageTransitionStrategy"
                    },
                    "deviation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DosageDeviation"
                    }
                },
                "required": [
                    "strategy"
                ]
            },
            "com.august.protos.dosage_deviation.DeviationAdministration": {
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.AdministrationStatus"
                    },
                    "scheduled": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.ScheduledAdministration"
                    },
                    "medPassId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "dosage": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.AdministeredDose"
                    },
                    "isActive": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "status",
                    "isActive"
                ]
            },
            "com.august.protos.medication_administration.ReasonForOutOfSchedule": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "REASON_FOR_OUT_OF_SCHEDULE_LATE_ENTRY",
                    "REASON_FOR_OUT_OF_SCHEDULE_RESIDENT_APPOINTMENT",
                    "REASON_FOR_OUT_OF_SCHEDULE_WIFI_NOT_WORKING",
                    "REASON_FOR_OUT_OF_SCHEDULE_CHARTING_SYSTEM_NOT_WORKING"
                ]
            },
            "com.august.protos.medication_administration.MedicationAdministration": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "medicationOrderId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.AdministrationStatus"
                    },
                    "statusReason": {
                        "type": "string",
                        "nullable": true
                    },
                    "occurrence": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "recorded": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "scheduled": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.ScheduledAdministration"
                    },
                    "medPassId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "subPotent": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "subPotentReason": {
                        "type": "string",
                        "nullable": true
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "dosage": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.AdministeredDose"
                    },
                    "dosageInstruction": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.DosageV2"
                    },
                    "vitalInstruction": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.VitalInstruction"
                    },
                    "clientVitalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "vitalId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "reasonForException": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.ReasonForException"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orderGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "orderDosageType": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.DosageType"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_administration.MedAdministrationEvent"
                        }
                    },
                    "conflicts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_administration.Conflict"
                        }
                    },
                    "wasAdministeredOutOfSchedule": {
                        "type": "boolean"
                    },
                    "reasonForOutOfSchedule": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.ReasonForOutOfSchedule"
                    },
                    "selfAdministered": {
                        "type": "boolean"
                    },
                    "injectionOrApplicationSiteNote": {
                        "type": "string",
                        "nullable": true
                    },
                    "requiresInjectionOrApplicationSiteNote": {
                        "type": "boolean"
                    },
                    "isRetroactive": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "status",
                    "reasonForException",
                    "orderDosageType",
                    "isActive",
                    "events",
                    "conflicts",
                    "wasAdministeredOutOfSchedule",
                    "reasonForOutOfSchedule",
                    "selfAdministered",
                    "requiresInjectionOrApplicationSiteNote",
                    "isRetroactive"
                ]
            },
            "com.august.protos.dosage_deviation.DosageDeviationAdministrations": {
                "properties": {
                    "lastAdministered": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.MedicationAdministration"
                    },
                    "immediateUpdatedAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DeviationAdministration"
                        }
                    },
                    "deferredUpdatedAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DeviationAdministration"
                        }
                    }
                },
                "required": [
                    "immediateUpdatedAdministrations",
                    "deferredUpdatedAdministrations"
                ]
            },
            "com.august.protos.dosage_deviation.DosageDeviation": {
                "properties": {
                    "occurredAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "dosageDiff": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "administrationCountDiff": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hasMixedUnits": {
                        "type": "boolean"
                    },
                    "administrations": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DosageDeviationAdministrations"
                    }
                },
                "required": [
                    "dosageDiff",
                    "administrationCountDiff",
                    "hasMixedUnits"
                ]
            },
            "com.august.protos.medication_order.MedicationDiscontinueStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MEDICATION_DISCONTINUE_STATUS_APPROVED",
                    "MEDICATION_DISCONTINUE_STATUS_PENDING",
                    "MEDICATION_DISCONTINUE_STATUS_REJECTED"
                ]
            },
            "com.august.protos.medication_order.DiscontinueData": {
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationDiscontinueStatus"
                    },
                    "approvedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "rejectionNote": {
                        "type": "string",
                        "nullable": true
                    },
                    "messageType": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.PharmacyMessageType"
                    },
                    "messageId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "status",
                    "messageType"
                ]
            },
            "com.august.protos.medication_order.RejectionReason": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "REJECTION_REASON_DUPLICATE"
                ]
            },
            "com.august.protos.medication_order.MedicationApprovalStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MEDICATION_APPROVAL_STATUS_APPROVED",
                    "MEDICATION_APPROVAL_STATUS_PENDING",
                    "MEDICATION_APPROVAL_STATUS_REJECTED"
                ]
            },
            "com.august.protos.medication_order.ApprovalData": {
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationApprovalStatus"
                    },
                    "approvedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "rejectionReason": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.RejectionReason"
                    },
                    "rejectionNote": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "status",
                    "rejectionReason"
                ]
            },
            "com.august.protos.medication_order.PharmacyMessageCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PHARMACY_MESSAGE_CODE_RDE",
                    "PHARMACY_MESSAGE_CODE_RDS",
                    "PHARMACY_MESSAGE_CODE_ORP"
                ]
            },
            "com.august.protos.medication_order.PossibleMatch": {
                "properties": {
                    "orderGroupId": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "orderGroupId"
                ]
            },
            "com.august.protos.medication_order.PharmacyMessageType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PHARMACY_MESSAGE_TYPE_NEW_ORDER",
                    "PHARMACY_MESSAGE_TYPE_CHANGE_ORDER",
                    "PHARMACY_MESSAGE_TYPE_DISCONTINUE",
                    "PHARMACY_MESSAGE_TYPE_CANCEL",
                    "PHARMACY_MESSAGE_TYPE_REFILL",
                    "PHARMACY_MESSAGE_TYPE_OBSERVATION",
                    "PHARMACY_MESSAGE_TYPE_UNABLE_TO_REFILL"
                ]
            },
            "com.august.protos.pharmacy_partner.PharmacyPartner": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PHARMACY_PARTNER_PHARMERICA",
                    "PHARMACY_PARTNER_OMNICARE",
                    "PHARMACY_PARTNER_FRAMEWORK_LTC",
                    "PHARMACY_PARTNER_REDSAIL_QS1",
                    "PHARMACY_PARTNER_SUITE_RX",
                    "PHARMACY_PARTNER_DIGITAL_RX"
                ]
            },
            "com.august.protos.medication_order.SourceData": {
                "properties": {
                    "externalOrderId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalMessageId": {
                        "type": "string",
                        "nullable": true
                    },
                    "integrationSource": {
                        "$ref": "#/components/schemas/com.august.protos.pharmacy_partner.PharmacyPartner"
                    },
                    "dosageInstruction": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.dosage.DosageV2"
                        }
                    },
                    "errors": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.error_response.ErrorResponse"
                    },
                    "messageTimestamp": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "receivedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "profileOnly": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "messageType": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.PharmacyMessageType"
                    },
                    "messageId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "possibleMatches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_order.PossibleMatch"
                        }
                    },
                    "messageCode": {
                        "$ref": "#/components/schemas/com.august.protos.medication_order.PharmacyMessageCode"
                    },
                    "refillOnly": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "messageComment": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "integrationSource",
                    "dosageInstruction",
                    "messageType",
                    "possibleMatches",
                    "messageCode"
                ]
            },
            "com.august.protos.medication_statement.DispenseRequest": {
                "properties": {
                    "numberOfRepeatsAllowed": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "numberOfRepeatsRemaining": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.medication_statement.OnHoldDetail": {
                "properties": {
                    "start": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "end": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "removedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                }
            },
            "com.august.protos.medication_statement.OnHold": {
                "properties": {
                    "onHoldDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.OnHoldDetail"
                    },
                    "onHoldHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_statement.OnHoldDetail"
                        }
                    }
                },
                "required": [
                    "onHoldHistory"
                ]
            },
            "com.august.protos.medication_statement.AdditionalInstructions": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ADDITIONAL_INSTRUCTIONS_BEFORE_MEALS",
                    "ADDITIONAL_INSTRUCTIONS_AFTER_MEALS"
                ]
            },
            "com.august.protos.medication_statement.SubstitutionType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SUBSTITUTION_TYPE_GENERIC",
                    "SUBSTITUTION_TYPE_THERAPEUTIC_INTERCHANGE"
                ]
            },
            "com.august.protos.medication_statement.Substitution": {
                "properties": {
                    "wasSubstituted": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.SubstitutionType"
                    },
                    "prescribedAs": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "type"
                ]
            },
            "com.august.protos.medication.Medication": {
                "properties": {
                    "code": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    },
                    "drugName": {
                        "type": "string",
                        "nullable": true
                    },
                    "strengthAndForm": {
                        "type": "string",
                        "nullable": true
                    },
                    "alternateName": {
                        "type": "string",
                        "nullable": true
                    },
                    "schedule": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    },
                    "medicationClass": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication.MedicationClass"
                        }
                    }
                },
                "required": [
                    "medicationClass"
                ]
            },
            "com.august.protos.medication_statement.MedicationStatement": {
                "properties": {
                    "effectivePeriod": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.InclusiveDatePeriod"
                    },
                    "orderGroupStartDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "statusEnum": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatus"
                    },
                    "reasonCode": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    },
                    "prescriber": {
                        "type": "string",
                        "nullable": true
                    },
                    "rxNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "pharmacy": {
                        "type": "string",
                        "nullable": true
                    },
                    "medication": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication.Medication"
                    },
                    "vitalType": {
                        "$ref": "#/components/schemas/com.august.protos.vital.VitalType"
                    },
                    "substitution": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.Substitution"
                    },
                    "providerDosageInstructions": {
                        "type": "string",
                        "nullable": true
                    },
                    "dosageInstruction": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.dosage.DosageV2"
                        }
                    },
                    "vitalInstructions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.vital.VitalInstruction"
                        }
                    },
                    "isTreatment": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "requiresControlledCount": {
                        "type": "boolean"
                    },
                    "additionalInstructions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_statement.AdditionalInstructions"
                        }
                    },
                    "selfAdministered": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "dosageType": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.DosageType"
                    },
                    "requiredVitals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.vital.VitalType"
                        }
                    },
                    "onHold": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.OnHold"
                    },
                    "dispenseRequest": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.DispenseRequest"
                    }
                },
                "required": [
                    "statusEnum",
                    "vitalType",
                    "dosageInstruction",
                    "vitalInstructions",
                    "requiresControlledCount",
                    "additionalInstructions",
                    "dosageType",
                    "requiredVitals"
                ]
            },
            "com.august.protos.medication_order.MedicationOrder": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "originalOrderId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orderGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "replacesId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medicationStatement": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatement"
                    },
                    "sourceData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_order.SourceData"
                    },
                    "approval": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_order.ApprovalData"
                    },
                    "discontinue": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_order.DiscontinueData"
                    },
                    "lastGiven": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "approvedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "discontinuedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "dosageDeviation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DosageDeviation"
                    },
                    "dosageTransition": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage_deviation.DosageTransition"
                    },
                    "reactivatedInMedOrderGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    }
                }
            },
            "com.august.protos.vital.VitalInstruction.MeasurementConstraint": {
                "properties": {}
            },
            "com.august.protos.vital.VitalType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "VITAL_TYPE_WEIGHT",
                    "VITAL_TYPE_TEMPERATURE",
                    "VITAL_TYPE_BLOOD_PRESSURE",
                    "VITAL_TYPE_HEART_RATE",
                    "VITAL_TYPE_RESPIRATORY_RATE",
                    "VITAL_TYPE_BLOOD_SUGAR",
                    "VITAL_TYPE_OXYGEN_SATURATION",
                    "VITAL_TYPE_PAIN",
                    "VITAL_TYPE_HEIGHT"
                ]
            },
            "com.august.protos.vital.VitalInstruction": {
                "properties": {
                    "timing": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.timing.Timing"
                    },
                    "vitalType": {
                        "$ref": "#/components/schemas/com.august.protos.vital.VitalType"
                    },
                    "measurementConstraint": {
                        "$ref": "#/components/schemas/com.august.protos.vital.VitalInstruction.MeasurementConstraint"
                    },
                    "observationActionNote": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "vitalType",
                    "measurementConstraint"
                ]
            },
            "com.august.protos.medication_administration.Conflict": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CONFLICT_ADMINISTERED_ON_HOLD_MED",
                    "CONFLICT_ADMINISTERED_DISCONTINUED_MED",
                    "CONFLICT_MULTIPLE_ADMINISTRATIONS",
                    "CONFLICT_ADMINISTERED_OVERRIDDEN_MED",
                    "CONFLICT_UNEXPECTED_STATUS_TRANSITION",
                    "CONFLICT_FORCED_ADMINISTERED_BY_EVENT_COUNT",
                    "CONFLICT_OTHER"
                ]
            },
            "com.august.protos.medication_administration.MedAdministrationEvent.Event": {
                "properties": {}
            },
            "com.august.protos.medication_administration.MedAdministrationEvent": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "parentId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "occurredAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "event": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.MedAdministrationEvent.Event"
                    }
                },
                "required": [
                    "id",
                    "event"
                ]
            },
            "com.august.api.medication.Emar.EmarMedAdministration.SecondParts": {
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_administration.MedAdministrationEvent"
                        }
                    },
                    "conflicts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_administration.Conflict"
                        }
                    },
                    "injectionOrApplicationSiteNote": {
                        "type": "string",
                        "nullable": true
                    },
                    "vitalInstruction": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.VitalInstruction"
                    },
                    "orderDosageType": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.DosageType"
                    },
                    "requiresInjectionOrApplicationSiteNote": {
                        "type": "boolean"
                    },
                    "isRetroactive": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "isActive",
                    "events",
                    "conflicts",
                    "orderDosageType",
                    "requiresInjectionOrApplicationSiteNote",
                    "isRetroactive"
                ]
            },
            "com.august.protos.medication_administration.ReasonForException": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "REASON_FOR_EXCEPTION_OUT_OF_FACILITY",
                    "REASON_FOR_EXCEPTION_RESIDENT_REFUSED",
                    "REASON_FOR_EXCEPTION_GIVEN_BY_HOME_HEALTH",
                    "REASON_FOR_EXCEPTION_GIVEN_TO_FAMILY_TO_GIVE_LATER",
                    "REASON_FOR_EXCEPTION_MEDICATION_NOT_AVAILABLE",
                    "REASON_FOR_EXCEPTION_WITHHELD_PER_DOCTORS_REQUEST",
                    "REASON_FOR_EXCEPTION_CHANGING_SCHEDULE",
                    "REASON_FOR_EXCEPTION_HELD_FOR_CONDITIONAL_PARAMETERS",
                    "REASON_FOR_EXCEPTION_HELD_BY_SLIDING_SCALE",
                    "REASON_FOR_EXCEPTION_OTHER"
                ]
            },
            "com.august.protos.dosage.ParameterConditional": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PARAMETER_CONDITIONAL_LESS_THAN",
                    "PARAMETER_CONDITIONAL_EQUAL_TO",
                    "PARAMETER_CONDITIONAL_GREATER_THAN"
                ]
            },
            "com.august.protos.dosage.ParameterType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PARAMETER_TYPE_WEIGHT",
                    "PARAMETER_TYPE_TEMPERATURE",
                    "PARAMETER_TYPE_SYSTOLIC_BLOOD_PRESSURE",
                    "PARAMETER_TYPE_DIASTOLIC_BLOOD_PRESSURE",
                    "PARAMETER_TYPE_HEART_RATE",
                    "PARAMETER_TYPE_RESPIRATORY_RATE",
                    "PARAMETER_TYPE_BLOOD_SUGAR",
                    "PARAMETER_TYPE_OXYGEN_SATURATION",
                    "PARAMETER_TYPE_PAIN",
                    "PARAMETER_TYPE_HEIGHT"
                ]
            },
            "com.august.protos.dosage.Parameter": {
                "properties": {
                    "parameterType": {
                        "$ref": "#/components/schemas/com.august.protos.dosage.ParameterType"
                    },
                    "conditional": {
                        "$ref": "#/components/schemas/com.august.protos.dosage.ParameterConditional"
                    },
                    "numeric": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    }
                },
                "required": [
                    "parameterType",
                    "conditional"
                ]
            },
            "com.august.protos.dosage.SlidingScaleEntry": {
                "properties": {
                    "bounds": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.Range"
                    },
                    "doseQuantity": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.dosage.SlidingScale": {
                "properties": {
                    "test": {
                        "type": "string",
                        "nullable": true
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.dosage.SlidingScaleEntry"
                        }
                    }
                },
                "required": [
                    "entries"
                ]
            },
            "com.august.protos.dosage.Range": {
                "properties": {
                    "low": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    },
                    "high": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    }
                }
            },
            "com.august.protos.dosage.DoseAndRate": {
                "properties": {
                    "doseRange": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.Range"
                    },
                    "doseQuantity": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    },
                    "maxDosePerDay": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    },
                    "minTimeBetweenDose": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    },
                    "slidingScale": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SlidingScale"
                    }
                }
            },
            "com.august.protos.dosage.DosageV2": {
                "properties": {
                    "text": {
                        "type": "string",
                        "nullable": true
                    },
                    "timing": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.timing.Timing"
                    },
                    "asNeededBoolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "asNeededCodeableConcept": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    },
                    "site": {
                        "type": "string",
                        "nullable": true
                    },
                    "route": {
                        "type": "string",
                        "nullable": true
                    },
                    "doseAndRate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.DoseAndRate"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "requiredInjectionOrApplicationSitePrompt": {
                        "type": "string",
                        "nullable": true
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.dosage.Parameter"
                        }
                    }
                },
                "required": [
                    "parameters"
                ]
            },
            "com.august.protos.dosage.SimpleQuantity": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "unit": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.medication_administration.AdministeredDose": {
                "properties": {
                    "text": {
                        "type": "string",
                        "nullable": true
                    },
                    "dose": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.SimpleQuantity"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.medication_administration.ScheduledAdministration": {
                "properties": {
                    "beginScheduledTime": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "endScheduledTime": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "timingConfiguration": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.timing.TimeAndEventTiming"
                    }
                }
            },
            "com.august.protos.medication_administration.AdministrationStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ADMINISTRATION_STATUS_ADMINISTERED",
                    "ADMINISTRATION_STATUS_NOT_ADMINISTERED",
                    "ADMINISTRATION_STATUS_ENTERED_IN_ERROR",
                    "ADMINISTRATION_STATUS_ON_HOLD"
                ]
            },
            "com.august.api.medication.Emar.EmarMedAdministration.FirstParts": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "medicationOrderId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orderGroupId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.AdministrationStatus"
                    },
                    "occurrence": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "scheduled": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.ScheduledAdministration"
                    },
                    "medPassId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassDate": {
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "medPassOccurrenceId": {
                        "type": "string"
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "dosage": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.AdministeredDose"
                    },
                    "dosageInstruction": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.dosage.DosageV2"
                    },
                    "vitalId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "reasonForException": {
                        "$ref": "#/components/schemas/com.august.protos.medication_administration.ReasonForException"
                    },
                    "administrationType": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "medicationOrderId",
                    "personId",
                    "orderGroupId",
                    "status",
                    "medPassId",
                    "medPassDate",
                    "medPassOccurrenceId",
                    "reasonForException",
                    "administrationType"
                ]
            },
            "com.august.api.medication.Emar.EmarMedAdministration": {
                "properties": {
                    "firstParts": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarMedAdministration.FirstParts"
                    },
                    "secondParts": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarMedAdministration.SecondParts"
                    }
                },
                "required": [
                    "firstParts",
                    "secondParts"
                ]
            },
            "com.august.protos.social_history.SocialHistory.Diet": {
                "properties": {
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "dietTypeValue": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "dietTypeValue"
                ]
            },
            "com.august.api.medication.Emar.EmarPerson": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "dateOfBirth": {
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "cprCode": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Polst.CPR"
                    },
                    "ambulatoryStatus": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus"
                    },
                    "allergiesAndIntolerances": {
                        "$ref": "#/components/schemas/com.august.protos.person.Person.AllergiesAndIntolerances"
                    },
                    "diet": {
                        "$ref": "#/components/schemas/com.august.protos.social_history.SocialHistory.Diet"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.condition.Condition"
                        }
                    },
                    "admissionsInformation": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation"
                    },
                    "respiteStatus": {
                        "$ref": "#/components/schemas/com.august.protos.respite.RespiteStatus"
                    },
                    "hospiceStatus": {
                        "$ref": "#/components/schemas/com.august.protos.hospice.HospiceStatus"
                    },
                    "medGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "outOfFacilityDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.OutOfFacilityDetail"
                    }
                },
                "required": [
                    "id",
                    "orgId",
                    "facilityId",
                    "name",
                    "gender",
                    "dateOfBirth",
                    "cprCode",
                    "ambulatoryStatus",
                    "allergiesAndIntolerances",
                    "diet",
                    "conditions",
                    "admissionsInformation",
                    "respiteStatus",
                    "hospiceStatus"
                ]
            },
            "com.august.api.medication.Emar.EmarMedPassOccurrence": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "medPassId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "startTime": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-08-22T06:00"
                    },
                    "endTime": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-08-22T06:00"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "medPassId",
                    "medPassDate",
                    "startTime",
                    "endTime"
                ]
            },
            "com.august.api.medication.Emar.EmarPayload": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medPassOccurrences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarMedPassOccurrence"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarPerson"
                        }
                    },
                    "medicationAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.EmarMedAdministration"
                        }
                    },
                    "medicationOrders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication_order.MedicationOrder"
                        }
                    },
                    "signOffs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.MedPassOccurrenceSignOff"
                        }
                    },
                    "vitals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                        }
                    },
                    "administrablePrnOrders": {
                        "type": "collection.immutable.map[string,scala.collection.immutable.map[long,seq[long]]]"
                    },
                    "usersWhoCanAdminister": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                        }
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "medPassOccurrences",
                    "people",
                    "medicationAdministrations",
                    "medicationOrders",
                    "signOffs",
                    "vitals",
                    "administrablePrnOrders",
                    "usersWhoCanAdminister"
                ]
            },
            "com.august.services.email.TemplateTestEmail": {
                "properties": {
                    "templateName": {
                        "type": "string"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "variables": {
                        "nullable": true,
                        "type": "object",
                        "example": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "templateName"
                ]
            },
            "com.august.controllers.UnsubscribeRequest": {
                "properties": {
                    "code": {
                        "type": "string"
                    }
                },
                "required": [
                    "code"
                ]
            },
            "com.august.protos.api.import_results.ResultsOrErrors.Response": {
                "properties": {}
            },
            "com.august.protos.api.import_results.ResultsOrErrors": {
                "properties": {
                    "response": {
                        "$ref": "#/components/schemas/com.august.protos.api.import_results.ResultsOrErrors.Response"
                    }
                },
                "required": [
                    "response"
                ]
            },
            "com.august.protos.api.import_results.DataImportResponse": {
                "properties": {
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.import_results.ResultsOrErrors"
                        }
                    }
                },
                "required": [
                    "results"
                ]
            },
            "com.august.protos.api.error_response.ErrorCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ERROR_CODE_DISPLAY_TO_CLIENT",
                    "ERROR_CODE_ETAG_MISMATCH",
                    "ERROR_CODE_UNSUPPORTED_VERSION",
                    "ERROR_CODE_CONFIRMATION_REQUIRED",
                    "ERROR_CODE_DOSAGE_TRANSITION_REQUIRED",
                    "ERROR_CODE_EXPECTED_COUNT_MISMATCH"
                ]
            },
            "com.august.protos.api.error_response.Error": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.api.error_response.ErrorCode"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "data": {
                        "nullable": true,
                        "type": "object"
                    },
                    "stackTrace": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "code"
                ]
            },
            "com.august.protos.api.error_response.ErrorResponse": {
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.error_response.Error"
                        }
                    }
                },
                "required": [
                    "errors"
                ]
            },
            "com.august.protos.data_import.SuccessOrErrors.Response": {
                "properties": {}
            },
            "com.august.protos.data_import.SuccessOrErrors": {
                "properties": {
                    "response": {
                        "$ref": "#/components/schemas/com.august.protos.data_import.SuccessOrErrors.Response"
                    }
                },
                "required": [
                    "response"
                ]
            },
            "com.august.protos.data_import.Schedule": {
                "properties": {
                    "scheduledAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "scheduledJobId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.data_import.ImportStatus": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind"
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "outputFileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "createdAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "startedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "finishedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "schedule": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.data_import.Schedule"
                    },
                    "totalRows": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.data_import.SuccessOrErrors"
                        }
                    },
                    "globalError": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.api.error_response.ErrorResponse"
                    },
                    "importedByUserId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "kind",
                    "results"
                ]
            },
            "com.august.protos.api.import_results.ImportResult": {
                "properties": {
                    "importStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.data_import.ImportStatus"
                    },
                    "organizationName": {
                        "type": "string",
                        "nullable": true
                    },
                    "facilityName": {
                        "type": "string",
                        "nullable": true
                    },
                    "importedBy": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.data_import.ImportKind": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "IMPORT_KIND_RESIDENT",
                    "IMPORT_KIND_MEDICATION",
                    "IMPORT_KIND_USER",
                    "IMPORT_KIND_FACILITY_FIELDS",
                    "IMPORT_KIND_RAINFOREST_PAY",
                    "IMPORT_KIND_ROOM_PROPERTIES",
                    "IMPORT_KIND_BILLING_SETTINGS",
                    "IMPORT_KIND_BILLING_CATEGORIES_AND_ITEMS",
                    "IMPORT_KIND_BILLING_RESIDENT_CHARGES",
                    "IMPORT_KIND_FACILITY",
                    "IMPORT_KIND_PAYER_ADDITIONAL_SETTINGS"
                ]
            },
            "com.august.protos.api.import_results.AvailableImportKinds": {
                "properties": {
                    "kind": {
                        "$ref": "#/components/schemas/com.august.protos.data_import.ImportKind"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "requiresFacilityId": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "kind",
                    "displayName",
                    "requiresFacilityId"
                ]
            },
            "com.august.protos.api.token.Token": {
                "properties": {
                    "expiresIn": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "idToken": {
                        "type": "string",
                        "nullable": true
                    },
                    "refreshToken": {
                        "type": "string",
                        "nullable": true
                    },
                    "accessToken": {
                        "type": "string",
                        "nullable": true
                    },
                    "tokenType": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.api.medication.Emar.WitnessSignaturePasscode": {
                "properties": {
                    "passcode": {
                        "type": "string"
                    }
                },
                "required": [
                    "passcode"
                ]
            },
            "com.august.api.medication.Emar.InitiateWitnessSignaturePayload": {
                "properties": {
                    "witnessId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.api.medication.Emar.InventoryAdjustmentPayload": {
                "properties": {
                    "adjustmentAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "disposal": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.medication.InventoryDisposal"
                    }
                },
                "required": [
                    "adjustmentAmount"
                ]
            },
            "com.august.api.medication.Emar.OrderGroupCountReconciliationPayload": {
                "properties": {}
            },
            "com.august.api.medication.Emar.OrderGroupCountPatch": {
                "properties": {
                    "count": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    }
                }
            },
            "com.august.api.medication.Emar.ApiInventoryLogItem": {
                "properties": {
                    "kind": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user": {
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "resultingCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "administeredCount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    },
                    "receiptCount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    },
                    "disposalCount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    },
                    "witness": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "disposalReason": {
                        "type": "string",
                        "nullable": true
                    },
                    "disposalMethod": {
                        "type": "string",
                        "nullable": true
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "controlledCountId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "kind",
                    "timestamp",
                    "user",
                    "resultingCount"
                ]
            },
            "com.august.api.medication.Emar.EmailAddressStatus": {
                "properties": {}
            },
            "com.august.api.medication.Emar.PotentialWitness": {
                "properties": {
                    "userId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "userName": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "emailStatus": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.EmailAddressStatus"
                    },
                    "hasPin": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "userId",
                    "userName",
                    "emailStatus",
                    "hasPin"
                ]
            },
            "com.august.models.medication.InventoryDisposal": {
                "properties": {
                    "method": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "method",
                    "reason"
                ]
            },
            "com.august.api.medication.Emar.ApiInventoryAdjustment": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orderGroupId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "medicationOrderId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "adjustmentAmount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    },
                    "disposal": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.medication.InventoryDisposal"
                    },
                    "medicationSummary": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiOrderGroupCountMedicationSummary"
                    },
                    "reconcilesOrderGroupCountId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "hasInitialInventory": {
                        "type": "boolean"
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "orderGroupId",
                    "medicationOrderId",
                    "facilityId",
                    "personId",
                    "medicationSummary",
                    "hasInitialInventory"
                ]
            },
            "com.august.api.medication.Emar.ReconciliationData": {
                "properties": {
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "reconciledCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "preReconciledCount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    },
                    "reconciledAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "adjustments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiInventoryAdjustment"
                        }
                    }
                },
                "required": [
                    "reconciledCount",
                    "reconciledAt",
                    "adjustments"
                ]
            },
            "com.august.api.medication.Emar.SubmittedCountData": {
                "properties": {
                    "userCount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "expectedCount": {
                        "nullable": true,
                        "type": "number",
                        "format": "decimal",
                        "example": 3.14
                    }
                }
            },
            "com.august.models.medication.OrderGroupCountException": {
                "properties": {
                    "reason": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string"
                    }
                },
                "required": [
                    "reason",
                    "note"
                ]
            },
            "com.august.protos.medication_statement.DosageType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DOSAGE_TYPE_ROUTINE",
                    "DOSAGE_TYPE_PRN",
                    "DOSAGE_TYPE_SPLIT",
                    "DOSAGE_TYPE_TAPER",
                    "DOSAGE_TYPE_SLIDING_SCALE",
                    "DOSAGE_TYPE_VITAL"
                ]
            },
            "com.august.protos.medication_statement.MedicationStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MEDICATION_STATUS_STOPPED",
                    "MEDICATION_STATUS_ENTERED_IN_ERROR"
                ]
            },
            "com.august.protos.medication.MedicationClass": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MEDICATION_CLASS_NARCOTIC",
                    "MEDICATION_CLASS_PSYCHOTROPIC"
                ]
            },
            "com.august.api.medication.Emar.ApiOrderGroupCountMedicationSummary": {
                "properties": {
                    "drugName": {
                        "type": "string"
                    },
                    "alternateName": {
                        "type": "string",
                        "nullable": true
                    },
                    "strengthAndForm": {
                        "type": "string"
                    },
                    "providerDosageInstructions": {
                        "type": "string"
                    },
                    "scheduleText": {
                        "type": "string"
                    },
                    "medicationClass": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.medication.MedicationClass"
                        }
                    },
                    "rxNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "pharmacy": {
                        "type": "string",
                        "nullable": true
                    },
                    "prescriber": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.MedicationStatus"
                    },
                    "doseUnit": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dosageType": {
                        "$ref": "#/components/schemas/com.august.protos.medication_statement.DosageType"
                    },
                    "hasPrn": {
                        "type": "boolean"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isOnHold": {
                        "type": "boolean"
                    },
                    "approvedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "drugName",
                    "strengthAndForm",
                    "providerDosageInstructions",
                    "scheduleText",
                    "medicationClass",
                    "status",
                    "doseUnit",
                    "dosageType",
                    "hasPrn",
                    "isActive",
                    "isOnHold"
                ]
            },
            "com.august.api.medication.Emar.ApiOrderGroupCount": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orderGroupId": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "medicationOrderId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Complete",
                            "Exception",
                            "Draft",
                            "Reconciled",
                            "ExceptionAcknowledged"
                        ]
                    },
                    "medicationSummary": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiOrderGroupCountMedicationSummary"
                    },
                    "exception": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.medication.OrderGroupCountException"
                    },
                    "submittedCountData": {
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.SubmittedCountData"
                    },
                    "reconciliation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.api.medication.Emar.ReconciliationData"
                    },
                    "hasInitialInventory": {
                        "type": "boolean"
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "orderGroupId",
                    "medicationOrderId",
                    "facilityId",
                    "personId",
                    "status",
                    "medicationSummary",
                    "submittedCountData",
                    "hasInitialInventory"
                ]
            },
            "com.august.api.medication.Emar.ApiControlledCountPerson": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "room": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.room.Room"
                    },
                    "bed": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.bed.Bed"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "orderGroupCounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiOrderGroupCount"
                        }
                    },
                    "inventoryAdjustments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiInventoryAdjustment"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "gender",
                    "orderGroupCounts",
                    "inventoryAdjustments"
                ]
            },
            "com.august.api.medication.Emar.ApiControlledCount": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "counter": {
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "witness": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "kind": {
                        "type": "string",
                        "enum": [
                            "Count",
                            "Receipt",
                            "Disposal"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "Complete",
                            "PendingWitnessSignatureWithExceptions",
                            "PendingWitnessPasscode",
                            "PendingWitnessPasscodeWithExceptions",
                            "SavedWithExceptions",
                            "PendingSignature",
                            "Draft",
                            "PendingSignatureWithExceptions",
                            "PendingWitnessSignature",
                            "Reconciled",
                            "DraftWithExceptions"
                        ]
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.medication.Emar.ApiControlledCountPerson"
                        }
                    },
                    "submittedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "orgId",
                    "facilityId",
                    "createdAt",
                    "createdBy",
                    "counter",
                    "kind",
                    "status",
                    "people"
                ]
            },
            "com.august.api.medication.Emar.ControlledCountCreatePayload": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "medGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "counterId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "witnessId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "kind": {
                        "type": "string",
                        "enum": [
                            "Count",
                            "Receipt",
                            "Disposal"
                        ]
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "kind"
                ]
            },
            "com.august.protos.charge.Charge.RecurringOrOneTime": {
                "properties": {}
            },
            "com.august.protos.charge.Charge.PayerOneof": {
                "properties": {}
            },
            "com.august.protos.charge.ChargeType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CHARGE_TYPE_OTHER",
                    "CHARGE_TYPE_MONTHLY_RATE",
                    "CHARGE_TYPE_APPLICATION_FEE",
                    "CHARGE_TYPE_DAILY_RATE",
                    "CHARGE_TYPE_DEPOSIT",
                    "CHARGE_TYPE_FOOD",
                    "CHARGE_TYPE_HAIRCUT_GROOMING",
                    "CHARGE_TYPE_MASSAGE_WELLNESS",
                    "CHARGE_TYPE_CARE_RATE",
                    "CHARGE_TYPE_ADJUSTMENT_ACCIDENTAL_CHARGE",
                    "CHARGE_TYPE_ADJUSTMENT_APPOINTMENT_CANCELLED",
                    "CHARGE_TYPE_HOSPITAL_STAY"
                ]
            },
            "com.august.protos.charge.Charge": {
                "properties": {
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.charge.ChargeType"
                    },
                    "payerOneof": {
                        "$ref": "#/components/schemas/com.august.protos.charge.Charge.PayerOneof"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "recurringOrOneTime": {
                        "$ref": "#/components/schemas/com.august.protos.charge.Charge.RecurringOrOneTime"
                    }
                },
                "required": [
                    "type",
                    "payerOneof",
                    "recurringOrOneTime"
                ]
            },
            "com.august.api.CareApp.BulkPayload": {
                "properties": {
                    "routineAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppRoutineAdministration"
                        }
                    },
                    "signOffs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.ShiftOccurrenceSignOff"
                        }
                    },
                    "observations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.ApiCareObservation"
                        }
                    }
                },
                "required": [
                    "routineAdministrations",
                    "signOffs",
                    "observations"
                ]
            },
            "com.august.api.CareApp.MissedAdministrationsDay": {
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "date",
                    "count"
                ]
            },
            "com.august.api.CareApp.ProgressPayload": {
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "selectedCareGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "selectedShiftId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "careGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.care_group.CareGroup"
                        }
                    },
                    "lastRequested": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppShift"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppPerson"
                        }
                    },
                    "routineAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppRoutineAdministration"
                        }
                    },
                    "missedAdministrationsHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.MissedAdministrationsDay"
                        }
                    }
                },
                "required": [
                    "date",
                    "careGroups",
                    "lastRequested",
                    "shifts",
                    "people",
                    "routineAdministrations",
                    "missedAdministrationsHistory"
                ]
            },
            "com.august.api.CareApp.ApiCareObservation": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "observedBy": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "observedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "observations": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "AgitatedOrNervous",
                                "CognitiveChangeOfCondition",
                                "ParticipatedLessInActivities",
                                "VerbalAggression",
                                "SexuallyInappropriateBehaviors",
                                "Diarrhea",
                                "NewOrWorseningPain",
                                "TalksOrCommunicatesLess",
                                "AteLessThanNormal",
                                "VisibleWeightLoss",
                                "SkinIssue",
                                "MoreTiredOrWeak",
                                "NeededMoreHelpThanNormal",
                                "BehavioralChangeOfCondition",
                                "PhysicalAggression",
                                "DifficultyWithBowelMovements",
                                "PhysicalHealthChangeOfCondition",
                                "DailyActivitiesChangeOfCondition",
                                "DrankLessThanNormal",
                                "IncreasedConfusion"
                            ]
                        }
                    },
                    "category": {
                        "type": "string",
                        "enum": [
                            "Behavioral",
                            "PhysicalHealth",
                            "DailyActivities",
                            "Cognitive"
                        ]
                    },
                    "shiftId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "shiftDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdById",
                    "createdAt",
                    "modifiedById",
                    "modifiedAt",
                    "personId",
                    "facilityId",
                    "observedBy",
                    "observedAt",
                    "observations",
                    "category",
                    "shiftId",
                    "shiftDate"
                ]
            },
            "com.august.api.CareApp.CareAppPrnAdministrationTemplate": {
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationStatus"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isPrn": {
                        "type": "boolean"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEvent"
                        }
                    },
                    "prnCategory": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.PrnCategory"
                    }
                },
                "required": [
                    "status",
                    "isActive",
                    "isPrn",
                    "events",
                    "prnCategory"
                ]
            },
            "com.august.models.RoutineAdministrationSnapshot": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationStatus"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                },
                "required": [
                    "id",
                    "status",
                    "events"
                ]
            },
            "com.august.models.ShiftOccurrenceSignOff": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "signedOffById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "shiftOccurrenceRef": {
                        "$ref": "#/components/schemas/com.august.models.ShiftOccurrenceReference"
                    },
                    "routineAdministrationsHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.RoutineAdministrationSnapshot"
                        }
                    },
                    "signedOffAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "signedOffById",
                    "shiftOccurrenceRef",
                    "routineAdministrationsHistory",
                    "signedOffAt"
                ]
            },
            "com.august.protos.person.ShiftCareGroupDetails": {
                "properties": {
                    "careGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "shiftId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.hospice.HospiceStatus": {
                "properties": {
                    "onHospice": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "dateStarted": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    }
                }
            },
            "com.august.protos.respite.RespiteStatus": {
                "properties": {
                    "isRespite": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.bed.Bed": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "roomId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                }
            },
            "com.august.protos.room.Room": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.room.RoomType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ROOM_TYPE_SINGLE",
                    "ROOM_TYPE_DOUBLE"
                ]
            },
            "com.august.protos.admissions.RoomOrBedSubset": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.admissions.AdmissionsInformation.StartDateOneof": {
                "properties": {}
            },
            "com.august.protos.admissions.AdmissionsInformation": {
                "properties": {
                    "overallRate": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "startDateOneof": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.StartDateOneof"
                    },
                    "room": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.admissions.RoomOrBedSubset"
                    },
                    "assignedRoomType": {
                        "$ref": "#/components/schemas/com.august.protos.room.RoomType"
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "initialIntendedRate": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "bedId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "roomDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.room.Room"
                    },
                    "bedDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.bed.Bed"
                    },
                    "financialStartDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "startDateOneof",
                    "assignedRoomType",
                    "admissionType"
                ]
            },
            "com.august.protos.vital.HeightUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "HEIGHT_UNIT_INCHES",
                    "HEIGHT_UNIT_CENTIMETERS"
                ]
            },
            "com.august.protos.vital.Height": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.HeightUnit"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit"
                ]
            },
            "com.august.protos.vital.PainUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PAIN_UNIT_ONE_TO_TEN"
                ]
            },
            "com.august.protos.vital.Pain": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.PainUnit"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit"
                ]
            },
            "com.august.protos.vital.SupplementalOxygen": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SUPPLEMENTAL_OXYGEN_0_5_L",
                    "SUPPLEMENTAL_OXYGEN_1_0_L",
                    "SUPPLEMENTAL_OXYGEN_1_5_L",
                    "SUPPLEMENTAL_OXYGEN_2_0_L",
                    "SUPPLEMENTAL_OXYGEN_2_5_L",
                    "SUPPLEMENTAL_OXYGEN_3_0_L",
                    "SUPPLEMENTAL_OXYGEN_3_5_L",
                    "SUPPLEMENTAL_OXYGEN_4_0_L",
                    "SUPPLEMENTAL_OXYGEN_4_5_L",
                    "SUPPLEMENTAL_OXYGEN_5_0_L",
                    "SUPPLEMENTAL_OXYGEN_0_0_L"
                ]
            },
            "com.august.protos.vital.OxygenSaturationUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "OXYGEN_SATURATION_UNIT_PERCENT"
                ]
            },
            "com.august.protos.vital.OxygenSaturation": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.OxygenSaturationUnit"
                    },
                    "supplemental": {
                        "$ref": "#/components/schemas/com.august.protos.vital.SupplementalOxygen"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit",
                    "supplemental"
                ]
            },
            "com.august.protos.vital.BloodSugarTiming": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "BLOOD_SUGAR_TIMING_BEFORE_MEAL",
                    "BLOOD_SUGAR_TIMING_AFTER_MEAL",
                    "BLOOD_SUGAR_TIMING_FASTING",
                    "BLOOD_SUGAR_TIMING_BEDTIME",
                    "BLOOD_SUGAR_TIMING_RANDOM"
                ]
            },
            "com.august.protos.vital.BloodSugarUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "BLOOD_SUGAR_UNIT_MILLIGRAMS_PER_DECILITER",
                    "BLOOD_SUGAR_UNIT_MILLIMOLES_PER_LITER"
                ]
            },
            "com.august.protos.vital.BloodSugar": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodSugarUnit"
                    },
                    "timing": {
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodSugarTiming"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit",
                    "timing"
                ]
            },
            "com.august.protos.vital.RespiratoryRateUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "RESPIRATORY_RATE_UNIT_BREATHS_PER_MINUTE"
                ]
            },
            "com.august.protos.vital.RespiratoryRate": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.RespiratoryRateUnit"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit"
                ]
            },
            "com.august.protos.vital.HeartRateUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "HEART_RATE_UNIT_BEATS_PER_MINUTE"
                ]
            },
            "com.august.protos.vital.HeartRate": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.HeartRateUnit"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit"
                ]
            },
            "com.august.protos.vital.BloodPressurePosition": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "BLOOD_PRESSURE_POSITION_LYING",
                    "BLOOD_PRESSURE_POSITION_SITTING",
                    "BLOOD_PRESSURE_POSITION_STANDING"
                ]
            },
            "com.august.protos.vital.BloodPressureUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "BLOOD_PRESSURE_UNIT_MILLIMETERS_OF_MERCURY"
                ]
            },
            "com.august.protos.vital.SingleBloodPressure": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodPressureUnit"
                    }
                },
                "required": [
                    "unit"
                ]
            },
            "com.august.protos.vital.BloodPressure": {
                "properties": {
                    "systolic": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.SingleBloodPressure"
                    },
                    "diastolic": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.SingleBloodPressure"
                    },
                    "position": {
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodPressurePosition"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "position"
                ]
            },
            "com.august.protos.vital.TemperatureType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TEMPERATURE_TYPE_AXILLARY",
                    "TEMPERATURE_TYPE_EAR",
                    "TEMPERATURE_TYPE_FOREHEAD",
                    "TEMPERATURE_TYPE_ORAL",
                    "TEMPERATURE_TYPE_RECTAL"
                ]
            },
            "com.august.protos.vital.TemperatureUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TEMPERATURE_UNIT_FAHRENHEIT",
                    "TEMPERATURE_UNIT_CELSIUS"
                ]
            },
            "com.august.protos.vital.Temperature": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.TemperatureUnit"
                    },
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.vital.TemperatureType"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit",
                    "type"
                ]
            },
            "com.august.protos.vital.WeightUnit": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "WEIGHT_UNIT_POUNDS",
                    "WEIGHT_UNIT_KILOGRAMS"
                ]
            },
            "com.august.protos.vital.Weight": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "unit": {
                        "$ref": "#/components/schemas/com.august.protos.vital.WeightUnit"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "unit"
                ]
            },
            "com.august.protos.vital.Panel": {
                "properties": {
                    "weight": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Weight"
                    },
                    "temperature": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Temperature"
                    },
                    "bloodPressure": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodPressure"
                    },
                    "heartRate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.HeartRate"
                    },
                    "respiratoryRate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.RespiratoryRate"
                    },
                    "bloodSugar": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.BloodSugar"
                    },
                    "oxygenSaturation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.OxygenSaturation"
                    },
                    "pain": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Pain"
                    },
                    "height": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Height"
                    }
                }
            },
            "com.august.protos.vital.Vital": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "clientId": {
                        "type": "string",
                        "nullable": true
                    },
                    "panel": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Panel"
                    },
                    "fromEmarTrialMode": {
                        "type": "boolean"
                    },
                    "incidentNote": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "fromEmarTrialMode"
                ]
            },
            "com.august.protos.incidents.IncidentComment": {
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "incidentId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "comment": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "deletedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "isActive"
                ]
            },
            "com.august.protos.snapshot.SnapshotDetail": {
                "properties": {
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "displayName": {
                        "type": "string",
                        "nullable": true
                    },
                    "shortName": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.snapshot.SnapshotStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SNAPSHOT_STATUS_DRAFT",
                    "SNAPSHOT_STATUS_COMPLETE",
                    "SNAPSHOT_STATUS_ARCHIVED",
                    "SNAPSHOT_STATUS_DISCARDED"
                ]
            },
            "com.august.protos.snapshot.SignatureDetails.SignatureProvider": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SIGNATURE_PROVIDER_HELLO_SIGN",
                    "SIGNATURE_PROVIDER_MOCK"
                ]
            },
            "com.august.protos.snapshot.RoleAndIndex": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignerRole"
                    },
                    "roleIndex": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "role",
                    "roleIndex"
                ]
            },
            "com.august.protos.snapshot.SignerRole": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SIGNER_ROLE_ADMIN",
                    "SIGNER_ROLE_RESPONSIBLE_PARTY",
                    "SIGNER_ROLE_RESIDENT",
                    "SIGNER_ROLE_EXTERNAL"
                ]
            },
            "com.august.protos.snapshot.Signer": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignerRole"
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "signedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "userAccountId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "roleIndex": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "mergedRoleAndIndices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.RoleAndIndex"
                        }
                    }
                },
                "required": [
                    "role",
                    "mergedRoleAndIndices"
                ]
            },
            "com.august.protos.snapshot.SignatureDetails": {
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "signers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.Signer"
                        }
                    },
                    "provider": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignatureDetails.SignatureProvider"
                    }
                },
                "required": [
                    "signers",
                    "provider"
                ]
            },
            "com.august.protos.snapshot.Snapshot.Data.DataFormat": {
                "properties": {}
            },
            "com.august.protos.snapshot.Snapshot.Data": {
                "properties": {
                    "dataFormat": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot.Data.DataFormat"
                    }
                },
                "required": [
                    "dataFormat"
                ]
            },
            "com.august.protos.snapshot.Snapshot": {
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "dataType": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                    },
                    "customType": {
                        "type": "string",
                        "nullable": true
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    },
                    "data": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot.Data"
                    },
                    "signatureDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SignatureDetails"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SnapshotStatus"
                    },
                    "lastModification": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "completedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "snapshotDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.SnapshotDetail"
                    },
                    "deletedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "isActive",
                    "dataType",
                    "status"
                ]
            },
            "com.august.protos.incidents.IncidentAlert": {
                "properties": {
                    "frequency": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "asNeeded": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "startedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "endedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.incidents.Incident.Detail.DetailOneof": {
                "properties": {}
            },
            "com.august.protos.incidents.Incident.Detail": {
                "properties": {
                    "detailOneof": {
                        "$ref": "#/components/schemas/com.august.protos.incidents.Incident.Detail.DetailOneof"
                    }
                },
                "required": [
                    "detailOneof"
                ]
            },
            "com.august.protos.incidents.Incident": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "detail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.incidents.Incident.Detail"
                    },
                    "occurredAt": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "alert": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.incidents.IncidentAlert"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot"
                        }
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.IncidentComment"
                        }
                    },
                    "vitalId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "vital": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                    },
                    "deletedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                },
                "required": [
                    "isActive",
                    "attachments",
                    "comments"
                ]
            },
            "com.august.protos.codeable_concept.SystemUrl": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SYSTEM_URL_RXNORM",
                    "SYSTEM_URL_SNOMED_CT",
                    "SYSTEM_URL_NDC",
                    "SYSTEM_URL_ICD_10",
                    "SYSTEM_URL_DEA",
                    "SYSTEM_URL_EDQM",
                    "SYSTEM_URL_GPI"
                ]
            },
            "com.august.protos.codeable_concept.Coding": {
                "properties": {
                    "systemEnum": {
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.SystemUrl"
                    },
                    "code": {
                        "type": "string",
                        "nullable": true
                    },
                    "display": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "systemEnum"
                ]
            },
            "com.august.protos.codeable_concept.CodeableConcept": {
                "properties": {
                    "coding": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.codeable_concept.Coding"
                        }
                    },
                    "text": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "coding"
                ]
            },
            "com.august.protos.condition.Condition": {
                "properties": {
                    "isPrimary": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "code": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.codeable_concept.CodeableConcept"
                    }
                }
            },
            "com.august.protos.allergy_intolerance.AllergyIntolerance.AllergyIntoleranceCategory": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ALLERGY_INTOLERANCE_CATEGORY_FOOD",
                    "ALLERGY_INTOLERANCE_CATEGORY_MEDICATION"
                ]
            },
            "com.august.protos.allergy_intolerance.AllergyIntolerance": {
                "properties": {
                    "summary": {
                        "type": "string",
                        "nullable": true
                    },
                    "category": {
                        "$ref": "#/components/schemas/com.august.protos.allergy_intolerance.AllergyIntolerance.AllergyIntoleranceCategory"
                    }
                },
                "required": [
                    "category"
                ]
            },
            "com.august.protos.person.Person.AllergiesAndIntolerances": {
                "properties": {
                    "allergies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.allergy_intolerance.AllergyIntolerance"
                        }
                    }
                },
                "required": [
                    "allergies"
                ]
            },
            "com.august.protos.ambulatory_status.AmbulatoryStatus.BedStatus.Code": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CODE_OUT_OF_BED_ALL_DAY",
                    "CODE_IN_BED_PART_OF_DAY",
                    "CODE_IN_BED_ALL_OR_MOST_OF_DAY"
                ]
            },
            "com.august.protos.ambulatory_status.AmbulatoryStatus.BedStatus": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.BedStatus.Code"
                    },
                    "comment": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "code"
                ]
            },
            "com.august.protos.ambulatory_status.AmbulatoryStatus.EvacuationAbilities": {
                "properties": {
                    "ableToFollowInstructions": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "ableToEvacuateReasonablyQuickly": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.ambulatory_status.AmbulatoryStatus.AmbulatoryCode": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "AMBULATORY_CODE_WALKS_WITHOUT_SUPPORT",
                    "AMBULATORY_CODE_WALKS_WITH_CANE",
                    "AMBULATORY_CODE_WALKS_WITH_WALKER_OR_OTHER_SUPPORT",
                    "AMBULATORY_CODE_USES_WHEELCHAIR",
                    "AMBULATORY_CODE_BEDRIDDEN_ABLE_TO_TURN",
                    "AMBULATORY_CODE_BEDRIDDEN_UNABLE_TO_TURN"
                ]
            },
            "com.august.protos.ambulatory_status.AmbulatoryStatus": {
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.AmbulatoryCode"
                    },
                    "ambulatoryResult": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.AmbulatoryResult"
                    },
                    "evacuation": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.EvacuationAbilities"
                    },
                    "safeToLeaveWithoutSupervision": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "bedStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.BedStatus"
                    },
                    "ambulatoryImport": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.AmbulatoryResult"
                    }
                },
                "required": [
                    "code",
                    "ambulatoryResult",
                    "ambulatoryImport"
                ]
            },
            "com.august.protos.date.DateAndTime": {
                "properties": {
                    "date": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "time": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Time"
                    }
                }
            },
            "com.august.protos.person.OutOfFacilityDetail": {
                "properties": {
                    "start": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "end": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.DateAndTime"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.snapshot.Polst.CPR": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CPR_ATTEMPT_RESUSCITATION",
                    "CPR_DO_NOT_ATTEMPT_RESUSCITATION"
                ]
            },
            "com.august.api.CareApp.CareAppPerson": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "dateOfBirth": {
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "careDetails": {
                        "type": "string",
                        "nullable": true
                    },
                    "cprCode": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Polst.CPR"
                    },
                    "outOfFacilityDetail": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.person.OutOfFacilityDetail"
                    },
                    "ambulatoryStatus": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus"
                    },
                    "allergiesAndIntolerances": {
                        "$ref": "#/components/schemas/com.august.protos.person.Person.AllergiesAndIntolerances"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.condition.Condition"
                        }
                    },
                    "onAlertIncidents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.incidents.Incident"
                        }
                    },
                    "admissionsInformation": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation"
                    },
                    "respiteStatus": {
                        "$ref": "#/components/schemas/com.august.protos.respite.RespiteStatus"
                    },
                    "hospiceStatus": {
                        "$ref": "#/components/schemas/com.august.protos.hospice.HospiceStatus"
                    },
                    "profilePhotoUrl": {
                        "type": "string"
                    },
                    "careGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "shiftCareGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.person.ShiftCareGroupDetails"
                        }
                    },
                    "residentStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus"
                    },
                    "dietTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "id",
                    "orgId",
                    "facilityId",
                    "name",
                    "gender",
                    "dateOfBirth",
                    "cprCode",
                    "ambulatoryStatus",
                    "allergiesAndIntolerances",
                    "conditions",
                    "onAlertIncidents",
                    "admissionsInformation",
                    "respiteStatus",
                    "hospiceStatus",
                    "profilePhotoUrl",
                    "shiftCareGroups",
                    "residentStatus",
                    "dietTypes"
                ]
            },
            "com.august.protos.timing.DayOfWeek": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DAY_OF_WEEK_MONDAY",
                    "DAY_OF_WEEK_TUESDAY",
                    "DAY_OF_WEEK_WEDNESDAY",
                    "DAY_OF_WEEK_THURSDAY",
                    "DAY_OF_WEEK_FRIDAY",
                    "DAY_OF_WEEK_SATURDAY",
                    "DAY_OF_WEEK_SUNDAY"
                ]
            },
            "com.august.protos.timing.EventTiming": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "EVENT_TIMING_MORN",
                    "EVENT_TIMING_AFT",
                    "EVENT_TIMING_EVE",
                    "EVENT_TIMING_NIGHT"
                ]
            },
            "com.august.protos.timing.TimeAndEventTiming": {
                "properties": {
                    "time": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Time"
                    },
                    "when": {
                        "$ref": "#/components/schemas/com.august.protos.timing.EventTiming"
                    },
                    "shiftId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "shift": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.shift.Shift"
                    }
                },
                "required": [
                    "when"
                ]
            },
            "com.august.protos.timing.UnitOfTime": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "UNIT_OF_TIME_SECOND",
                    "UNIT_OF_TIME_MINUTE",
                    "UNIT_OF_TIME_HOUR",
                    "UNIT_OF_TIME_DAY",
                    "UNIT_OF_TIME_WEEK",
                    "UNIT_OF_TIME_MONTH",
                    "UNIT_OF_TIME_YEAR"
                ]
            },
            "com.august.protos.timing.Timing": {
                "properties": {
                    "frequency": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "period": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "periodUnit": {
                        "$ref": "#/components/schemas/com.august.protos.timing.UnitOfTime"
                    },
                    "timeOfDay": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.timing.TimeAndEventTiming"
                        }
                    },
                    "dayOfWeek": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.timing.DayOfWeek"
                        }
                    },
                    "dayOfMonth": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "duration": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "durationUnit": {
                        "$ref": "#/components/schemas/com.august.protos.timing.UnitOfTime"
                    },
                    "boundsPeriod": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.InclusiveDatePeriod"
                    },
                    "oneTimeOnly": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "periodUnit",
                    "timeOfDay",
                    "dayOfWeek",
                    "dayOfMonth",
                    "durationUnit"
                ]
            },
            "com.august.protos.routine.RoutineSchedule": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "instructions": {
                        "type": "string",
                        "nullable": true
                    },
                    "timing": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.timing.Timing"
                    }
                }
            },
            "com.august.protos.routine.RoutineType.RoutineTypeOneof": {
                "properties": {}
            },
            "com.august.protos.routine.RoutineType": {
                "properties": {
                    "routineTypeOneof": {
                        "$ref": "#/components/schemas/com.august.protos.routine.RoutineType.RoutineTypeOneof"
                    }
                },
                "required": [
                    "routineTypeOneof"
                ]
            },
            "com.august.protos.date.InclusiveDatePeriod": {
                "properties": {
                    "startDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "endDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    }
                }
            },
            "com.august.protos.routine.RoutineStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ROUTINE_STATUS_DRAFT",
                    "ROUTINE_STATUS_ACTIVE",
                    "ROUTINE_STATUS_DISCONTINUED",
                    "ROUTINE_STATUS_DISCARDED"
                ]
            },
            "com.august.protos.routine.RoutineOrder": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "instructions": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.routine.RoutineStatus"
                    },
                    "categoryKey": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.PlanCategoryKey"
                    },
                    "customKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "approvedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "discontinuedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "effectivePeriod": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.InclusiveDatePeriod"
                    },
                    "routineOrderGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "replacesId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "routineType": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.routine.RoutineType"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineSchedule"
                        }
                    }
                },
                "required": [
                    "name",
                    "instructions",
                    "status",
                    "categoryKey",
                    "schedules"
                ]
            },
            "com.august.protos.routine_administration.PrnCategory": {
                "properties": {
                    "prnCategoryKey": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.PlanCategoryKey"
                    },
                    "customKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "categoryName": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "prnCategoryKey"
                ]
            },
            "com.august.api.CareApp.CareAppRoutineAdministration.SecondParts": {
                "properties": {
                    "prnCategory": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.PrnCategory"
                    },
                    "isTwoPerson": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.routine_administration.RoutineAdministrationEvent.Event": {
                "properties": {}
            },
            "com.august.protos.routine_administration.RoutineAdministrationEventSource": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ROUTINE_ADMINISTRATION_EVENT_SOURCE_CARE_TRACK",
                    "ROUTINE_ADMINISTRATION_EVENT_SOURCE_PROGRESS_VIEW"
                ]
            },
            "com.august.protos.routine_administration.RoutineAdministrationEvent": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "parentId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "occurredAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "source": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEventSource"
                    },
                    "event": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEvent.Event"
                    }
                },
                "required": [
                    "id",
                    "source",
                    "event"
                ]
            },
            "com.august.models.ShiftOccurrenceReference": {
                "properties": {
                    "shiftId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "shiftId",
                    "date"
                ]
            },
            "com.august.protos.annotation.UserReference": {
                "properties": {
                    "userId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "userName": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    }
                }
            },
            "com.august.protos.routine_administration.RoutineAdministrationStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ROUTINE_ADMINISTRATION_STATUS_ADMINISTERED",
                    "ROUTINE_ADMINISTRATION_STATUS_EXCEPTION",
                    "ROUTINE_ADMINISTRATION_STATUS_ENTERED_IN_ERROR",
                    "ROUTINE_ADMINISTRATION_STATUS_ON_HOLD"
                ]
            },
            "com.august.protos.routine_administration.RoutineAdministrationExceptionReason": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ROUTINE_ADMINISTRATION_EXCEPTION_REASON_RESIDENT_UNAVAILABLE",
                    "ROUTINE_ADMINISTRATION_EXCEPTION_REASON_NOT_ENOUGH_TIME",
                    "ROUTINE_ADMINISTRATION_EXCEPTION_REASON_RESIDENT_REFUSED",
                    "ROUTINE_ADMINISTRATION_EXCEPTION_REASON_RESCHEDULE_REQUESTED"
                ]
            },
            "com.august.api.CareApp.CareAppRoutineAdministration.FirstParts": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "orderName": {
                        "type": "string",
                        "nullable": true
                    },
                    "reasonForException": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationExceptionReason"
                    },
                    "effortLevel": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "routineOrderId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "routineOrderGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "status": {
                        "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationStatus"
                    },
                    "occurredAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "recordedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "beginScheduledTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-08-22T06:00"
                    },
                    "endScheduledTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-08-22T06:00"
                    },
                    "beginAdministrationWindow": {
                        "nullable": true,
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-08-22T06:00"
                    },
                    "endAdministrationWindow": {
                        "nullable": true,
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-08-22T06:00"
                    },
                    "performer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.annotation.UserReference"
                    },
                    "scheduleId": {
                        "nullable": true,
                        "type": "string",
                        "format": "uuid"
                    },
                    "shiftId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "shiftOccurrence": {
                        "$ref": "#/components/schemas/com.august.models.ShiftOccurrenceReference"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine_administration.RoutineAdministrationEvent"
                        }
                    },
                    "isPrn": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "personId",
                    "status",
                    "shiftId",
                    "isActive",
                    "shiftOccurrence",
                    "events"
                ]
            },
            "com.august.api.CareApp.CareAppRoutineAdministration": {
                "properties": {
                    "firstParts": {
                        "$ref": "#/components/schemas/com.august.api.CareApp.CareAppRoutineAdministration.FirstParts"
                    },
                    "secondParts": {
                        "$ref": "#/components/schemas/com.august.api.CareApp.CareAppRoutineAdministration.SecondParts"
                    }
                },
                "required": [
                    "firstParts",
                    "secondParts"
                ]
            },
            "com.august.api.CareApp.CareAppPayload": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "routineAdministrations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppRoutineAdministration"
                        }
                    },
                    "routineOrders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.routine.RoutineOrder"
                        }
                    },
                    "people": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppPerson"
                        }
                    },
                    "careGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.care_group.CareGroup"
                        }
                    },
                    "signOffs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.ShiftOccurrenceSignOff"
                        }
                    },
                    "prnAdministrationTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppPrnAdministrationTemplate"
                        }
                    },
                    "observations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.ApiCareObservation"
                        }
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "routineAdministrations",
                    "routineOrders",
                    "people",
                    "careGroups",
                    "signOffs",
                    "prnAdministrationTemplates",
                    "observations"
                ]
            },
            "com.august.protos.date.Clock": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CLOCK_12_HOUR",
                    "CLOCK_24_HOUR"
                ]
            },
            "com.august.protos.settings.mar_settings.MarSettings.MarTimeFormat": {
                "properties": {
                    "clock": {
                        "$ref": "#/components/schemas/com.august.protos.date.Clock"
                    }
                },
                "required": [
                    "clock"
                ]
            },
            "com.august.protos.settings.mar_settings.MarSettings": {
                "properties": {
                    "timeFormat": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.mar_settings.MarSettings.MarTimeFormat"
                    }
                }
            },
            "com.august.protos.ambulatory_status.AmbulatoryStatus.AmbulatoryResult": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "AMBULATORY_RESULT_AMBULATORY",
                    "AMBULATORY_RESULT_BEDRIDDEN",
                    "AMBULATORY_RESULT_NON_AMBULATORY",
                    "AMBULATORY_RESULT_SEMI_AMBULATORY"
                ]
            },
            "com.august.protos.settings.ambulatory_settings.AmbulatoryStatusSettings": {
                "properties": {
                    "ambulatoryStatus": {
                        "$ref": "#/components/schemas/com.august.protos.ambulatory_status.AmbulatoryStatus.AmbulatoryResult"
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "ambulatoryStatus"
                ]
            },
            "com.august.protos.settings.ambulatory_settings.AmbulatorySettings": {
                "properties": {
                    "ambulatoryStatusSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.ambulatory_settings.AmbulatoryStatusSettings"
                        }
                    }
                },
                "required": [
                    "ambulatoryStatusSettings"
                ]
            },
            "com.august.api.CareApp.CareAppShift": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdBy": {
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "period": {
                        "$ref": "#/components/schemas/com.august.protos.date.TimePeriod"
                    },
                    "signOffPeriod": {
                        "$ref": "#/components/schemas/com.august.protos.date.TimePeriod"
                    }
                },
                "required": [
                    "id",
                    "facilityId",
                    "name",
                    "createdBy",
                    "updatedBy",
                    "period",
                    "signOffPeriod"
                ]
            },
            "com.august.protos.facility.BillingSettings": {
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    },
                    "goLiveDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "isActive"
                ]
            },
            "com.august.protos.facility.CareAppChartingType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CARE_APP_CHARTING_TYPE_BY_EXCEPTION",
                    "CARE_APP_CHARTING_TYPE_EVERYTHING"
                ]
            },
            "com.august.protos.facility.CareAppSettings": {
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    },
                    "goLiveDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "chartingType": {
                        "$ref": "#/components/schemas/com.august.protos.facility.CareAppChartingType"
                    },
                    "chartCompletionWithNotes": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "isActive",
                    "chartingType",
                    "chartCompletionWithNotes"
                ]
            },
            "com.august.protos.date.Time": {
                "properties": {
                    "hour": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "minute": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.date.TimePeriod": {
                "properties": {
                    "startTime": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Time"
                    },
                    "endTime": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Time"
                    }
                }
            },
            "com.august.protos.shift.Shift": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "period": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.TimePeriod"
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                }
            },
            "com.august.protos.facility.EmarSettings": {
                "properties": {
                    "isActive": {
                        "type": "boolean"
                    },
                    "usesStrictTiming": {
                        "type": "boolean"
                    },
                    "goLiveMedPassDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "controlledCount": {
                        "type": "boolean"
                    },
                    "usePin": {
                        "type": "boolean"
                    },
                    "scheduleFiveRequiresCount": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "isActive",
                    "usesStrictTiming",
                    "controlledCount",
                    "usePin",
                    "scheduleFiveRequiresCount"
                ]
            },
            "com.august.protos.facility.ExternalFields": {
                "properties": {
                    "yardiFacilityId": {
                        "type": "string",
                        "nullable": true
                    },
                    "yardiExtRefId": {
                        "type": "string",
                        "nullable": true
                    },
                    "caregroveCommunityId": {
                        "type": "string",
                        "nullable": true
                    },
                    "rainforestMerchantId": {
                        "type": "string",
                        "nullable": true
                    },
                    "rainforestMerchantApplicationId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.facility.StateIncidentReportInfo": {
                "properties": {
                    "infoUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "isProjectable": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.modification.Modification": {
                "properties": {
                    "modifiedByUserId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedByUserName": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "modificationTime": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "com.august.protos.api.med_group.MedGroup": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    },
                    "updatedBy": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.modification.Modification"
                    }
                }
            },
            "com.august.protos.care_group.CareGroup": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.payment.PaymentProduct": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PAYMENT_PRODUCT_MOVE_IN",
                    "PAYMENT_PRODUCT_BOARD_AND_CARE",
                    "PAYMENT_PRODUCT_PLATFORM"
                ]
            },
            "com.august.protos.date.Date": {
                "properties": {
                    "year": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "month": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "day": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.payment.PaymentSubscription": {
                "properties": {
                    "startDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    },
                    "product": {
                        "$ref": "#/components/schemas/com.august.protos.payment.PaymentProduct"
                    },
                    "unitAmount": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "unitCount": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "stripeProductId": {
                        "type": "string",
                        "nullable": true
                    },
                    "stripePriceId": {
                        "type": "string",
                        "nullable": true
                    },
                    "stripeSubscriptionId": {
                        "type": "string",
                        "nullable": true
                    },
                    "endDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.date.Date"
                    }
                },
                "required": [
                    "product"
                ]
            },
            "com.august.protos.facility.FacilityStatistics": {
                "properties": {
                    "residentCount": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "maxOccupancy": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "prospectCount": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "inboxCount": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.facility.Ombudsman": {
                "properties": {
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    }
                },
                "required": [
                    "telecom"
                ]
            },
            "com.august.protos.facility.Facility": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "legalName": {
                        "type": "string",
                        "nullable": true
                    },
                    "longName": {
                        "type": "string",
                        "nullable": true
                    },
                    "orgId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "address": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.address.Address"
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "ombudsman": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.Ombudsman"
                    },
                    "stateLicenseNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "statistics": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.FacilityStatistics"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.task.TaskDefinition"
                        }
                    },
                    "hellosignTestMode": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "paymentSubscription": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.payment.PaymentSubscription"
                    },
                    "isActive": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "timeZone": {
                        "type": "string",
                        "nullable": true
                    },
                    "careGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.care_group.CareGroup"
                        }
                    },
                    "medGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.api.med_group.MedGroup"
                        }
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/CustomFacilityField"
                        }
                    },
                    "stateIncidentReportInfo": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.StateIncidentReportInfo"
                    },
                    "externalFields": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.ExternalFields"
                    },
                    "emarSettings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.EmarSettings"
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.shift.Shift"
                        }
                    },
                    "hasActivePharmacyIntegration": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "hasActiveRefillEnabledPharmacyIntegration": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "careAppSettings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.CareAppSettings"
                    },
                    "billingSettings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.facility.BillingSettings"
                    }
                },
                "required": [
                    "telecom",
                    "taskDefinitions",
                    "careGroups",
                    "medGroups",
                    "customFields",
                    "shifts"
                ]
            },
            "com.august.api.CareApp.FaciltyWithSettings": {
                "properties": {
                    "facility": {
                        "$ref": "#/components/schemas/com.august.protos.facility.Facility"
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.CareAppShift"
                        }
                    },
                    "ambulatorySettings": {
                        "$ref": "#/components/schemas/com.august.protos.settings.ambulatory_settings.AmbulatorySettings"
                    },
                    "marSettings": {
                        "$ref": "#/components/schemas/com.august.protos.settings.mar_settings.MarSettings"
                    }
                },
                "required": [
                    "facility",
                    "shifts",
                    "ambulatorySettings",
                    "marSettings"
                ]
            },
            "com.august.protos.organization.Organization.ExternalFields": {
                "properties": {
                    "caregroveSubdomain": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.organization.SupersetDashboard": {
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "label": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.task.TaskCreationEvent": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TASK_CREATION_EVENT_PROSPECT_CREATED",
                    "TASK_CREATION_EVENT_RESIDENT_CREATED"
                ]
            },
            "com.august.protos.task.StateMachineType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "STATE_MACHINE_TYPE_SHAREABLE_AND_SIGNABLE",
                    "STATE_MACHINE_TYPE_SHAREABLE_NOT_SIGNABLE",
                    "STATE_MACHINE_TYPE_SIGNABLE_NOT_SHAREABLE",
                    "STATE_MACHINE_TYPE_NOT_SHAREABLE_NOR_SIGNABLE",
                    "STATE_MACHINE_TYPE_FILLABLE_PDF",
                    "STATE_MACHINE_TYPE_SHAREABLE_FILLABLE_PDF",
                    "STATE_MACHINE_TYPE_SHAREABLE_AND_SIGNABLE_NO_REVIEW",
                    "STATE_MACHINE_TYPE_SHAREABLE_FILLABLE_PDF_NO_REVIEW"
                ]
            },
            "com.august.protos.snapshot.DataType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DATA_TYPE_CA_FORM_601",
                    "DATA_TYPE_CA_FORM_603",
                    "DATA_TYPE_CA_CONSENT_FORMS",
                    "DATA_TYPE_CA_FORM_603A",
                    "DATA_TYPE_CUSTOM_SIGNABLE_FORM",
                    "DATA_TYPE_VA_UAI",
                    "DATA_TYPE_NY_FORM_4397B",
                    "DATA_TYPE_GETTING_TO_KNOW_YOU",
                    "DATA_TYPE_GETTING_TO_KNOW_YOU_V2",
                    "DATA_TYPE_LEVEL_OF_CARE_CIMINO",
                    "DATA_TYPE_MIGRATION_SOURCE",
                    "DATA_TYPE_AUGUST_INITIAL_APPRAISAL",
                    "DATA_TYPE_SERVICE_PLAN",
                    "DATA_TYPE_CA_FORM_602",
                    "DATA_TYPE_POLST",
                    "DATA_TYPE_PRN_AUTHORIZATION",
                    "DATA_TYPE_OTHER_UPLOAD",
                    "DATA_TYPE_MEDICAL_RECORD",
                    "DATA_TYPE_INSURANCE_CARD",
                    "DATA_TYPE_DIRECTIVE",
                    "DATA_TYPE_IMMUNIZATION_RECORD",
                    "DATA_TYPE_NURSE_DELEGATION",
                    "DATA_TYPE_ANNUAL_MEDICAL_EVALUATION",
                    "DATA_TYPE_ADMISSIONS_AGREEMENT",
                    "DATA_TYPE_PROFILE_PHOTO",
                    "DATA_TYPE_RESIZED_PROFILE_PHOTO",
                    "DATA_TYPE_INCIDENT_ATTACHMENT",
                    "DATA_TYPE_INCIDENT_REPORT"
                ]
            },
            "com.august.protos.task.TaskType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TASK_TYPE_CA_FORM_601",
                    "TASK_TYPE_CA_FORM_603",
                    "TASK_TYPE_CA_FORM_603A",
                    "TASK_TYPE_ADMISSIONS_AGREEMENT",
                    "TASK_TYPE_CA_CONSENT_FORMS",
                    "TASK_TYPE_LEVEL_OF_CARE",
                    "TASK_TYPE_CA_FORM_602",
                    "TASK_TYPE_GETTING_TO_KNOW_YOU",
                    "TASK_TYPE_POLST",
                    "TASK_TYPE_DIRECTIVE",
                    "TASK_TYPE_MEDICAL_RECORD",
                    "TASK_TYPE_INSURANCE_CARD",
                    "TASK_TYPE_OTHER_UPLOAD",
                    "TASK_TYPE_CUSTOM_SIGNABLE_FORM",
                    "TASK_TYPE_AUGUST_INITIAL_APPRAISAL",
                    "TASK_TYPE_SERVICE_PLAN",
                    "TASK_TYPE_PRN_AUTHORIZATION",
                    "TASK_TYPE_NURSE_DELEGATION",
                    "TASK_TYPE_GETTING_TO_KNOW_YOU_V2",
                    "TASK_TYPE_IMMUNIZATION_RECORD",
                    "TASK_TYPE_VA_UAI",
                    "TASK_TYPE_ANNUAL_MEDICAL_EVALUATION",
                    "TASK_TYPE_NY_FORM_4397B"
                ]
            },
            "com.august.protos.task.TaskTemplateInfo": {
                "properties": {
                    "taskType": {
                        "$ref": "#/components/schemas/com.august.protos.task.TaskType"
                    },
                    "customType": {
                        "type": "string",
                        "nullable": true
                    },
                    "dataType": {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.DataType"
                    },
                    "stateMachineType": {
                        "$ref": "#/components/schemas/com.august.protos.task.StateMachineType"
                    },
                    "isUpload": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "isFile": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "isShareable": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "displayName": {
                        "type": "string",
                        "nullable": true
                    },
                    "shortName": {
                        "type": "string",
                        "nullable": true
                    },
                    "descriptionCopy": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "taskType",
                    "dataType",
                    "stateMachineType"
                ]
            },
            "com.august.protos.task.TaskDefinition": {
                "properties": {
                    "template": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.task.TaskTemplateInfo"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.task.TaskCreationEvent"
                        }
                    }
                },
                "required": [
                    "events"
                ]
            },
            "com.august.protos.payment.PaymentFrequency": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PAYMENT_FREQUENCY_1_MONTH",
                    "PAYMENT_FREQUENCY_1_YEAR"
                ]
            },
            "com.august.protos.payment.PaymentBillingStrategy": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PAYMENT_BILLING_STRATEGY_PER_ORGANIZATION",
                    "PAYMENT_BILLING_STRATEGY_PER_FACILITY"
                ]
            },
            "com.august.protos.payment.PaymentCustomer": {
                "properties": {
                    "address": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.address.Address"
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "billingStrategy": {
                        "$ref": "#/components/schemas/com.august.protos.payment.PaymentBillingStrategy"
                    },
                    "paymentFrequency": {
                        "$ref": "#/components/schemas/com.august.protos.payment.PaymentFrequency"
                    },
                    "stripeCustomerId": {
                        "type": "string",
                        "nullable": true
                    },
                    "stripeSubscriptionId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "telecom",
                    "billingStrategy",
                    "paymentFrequency"
                ]
            },
            "com.august.protos.organization.Organization": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.address.Address"
                    },
                    "phone": {
                        "type": "string",
                        "nullable": true
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "paymentCustomer": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.payment.PaymentCustomer"
                    },
                    "taskDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.task.TaskDefinition"
                        }
                    },
                    "isActive": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "supersetDashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.organization.SupersetDashboard"
                        }
                    },
                    "billingSupersetDashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.organization.SupersetDashboard"
                        }
                    },
                    "externalFields": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.organization.Organization.ExternalFields"
                    }
                },
                "required": [
                    "telecom",
                    "taskDefinitions",
                    "supersetDashboards",
                    "billingSupersetDashboards"
                ]
            },
            "com.august.api.CareApp.OrganizationWithFacilities": {
                "properties": {
                    "organization": {
                        "$ref": "#/components/schemas/com.august.protos.organization.Organization"
                    },
                    "facilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.api.CareApp.FaciltyWithSettings"
                        }
                    }
                },
                "required": [
                    "organization",
                    "facilities"
                ]
            },
            "com.august.models.billing.StatementSummary": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    },
                    "invoiceAmountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "paidAmountCents": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "invoiceAmountCents",
                    "paidAmountCents"
                ]
            },
            "com.august.models.billing.PayerTransaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "transactionType": {
                        "type": "string",
                        "enum": [
                            "CREDIT",
                            "ONE_TIME",
                            "RECURRING",
                            "STATEMENT",
                            "PAYMENT"
                        ]
                    },
                    "serviceStartDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "description": {
                        "type": "string"
                    },
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "balanceCents": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "transactionType",
                    "serviceStartDate",
                    "description",
                    "amountCents",
                    "balanceCents"
                ]
            },
            "com.august.models.billing.PayerSettingsMetaData": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "contactId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdBy": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "personId",
                    "contactId",
                    "createdBy",
                    "createdAt",
                    "modifiedBy",
                    "modifiedAt"
                ]
            },
            "com.august.models.billing.PayerSettings": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.billing.ScheduledPayment": {
                "properties": {
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "paymentDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "amountCents",
                    "paymentDate"
                ]
            },
            "com.august.models.billing.PayerWithScheduledPayment": {
                "properties": {
                    "contact": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                    },
                    "paymentSettings": {
                        "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                    },
                    "scheduledPayment": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.billing.ScheduledPayment"
                    }
                },
                "required": [
                    "contact",
                    "paymentSettings"
                ]
            },
            "com.august.models.billing.PayerSettingsWithID": {
                "properties": {
                    "contactId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "payerSettings": {
                        "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                    }
                },
                "required": [
                    "contactId",
                    "payerSettings"
                ]
            },
            "com.august.models.billing.MinimalResident": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "com.august.models.billing.PayerSettingsData": {
                "properties": {
                    "autoPay": {
                        "type": "boolean"
                    },
                    "statementDelivery": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.BillingStatementMethod"
                    },
                    "paymentDayOfMonth": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "paymentMethod": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ExternalFields.RainforestPaymentMethod"
                    },
                    "paymentCap": {
                        "type": "object",
                        "properties": {
                            "capType": {
                                "type": "string",
                                "enum": [
                                    "FixedPaymentCap",
                                    "PercentagePaymentCap",
                                    "NoPaymentCap"
                                ]
                            },
                            "parameters": {
                                "type": "object",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/com.august.models.billing.FixedPaymentCap"
                                    },
                                    {
                                        "$ref": "#/components/schemas/com.august.models.billing.PercentagePaymentCap"
                                    },
                                    {
                                        "$ref": "#/components/schemas/com.august.models.billing.NoPaymentCap"
                                    }
                                ]
                            }
                        }
                    },
                    "paymentMethodType": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "ACH",
                            "CREDIT_CARD",
                            "OTHER_ACH",
                            "WIRE",
                            "CASH",
                            "CHECK",
                            "STATEMENT_ONLY",
                            "DEBIT_CARD"
                        ]
                    }
                },
                "required": [
                    "autoPay",
                    "statementDelivery",
                    "paymentCap"
                ]
            },
            "com.august.models.billing.Payer": {
                "properties": {
                    "contact": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                    },
                    "paymentSettings": {
                        "$ref": "#/components/schemas/com.august.models.billing.PayerSettingsData"
                    }
                },
                "required": [
                    "contact",
                    "paymentSettings"
                ]
            },
            "com.august.models.billing.PayerWithPerson": {
                "properties": {
                    "payer": {
                        "$ref": "#/components/schemas/com.august.models.billing.Payer"
                    },
                    "resident": {
                        "$ref": "#/components/schemas/com.august.models.billing.MinimalResident"
                    }
                },
                "required": [
                    "payer",
                    "resident"
                ]
            },
            "com.august.models.billing.PayerOnboardingList": {
                "properties": {
                    "payers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.billing.PayerWithPerson"
                        }
                    },
                    "session": {
                        "$ref": "#/components/schemas/com.august.models.billing.RainforestDashboardSession"
                    }
                },
                "required": [
                    "payers",
                    "session"
                ]
            },
            "com.august.models.billing.ReturnPaymentRequest": {
                "properties": {
                    "returnDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "addFee": {
                        "type": "boolean"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "returnDate",
                    "addFee"
                ]
            },
            "com.august.models.billing.RainforestMerchantOnboardingSession": {
                "properties": {
                    "merchantId": {
                        "type": "string"
                    },
                    "merchantApplicationId": {
                        "type": "string"
                    },
                    "sessionKey": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "merchantId",
                    "merchantApplicationId",
                    "sessionKey",
                    "expiresAt"
                ]
            },
            "com.august.models.billing.RainforestDashboardSession": {
                "properties": {
                    "merchantId": {
                        "type": "string"
                    },
                    "sessionKey": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "merchantId",
                    "sessionKey",
                    "expiresAt"
                ]
            },
            "com.august.models.billing.TriggerPaymentRequest": {
                "properties": {
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "amountCents"
                ]
            },
            "com.august.services.billing.rainforestpay.PaymentMethodConfigParameters": {
                "properties": {
                    "sessionKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "paymentMethodConfigId": {
                        "type": "string"
                    }
                },
                "required": [
                    "paymentMethodConfigId"
                ]
            },
            "com.august.models.billing.ManualPaymentEntry": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "checkNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "receivedOn": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "paymentDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "personId",
                    "amountCents"
                ]
            },
            "com.august.models.billing.ManualPaymentRequest": {
                "properties": {
                    "depositDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "paymentMethod": {
                        "type": "string",
                        "enum": [
                            "ACH",
                            "CREDIT_CARD",
                            "OTHER_ACH",
                            "WIRE",
                            "CASH",
                            "CHECK",
                            "STATEMENT_ONLY",
                            "DEBIT_CARD"
                        ]
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.billing.ManualPaymentEntry"
                        }
                    }
                },
                "required": [
                    "depositDate",
                    "paymentMethod",
                    "payments"
                ]
            },
            "com.august.protos.settings.billing_settings.ProrationStrategy": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PRORATION_STRATEGY_MONTHLY",
                    "PRORATION_STRATEGY_ANNUAL",
                    "PRORATION_STRATEGY_30_DAY"
                ]
            },
            "com.august.protos.settings.billing_settings.ApideckConsumer": {
                "properties": {
                    "consumerId": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "apiLive": {
                        "type": "boolean"
                    },
                    "liveOnDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "consumerId",
                    "serviceId",
                    "apiLive"
                ]
            },
            "com.august.protos.settings.billing_settings.SageIntacctSettings": {
                "properties": {
                    "journalSymbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "locationId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.billing_settings.GLAccount": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "code": {
                        "type": "string",
                        "nullable": true
                    },
                    "department": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.billing_settings.GLAccounts": {
                "properties": {
                    "accountsReceivable": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLAccount"
                    },
                    "cash": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLAccount"
                    },
                    "fees": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLAccount"
                    },
                    "paymentsInTransit": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLAccount"
                    },
                    "taxPayable": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLAccount"
                    }
                }
            },
            "com.august.protos.settings.billing_settings.AccountingSystem": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ACCOUNTING_SYSTEM_QBO",
                    "ACCOUNTING_SYSTEM_SAGE_INTACCT"
                ]
            },
            "com.august.protos.settings.billing_settings.DueDateSettings.Settings": {
                "properties": {}
            },
            "com.august.protos.settings.billing_settings.DueDateSettings": {
                "properties": {
                    "settings": {
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.DueDateSettings.Settings"
                    }
                },
                "required": [
                    "settings"
                ]
            },
            "com.august.protos.settings.billing_settings.GLCodes": {
                "properties": {
                    "accountsReceivable": {
                        "type": "string",
                        "nullable": true
                    },
                    "cash": {
                        "type": "string",
                        "nullable": true
                    },
                    "fees": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.billing_settings.BillingSettings": {
                "properties": {
                    "statementText": {
                        "type": "string",
                        "nullable": true
                    },
                    "checkPayableText": {
                        "type": "string",
                        "nullable": true
                    },
                    "includeNextMonthAfter": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "glCodes": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLCodes"
                    },
                    "defaultDueDate": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.DueDateSettings"
                    },
                    "accountingSystem": {
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.AccountingSystem"
                    },
                    "glAccounts": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.GLAccounts"
                    },
                    "sageIntacct": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.SageIntacctSettings"
                    },
                    "earliestPaymentDayOfMonth": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "apideck": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.ApideckConsumer"
                    },
                    "prorationStrategy": {
                        "$ref": "#/components/schemas/com.august.protos.settings.billing_settings.ProrationStrategy"
                    }
                },
                "required": [
                    "accountingSystem",
                    "prorationStrategy"
                ]
            },
            "com.august.models.billing.WriteableBillingCharge": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingChargeData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaDataWithGroup"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.billing.DetailedInvoiceItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceItemData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceItemMetaData"
                    },
                    "billingItem": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingItem"
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "billingItem"
                ]
            },
            "com.august.models.billing.AccountingPeriodClosingData": {
                "properties": {
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "closedBefore": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "facilityId",
                    "closedBefore"
                ]
            },
            "com.august.models.billing.AccountingPeriodClosing": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.AccountingPeriodClosingData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.billing.Transaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "idType": {
                        "type": "string",
                        "enum": [
                            "INVOICE_ITEM",
                            "INVOICE",
                            "BILLING_CHARGE",
                            "PAYMENT"
                        ]
                    },
                    "pending": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "serviceStartDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "serviceEndDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "description": {
                        "type": "string"
                    },
                    "transactionType": {
                        "type": "string",
                        "enum": [
                            "CREDIT",
                            "ONE_TIME",
                            "RECURRING",
                            "STATEMENT",
                            "PAYMENT"
                        ]
                    },
                    "amountCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "taxCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "taxGroups": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.tax_rate_settings.TaxRateSettings.TaxRateGroup"
                        }
                    },
                    "balanceCents": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "id",
                    "idType",
                    "pending",
                    "createdAt",
                    "serviceStartDate",
                    "description",
                    "transactionType",
                    "balanceCents"
                ]
            },
            "com.august.controllers.billing.IssueStatementsRequest": {
                "properties": {
                    "invoiceIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    }
                },
                "required": [
                    "invoiceIds"
                ]
            },
            "com.august.models.billing.WriteableInvoice": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.protos.person.ResidentStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "RESIDENT_STATUS_PROSPECT",
                    "RESIDENT_STATUS_CURRENT_RESIDENT",
                    "RESIDENT_STATUS_CLOSED",
                    "RESIDENT_STATUS_DISCHARGED",
                    "RESIDENT_STATUS_ENTERED_IN_ERROR"
                ]
            },
            "com.august.models.billing.ResidentListEntry": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "profilePictureUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "roomDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.billing.RoomDetails"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "name": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                        }
                    },
                    "residentStatus": {
                        "$ref": "#/components/schemas/com.august.protos.person.ResidentStatus"
                    },
                    "statementBalanceCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalBalanceCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastInvoice": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.billing.WriteableInvoice"
                    },
                    "pendingBillingEvents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "hidden": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "personId",
                    "gender",
                    "name",
                    "residentStatus",
                    "statementBalanceCents",
                    "totalBalanceCents",
                    "pendingBillingEvents",
                    "hidden"
                ]
            },
            "com.august.protos.contact.Contact.BillingStatementMethod": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "BILLING_STATEMENT_METHOD_PRINT",
                    "BILLING_STATEMENT_METHOD_EMAIL",
                    "BILLING_STATEMENT_METHOD_MAIL"
                ]
            },
            "com.august.protos.contact.Contact.ExternalFields.RainforestPaymentMethod.Method": {
                "properties": {}
            },
            "com.august.protos.contact.Contact.ExternalFields.RainforestPaymentMethod": {
                "properties": {
                    "paymentMethodId": {
                        "type": "string",
                        "nullable": true
                    },
                    "methodType": {
                        "type": "string",
                        "nullable": true
                    },
                    "method": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ExternalFields.RainforestPaymentMethod.Method"
                    }
                },
                "required": [
                    "method"
                ]
            },
            "com.august.protos.contact.Contact.ExternalFields.YardiFields": {
                "properties": {
                    "extRefId": {
                        "type": "string",
                        "nullable": true
                    },
                    "payer": {
                        "type": "string",
                        "nullable": true
                    },
                    "useCommunityAddress": {
                        "type": "string",
                        "nullable": true
                    },
                    "callStatus": {
                        "type": "string",
                        "nullable": true
                    },
                    "okToMail": {
                        "type": "string",
                        "nullable": true
                    },
                    "okToMassMail": {
                        "type": "string",
                        "nullable": true
                    },
                    "okToEmail": {
                        "type": "string",
                        "nullable": true
                    },
                    "consolidatedStatement": {
                        "type": "string",
                        "nullable": true
                    },
                    "secondResident": {
                        "type": "string",
                        "nullable": true
                    },
                    "defaultChargesOnEftFlag": {
                        "type": "string",
                        "nullable": true
                    },
                    "electronicStatementDelivery": {
                        "type": "string",
                        "nullable": true
                    },
                    "gender": {
                        "type": "string",
                        "nullable": true
                    },
                    "birthDate": {
                        "type": "string",
                        "nullable": true
                    },
                    "language": {
                        "type": "string",
                        "nullable": true
                    },
                    "race": {
                        "type": "string",
                        "nullable": true
                    },
                    "makeContactSharedOrGlobal": {
                        "type": "string",
                        "nullable": true
                    },
                    "primaryPayer": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.contact.Contact.ExternalFields": {
                "properties": {
                    "yardi": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ExternalFields.YardiFields"
                    },
                    "caregrovePayerId": {
                        "type": "string",
                        "nullable": true
                    },
                    "caregrovePayerName": {
                        "type": "string",
                        "nullable": true
                    },
                    "rainforestPaymentMethod": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ExternalFields.RainforestPaymentMethod"
                    }
                }
            },
            "com.august.protos.contact.Contact.ParentObjectType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PARENT_OBJECT_TYPE_ORG",
                    "PARENT_OBJECT_TYPE_FACILITY",
                    "PARENT_OBJECT_TYPE_PERSON"
                ]
            },
            "com.august.protos.contact.Contact.ParentObject": {
                "properties": {
                    "objectType": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ParentObjectType"
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                },
                "required": [
                    "objectType"
                ]
            },
            "com.august.protos.generic_organization.GenericOrganization.OrganizationContact": {
                "properties": {
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "address": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.address.Address"
                    }
                },
                "required": [
                    "telecom"
                ]
            },
            "com.august.protos.generic_organization.GenericOrganization": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "address": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.address.Address"
                        }
                    },
                    "contact": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.generic_organization.GenericOrganization.OrganizationContact"
                        }
                    }
                },
                "required": [
                    "telecom",
                    "address",
                    "contact"
                ]
            },
            "com.august.protos.address.Address.AddressUse": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ADDRESS_USE_HOME",
                    "ADDRESS_USE_WORK",
                    "ADDRESS_USE_TEMP",
                    "ADDRESS_USE_OLD",
                    "ADDRESS_USE_BILLING"
                ]
            },
            "com.august.protos.address.Address": {
                "properties": {
                    "use": {
                        "$ref": "#/components/schemas/com.august.protos.address.Address.AddressUse"
                    },
                    "text": {
                        "type": "string",
                        "nullable": true
                    },
                    "line": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "city": {
                        "type": "string",
                        "nullable": true
                    },
                    "state": {
                        "type": "string",
                        "nullable": true
                    },
                    "postalCode": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "use",
                    "line"
                ]
            },
            "com.august.protos.contact_point.ContactPoint.ContactPointUse": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CONTACT_POINT_USE_HOME",
                    "CONTACT_POINT_USE_WORK",
                    "CONTACT_POINT_USE_MOBILE",
                    "CONTACT_POINT_USE_PAGER",
                    "CONTACT_POINT_USE_EMERGENCY"
                ]
            },
            "com.august.protos.contact_point.ContactPoint.ContactPointSystem": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CONTACT_POINT_SYSTEM_PHONE",
                    "CONTACT_POINT_SYSTEM_FAX",
                    "CONTACT_POINT_SYSTEM_EMAIL"
                ]
            },
            "com.august.protos.contact_point.ContactPoint": {
                "properties": {
                    "system": {
                        "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint.ContactPointSystem"
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    },
                    "use": {
                        "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint.ContactPointUse"
                    },
                    "rank": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "required": [
                    "system",
                    "use"
                ]
            },
            "com.august.protos.contact.Contact.ContactRelationship": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CONTACT_RELATIONSHIP_PERSONAL",
                    "CONTACT_RELATIONSHIP_FAMMEMB",
                    "CONTACT_RELATIONSHIP_CHILD",
                    "CONTACT_RELATIONSHIP_GRNDCHILD",
                    "CONTACT_RELATIONSHIP_SPS",
                    "CONTACT_RELATIONSHIP_SIB",
                    "CONTACT_RELATIONSHIP_NIENEPH",
                    "CONTACT_RELATIONSHIP_GRNIENEPH",
                    "CONTACT_RELATIONSHIP_COUSN",
                    "CONTACT_RELATIONSHIP_FRND",
                    "CONTACT_RELATIONSHIP_CHILD_INLAW",
                    "CONTACT_RELATIONSHIP_CLINICIAN",
                    "CONTACT_RELATIONSHIP_PHYSICIAN",
                    "CONTACT_RELATIONSHIP_NURSE_PRACTITIONER",
                    "CONTACT_RELATIONSHIP_PHYSICIAN_ASSISTANT",
                    "CONTACT_RELATIONSHIP_PHARMACIST",
                    "CONTACT_RELATIONSHIP_NURSE",
                    "CONTACT_RELATIONSHIP_SKILLED_THERAPIST",
                    "CONTACT_RELATIONSHIP_PSYCHOLOGIST",
                    "CONTACT_RELATIONSHIP_DIETICIAN",
                    "CONTACT_RELATIONSHIP_SOCIAL_WORKER",
                    "CONTACT_RELATIONSHIP_DENTIST",
                    "CONTACT_RELATIONSHIP_PODIATRIST",
                    "CONTACT_RELATIONSHIP_PROFESSIONAL",
                    "CONTACT_RELATIONSHIP_REFERRAL_AGENT",
                    "CONTACT_RELATIONSHIP_PLACEMENT_AGENT",
                    "CONTACT_RELATIONSHIP_CONSERVATOR",
                    "CONTACT_RELATIONSHIP_LEGALLY_RESPONSIBLE",
                    "CONTACT_RELATIONSHIP_CASE_MANAGER",
                    "CONTACT_RELATIONSHIP_RELIGIOUS_ADVISOR",
                    "CONTACT_RELATIONSHIP_THIRD_PARTY_PAYER",
                    "CONTACT_RELATIONSHIP_FIDUCIARY",
                    "CONTACT_RELATIONSHIP_FUNERAL_HOME",
                    "CONTACT_RELATIONSHIP_GENERAL_PRACTITIONER",
                    "CONTACT_RELATIONSHIP_MENTAL_HEALTH_PROVIDER",
                    "CONTACT_RELATIONSHIP_HOSPICE_PROVIDER",
                    "CONTACT_RELATIONSHIP_RESPONSIBLE_PERSON",
                    "CONTACT_RELATIONSHIP_FINANCIAL_PAYMENT_OF_CARE",
                    "CONTACT_RELATIONSHIP_FINANCIAL_POWER_OF_ATTORNEY",
                    "CONTACT_RELATIONSHIP_MEDICAL_POWER_OF_ATTORNEY",
                    "CONTACT_RELATIONSHIP_C",
                    "CONTACT_RELATIONSHIP_RELEASE_OF_INFORMATION",
                    "CONTACT_RELATIONSHIP_PERSONAL_PROPERTY",
                    "CONTACT_RELATIONSHIP_OTHER",
                    "CONTACT_RELATIONSHIP_SELF",
                    "CONTACT_RELATIONSHIP_N"
                ]
            },
            "com.august.protos.contact.Contact": {
                "properties": {
                    "relationship": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact.Contact.ContactRelationship"
                        }
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "telecom": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact_point.ContactPoint"
                        }
                    },
                    "address": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.address.Address"
                    },
                    "organization": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.generic_organization.GenericOrganization"
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "clinicalSpecialty": {
                        "type": "string",
                        "nullable": true
                    },
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "parent": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ParentObject"
                    },
                    "externalInvoiceId": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalFields": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.ExternalFields"
                    },
                    "billingStatementMethod": {
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact.BillingStatementMethod"
                    }
                },
                "required": [
                    "relationship",
                    "telecom",
                    "billingStatementMethod"
                ]
            },
            "com.august.models.billing.RoomDetails": {
                "properties": {
                    "roomNumber": {
                        "type": "string"
                    },
                    "bedNumber": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "roomNumber"
                ]
            },
            "com.august.models.billing.ResidentSummary": {
                "properties": {
                    "name": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                        }
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "levelOfCare": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCare"
                    },
                    "roomDetails": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.models.billing.RoomDetails"
                    },
                    "roomCapacity": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "moveInDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "financialStartDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "moveOutDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "financialEndDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "monthlyRecurringCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "payers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                        }
                    },
                    "responsibleParty": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.contact.Contact"
                    },
                    "statementBalanceCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalBalanceCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "statementDueDay": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "earliestPaymentDayOfMonth": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "lastStatementStatus": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "NEEDS_WORK",
                            "ERROR",
                            "PENDING",
                            "PAID",
                            "DUE",
                            "APPROVED"
                        ]
                    },
                    "canUseRainforest": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "admissionType",
                    "monthlyRecurringCents",
                    "payers",
                    "statementBalanceCents",
                    "totalBalanceCents",
                    "statementDueDay",
                    "earliestPaymentDayOfMonth",
                    "canUseRainforest"
                ]
            },
            "com.august.models.billing.NeedsWorkData": {
                "properties": {
                    "note": {
                        "type": "string"
                    }
                },
                "required": [
                    "note"
                ]
            },
            "com.august.models.billing.ApprovalData": {
                "properties": {
                    "note": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.models.billing.DisplayEvent": {
                "properties": {
                    "eventData": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceEvent[Any,Any]"
                    },
                    "userName": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    }
                },
                "required": [
                    "eventData",
                    "userName"
                ]
            },
            "com.august.models.billing.InvoiceItemMetaData": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "deletedById": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "deletesId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdById",
                    "createdAt",
                    "modifiedById",
                    "modifiedAt"
                ]
            },
            "com.august.models.billing.InvoiceItemData": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "billingItemId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "billingChargeId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "invoiceId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "description": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "taxCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "taxGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.tax_rate_settings.TaxRateSettings.TaxRateGroup"
                        }
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "postDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "personId",
                    "billingItemId",
                    "description",
                    "quantity",
                    "amountCents",
                    "taxCents",
                    "taxGroups",
                    "startDate",
                    "postDate"
                ]
            },
            "com.august.models.billing.WriteableInvoiceItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceItemData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceItemMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.billing.DetailedInvoice": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    },
                    "invoiceAmountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "invoiceItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.billing.WriteableInvoiceItem"
                        }
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.billing.DisplayEvent"
                        }
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "invoiceAmountCents",
                    "invoiceItems",
                    "events"
                ]
            },
            "com.august.controllers.billing.GenerateStatementRequest": {
                "properties": {
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.gender.Gender": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "GENDER_NON_BINARY",
                    "GENDER_FEMALE",
                    "GENDER_MALE"
                ]
            },
            "com.august.models.billing.PersonSummary": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                        }
                    },
                    "gender": {
                        "$ref": "#/components/schemas/com.august.protos.gender.Gender"
                    },
                    "bed": {
                        "type": "string",
                        "nullable": true
                    },
                    "profilePhotoUrl": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "id",
                    "name",
                    "gender"
                ]
            },
            "com.august.models.billing.InvoiceEvent[Any,Any]": {
                "properties": {}
            },
            "com.august.models.billing.InvoiceData": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "issueDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "dueDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "NEEDS_WORK",
                            "ERROR",
                            "PENDING",
                            "PAID",
                            "DUE",
                            "APPROVED"
                        ]
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.billing.InvoiceEvent[Any,Any]"
                        }
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "rollOverBalanceCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "fileMetaData": {
                        "type": "collection.immutable.map[long,com.august.protos.snapshot.filemetadata]"
                    }
                },
                "required": [
                    "personId",
                    "startDate",
                    "endDate",
                    "status",
                    "events",
                    "fileMetaData"
                ]
            },
            "com.august.models.billing.InvoiceSummary": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "invoiceData": {
                        "$ref": "#/components/schemas/com.august.models.billing.InvoiceData"
                    },
                    "invoiceAmountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "person": {
                        "$ref": "#/components/schemas/com.august.models.billing.PersonSummary"
                    }
                },
                "required": [
                    "id",
                    "invoiceData",
                    "invoiceAmountCents",
                    "person"
                ]
            },
            "com.august.controllers.billing.GenerateInvoicesRequest": {
                "properties": {
                    "people": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "long",
                            "example": "1"
                        }
                    },
                    "startDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "people"
                ]
            },
            "com.august.models.MetaDataWithGroup": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "groupId": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdById",
                    "createdAt",
                    "modifiedById",
                    "modifiedAt",
                    "groupId"
                ]
            },
            "com.august.models.billing.BillingCharge": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingChargeData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaDataWithGroup"
                    },
                    "item": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingItem"
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "item"
                ]
            },
            "com.august.models.billing.BillingChargeData": {
                "properties": {
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "itemId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amountCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "taxCents": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "taxGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.tax_rate_settings.TaxRateSettings.TaxRateGroup"
                        }
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "endDate": {
                        "nullable": true,
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    }
                },
                "required": [
                    "personId",
                    "itemId",
                    "name",
                    "quantity",
                    "amountCents",
                    "taxCents",
                    "taxGroups",
                    "startDate"
                ]
            },
            "com.august.models.billing.WriteableBillingItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingItemData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.billing.BillingCategoryItems": {
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingCategory"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.models.billing.WriteableBillingItem"
                        }
                    }
                },
                "required": [
                    "category",
                    "items"
                ]
            },
            "com.august.models.billing.BillingItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingItemData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    },
                    "category": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingCategory"
                    }
                },
                "required": [
                    "data",
                    "meta",
                    "category"
                ]
            },
            "com.august.protos.settings.tax_rate_settings.TaxRateSettings.TaxRateGroup": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TAX_RATE_GROUP_HST",
                    "TAX_RATE_GROUP_TESTING"
                ]
            },
            "com.august.models.billing.BillingItemData": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "categoryId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string"
                    },
                    "amountCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "frequency": {
                        "type": "string",
                        "enum": [
                            "ONE_TIME",
                            "DAILY",
                            "MONTHLY"
                        ]
                    },
                    "glCode": {
                        "type": "string"
                    },
                    "taxGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.tax_rate_settings.TaxRateSettings.TaxRateGroup"
                        }
                    },
                    "designatedUse": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "RETURN_FEE"
                        ]
                    },
                    "exportAs": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "SUMMARIZED",
                            "DETAILED"
                        ]
                    },
                    "overriddenFields": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "parentId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "parentTaxGroups": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.tax_rate_settings.TaxRateSettings.TaxRateGroup"
                        }
                    },
                    "parentAmountCents": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "parentIsActive": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "parentFrequency": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "parentGlCode": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "orgId",
                    "categoryId",
                    "name",
                    "frequency",
                    "glCode",
                    "taxGroups"
                ]
            },
            "com.august.models.MetaData[Long]": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedById": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdById",
                    "createdAt",
                    "modifiedById",
                    "modifiedAt"
                ]
            },
            "com.august.models.billing.BillingCategory": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.BillingCategoryData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData[Long]"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.billing.BillingCategoryData": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "name"
                ]
            },
            "com.august.models.ResidentRealignmentPreview": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "roomNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "hasAssessment": {
                        "type": "boolean"
                    },
                    "settingsChanged": {
                        "type": "boolean"
                    },
                    "dataLoss": {
                        "type": "boolean"
                    },
                    "locUpdated": {
                        "type": "boolean"
                    },
                    "prevLevelOfCare": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCare"
                    },
                    "newLevelOfCare": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCare"
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "personId",
                    "name",
                    "admissionType",
                    "hasAssessment",
                    "settingsChanged",
                    "dataLoss",
                    "locUpdated"
                ]
            },
            "com.august.protos.custom_field.AugustFieldType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "AUGUST_FIELD_TYPE_IS_SINGLE_ROOM",
                    "AUGUST_FIELD_TYPE_IS_DOUBLE_ROOM",
                    "AUGUST_FIELD_TYPE_NAME",
                    "AUGUST_FIELD_TYPE_DATE_OF_BIRTH",
                    "AUGUST_FIELD_TYPE_PRIMARY_LANGUAGE",
                    "AUGUST_FIELD_TYPE_CARE_GROUP",
                    "AUGUST_FIELD_TYPE_AGE",
                    "AUGUST_FIELD_TYPE_GENDER",
                    "AUGUST_FIELD_TYPE_GENDER_SHORT",
                    "AUGUST_FIELD_TYPE_GENDER_IS_MALE",
                    "AUGUST_FIELD_TYPE_GENDER_IS_FEMALE",
                    "AUGUST_FIELD_TYPE_FIRST_NAME",
                    "AUGUST_FIELD_TYPE_LAST_NAME",
                    "AUGUST_FIELD_TYPE_RESIDENT_PRIOR_ADDRESS",
                    "AUGUST_FIELD_TYPE_RELIGIOUS_PREFERENCE",
                    "AUGUST_FIELD_TYPE_OCCUPATION",
                    "AUGUST_FIELD_TYPE_MARITAL_STATUS",
                    "AUGUST_FIELD_TYPE_OTHER_LANGUAGES",
                    "AUGUST_FIELD_TYPE_EMAIL",
                    "AUGUST_FIELD_TYPE_PHONE",
                    "AUGUST_FIELD_TYPE_MAIDEN_NAME",
                    "AUGUST_FIELD_TYPE_ALLERGIES",
                    "AUGUST_FIELD_TYPE_AMBULATORY_STATUS",
                    "AUGUST_FIELD_TYPE_DEMENTIA",
                    "AUGUST_FIELD_TYPE_HAS_DEMENTIA",
                    "AUGUST_FIELD_TYPE_ON_HOSPICE",
                    "AUGUST_FIELD_TYPE_IS_RESPITE",
                    "AUGUST_FIELD_TYPE_DNR",
                    "AUGUST_FIELD_TYPE_CONDITION",
                    "AUGUST_FIELD_TYPE_LATEST_VITAL_WEIGHT",
                    "AUGUST_FIELD_TYPE_ADMISSION_TYPE",
                    "AUGUST_FIELD_TYPE_START_DATE",
                    "AUGUST_FIELD_TYPE_START_DAY",
                    "AUGUST_FIELD_TYPE_START_MONTH_NUM",
                    "AUGUST_FIELD_TYPE_START_MONTH_NAME",
                    "AUGUST_FIELD_TYPE_START_YEAR",
                    "AUGUST_FIELD_TYPE_START_YEAR_DECADE",
                    "AUGUST_FIELD_TYPE_ROOM_NAME",
                    "AUGUST_FIELD_TYPE_INITIAL_RENT",
                    "AUGUST_FIELD_TYPE_INITIAL_RENT_TXT",
                    "AUGUST_FIELD_TYPE_MOVE_OUT_DATE",
                    "AUGUST_FIELD_TYPE_FINANCIAL_START_DATE",
                    "AUGUST_FIELD_TYPE_FINANCIAL_MOVE_OUT_DATE",
                    "AUGUST_FIELD_TYPE_FUTURE_DATE_10_YEARS",
                    "AUGUST_FIELD_TYPE_DIETARY_RESTRICTIONS",
                    "AUGUST_FIELD_TYPE_RP_NAME",
                    "AUGUST_FIELD_TYPE_RP_RELATION",
                    "AUGUST_FIELD_TYPE_RP_ADDRESS",
                    "AUGUST_FIELD_TYPE_RP_ADDRESS_LINE1",
                    "AUGUST_FIELD_TYPE_RP_ADDRESS_LINE2",
                    "AUGUST_FIELD_TYPE_RP_ADDRESS_CITY",
                    "AUGUST_FIELD_TYPE_RP_ADDRESS_ZIP",
                    "AUGUST_FIELD_TYPE_RP_ADDRESS_STATE",
                    "AUGUST_FIELD_TYPE_RP_PHONE",
                    "AUGUST_FIELD_TYPE_RP_EMAIL",
                    "AUGUST_FIELD_TYPE_ROI_1_NAME",
                    "AUGUST_FIELD_TYPE_ROI_1_RELATION",
                    "AUGUST_FIELD_TYPE_ROI_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_ROI_1_PHONE",
                    "AUGUST_FIELD_TYPE_ROI_2_NAME",
                    "AUGUST_FIELD_TYPE_ROI_2_RELATION",
                    "AUGUST_FIELD_TYPE_ROI_2_ADDRESS",
                    "AUGUST_FIELD_TYPE_ROI_2_PHONE",
                    "AUGUST_FIELD_TYPE_ROI_3_NAME",
                    "AUGUST_FIELD_TYPE_ROI_3_RELATION",
                    "AUGUST_FIELD_TYPE_ROI_3_ADDRESS",
                    "AUGUST_FIELD_TYPE_ROI_3_PHONE",
                    "AUGUST_FIELD_TYPE_PAY_1_NAME",
                    "AUGUST_FIELD_TYPE_PAY_1_PHONE",
                    "AUGUST_FIELD_TYPE_PAY_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_PAY_1_EMAIL",
                    "AUGUST_FIELD_TYPE_PAY_1_RELATION",
                    "AUGUST_FIELD_TYPE_MPOA_1_NAME",
                    "AUGUST_FIELD_TYPE_MPOA_1_PHONE",
                    "AUGUST_FIELD_TYPE_MPOA_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_MPOA_1_EMAIL",
                    "AUGUST_FIELD_TYPE_MPOA_1_RELATION",
                    "AUGUST_FIELD_TYPE_FPOA_1_NAME",
                    "AUGUST_FIELD_TYPE_FPOA_1_PHONE",
                    "AUGUST_FIELD_TYPE_FPOA_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_FPOA_1_EMAIL",
                    "AUGUST_FIELD_TYPE_FPOA_1_RELATION",
                    "AUGUST_FIELD_TYPE_FIDUCIARY_1_NAME",
                    "AUGUST_FIELD_TYPE_FIDUCIARY_1_PHONE",
                    "AUGUST_FIELD_TYPE_FIDUCIARY_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_FIDUCIARY_1_EMAIL",
                    "AUGUST_FIELD_TYPE_FUNERAL_HOME_1_NAME",
                    "AUGUST_FIELD_TYPE_FUNERAL_HOME_1_PHONE",
                    "AUGUST_FIELD_TYPE_FUNERAL_HOME_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_FUNERAL_HOME_1_EMAIL",
                    "AUGUST_FIELD_TYPE_HOSPITAL_NAME",
                    "AUGUST_FIELD_TYPE_HOSPITAL_ADDRESS",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_NAME",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_PHONE",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_EMAIL",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_RELATION",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_HOME_PHONE",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_WORK_PHONE",
                    "AUGUST_FIELD_TYPE_EMERGENCY_1_CELL_PHONE",
                    "AUGUST_FIELD_TYPE_EMERGENCY_2_NAME",
                    "AUGUST_FIELD_TYPE_EMERGENCY_2_PHONE",
                    "AUGUST_FIELD_TYPE_EMERGENCY_2_ADDRESS",
                    "AUGUST_FIELD_TYPE_EMERGENCY_2_EMAIL",
                    "AUGUST_FIELD_TYPE_EMERGENCY_2_RELATION",
                    "AUGUST_FIELD_TYPE_EMERGENCY_3_NAME",
                    "AUGUST_FIELD_TYPE_EMERGENCY_3_PHONE",
                    "AUGUST_FIELD_TYPE_EMERGENCY_3_ADDRESS",
                    "AUGUST_FIELD_TYPE_EMERGENCY_3_EMAIL",
                    "AUGUST_FIELD_TYPE_EMERGENCY_3_RELATION",
                    "AUGUST_FIELD_TYPE_DENTIST_1_NAME",
                    "AUGUST_FIELD_TYPE_DENTIST_1_PHONE",
                    "AUGUST_FIELD_TYPE_DENTIST_1_FAX",
                    "AUGUST_FIELD_TYPE_DENTIST_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_PHARMACIST_1_NAME",
                    "AUGUST_FIELD_TYPE_PHARMACIST_1_PHONE",
                    "AUGUST_FIELD_TYPE_PHARMACIST_1_FAX",
                    "AUGUST_FIELD_TYPE_CONTACT_LIST_PP",
                    "AUGUST_FIELD_TYPE_MED_INS_1_COMPANY",
                    "AUGUST_FIELD_TYPE_MED_INS_1_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_MED_INS_1_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_MED_INS_2_COMPANY",
                    "AUGUST_FIELD_TYPE_MED_INS_2_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_MED_INS_2_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_MED_INS_3_COMPANY",
                    "AUGUST_FIELD_TYPE_MED_INS_3_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_MED_INS_3_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_DENTAL_INSURANCE_COMPANY",
                    "AUGUST_FIELD_TYPE_DENTAL_INSURANCE_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_DENTAL_INSURANCE_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_DENTAL_INSURANCE_2_COMPANY",
                    "AUGUST_FIELD_TYPE_DENTAL_INSURANCE_2_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_DENTAL_INSURANCE_2_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_1_COMPANY",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_1_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_1_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_1_RXBIN",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_1_RXPCN",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_2_COMPANY",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_2_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_2_GROUP_NUM",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_2_RXBIN",
                    "AUGUST_FIELD_TYPE_PHARMACY_INSURANCE_2_RXPCN",
                    "AUGUST_FIELD_TYPE_PUBLIC_INSURANCE_1_COMPANY",
                    "AUGUST_FIELD_TYPE_PUBLIC_INSURANCE_1_MEMBER_ID",
                    "AUGUST_FIELD_TYPE_PUBLIC_INSURANCE_1_PERIOD_END_DATE",
                    "AUGUST_FIELD_TYPE_GP_NAME",
                    "AUGUST_FIELD_TYPE_GP_CLINICAL_SPECIALTY",
                    "AUGUST_FIELD_TYPE_GP_PHONE",
                    "AUGUST_FIELD_TYPE_GP_ADDRESS",
                    "AUGUST_FIELD_TYPE_GP_FAX",
                    "AUGUST_FIELD_TYPE_FACILITY_NAME",
                    "AUGUST_FIELD_TYPE_FACILITY_LEGAL_NAME",
                    "AUGUST_FIELD_TYPE_FACILITY_LONG_NAME",
                    "AUGUST_FIELD_TYPE_FACILITY_ADDRESS",
                    "AUGUST_FIELD_TYPE_OMBUDSMAN_PHONE",
                    "AUGUST_FIELD_TYPE_FACILITY_PHONE",
                    "AUGUST_FIELD_TYPE_FACILITY_LICENSE",
                    "AUGUST_FIELD_TYPE_FACILITY_FAX",
                    "AUGUST_FIELD_TYPE_FACILITY_ADDRESS_STREET_ADDRESS",
                    "AUGUST_FIELD_TYPE_FACILITY_ADDRESS_CITY_STATE_POSTAL_CODE",
                    "AUGUST_FIELD_TYPE_FACILITY_ADDRESS_CITY",
                    "AUGUST_FIELD_TYPE_FACILITY_ADDRESS_STATE",
                    "AUGUST_FIELD_TYPE_FACILITY_ADDRESS_POSTAL_CODE",
                    "AUGUST_FIELD_TYPE_CURRENT_RENT",
                    "AUGUST_FIELD_TYPE_BILLING_1_NAME",
                    "AUGUST_FIELD_TYPE_BILLING_1_PHONE",
                    "AUGUST_FIELD_TYPE_BILLING_1_ADDRESS",
                    "AUGUST_FIELD_TYPE_BILLING_1_EMAIL",
                    "AUGUST_FIELD_TYPE_BILLING_1_RELATION",
                    "AUGUST_FIELD_TYPE_BILLING_1_AMOUNT",
                    "AUGUST_FIELD_TYPE_BILLING_1_FREQ",
                    "AUGUST_FIELD_TYPE_BILLING_2_NAME",
                    "AUGUST_FIELD_TYPE_BILLING_2_PHONE",
                    "AUGUST_FIELD_TYPE_BILLING_2_ADDRESS",
                    "AUGUST_FIELD_TYPE_BILLING_2_EMAIL",
                    "AUGUST_FIELD_TYPE_BILLING_2_RELATION",
                    "AUGUST_FIELD_TYPE_BILLING_2_AMOUNT",
                    "AUGUST_FIELD_TYPE_BILLING_2_FREQ",
                    "AUGUST_FIELD_TYPE_BILLING_3_NAME",
                    "AUGUST_FIELD_TYPE_BILLING_3_PHONE",
                    "AUGUST_FIELD_TYPE_BILLING_3_ADDRESS",
                    "AUGUST_FIELD_TYPE_BILLING_3_EMAIL",
                    "AUGUST_FIELD_TYPE_BILLING_3_RELATION",
                    "AUGUST_FIELD_TYPE_BILLING_3_AMOUNT",
                    "AUGUST_FIELD_TYPE_BILLING_3_FREQ",
                    "AUGUST_FIELD_TYPE_LEVEL_OF_CARE",
                    "AUGUST_FIELD_TYPE_CARE_POINTS_SCORE",
                    "AUGUST_FIELD_TYPE_ASSESSMENT_TYPE",
                    "AUGUST_FIELD_TYPE_YARDI_RESIDENT_ID",
                    "AUGUST_FIELD_TYPE_YARDI_FACILITY_ID",
                    "AUGUST_FIELD_TYPE_YARDI_ROOM_NUMBER",
                    "AUGUST_FIELD_TYPE_SSN_FIRST_3",
                    "AUGUST_FIELD_TYPE_SSN_MIDDLE_2",
                    "AUGUST_FIELD_TYPE_SSN_LAST_4",
                    "AUGUST_FIELD_TYPE_SSN"
                ]
            },
            "com.august.protos.august_initial_appraisal.AugustField": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/com.august.protos.custom_field.AugustFieldType"
                    },
                    "value": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "type"
                ]
            },
            "com.august.protos.august_initial_appraisal.CustomDetailsField.FieldOneof": {
                "properties": {}
            },
            "com.august.protos.august_initial_appraisal.CustomDetailsField": {
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "fieldOneof": {
                        "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.CustomDetailsField.FieldOneof"
                    }
                },
                "required": [
                    "fieldOneof"
                ]
            },
            "com.august.protos.august_initial_appraisal.CustomDetailsWrapper": {
                "properties": {
                    "categoryKey": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.PlanCategoryKey"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.CustomDetailsField"
                        }
                    },
                    "level": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    },
                    "customKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "augustFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AugustField"
                        }
                    }
                },
                "required": [
                    "categoryKey",
                    "fields",
                    "level",
                    "augustFields"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentReason": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ASSESSMENT_REASON_PRE_ADMISSION",
                    "ASSESSMENT_REASON_ON_ADMISSION",
                    "ASSESSMENT_REASON_7_DAY",
                    "ASSESSMENT_REASON_30_DAY",
                    "ASSESSMENT_REASON_RECURRING",
                    "ASSESSMENT_REASON_CHANGE_OF_CONDITION",
                    "ASSESSMENT_REASON_OTHER",
                    "ASSESSMENT_REASON_90_DAY",
                    "ASSESSMENT_REASON_ALIGNMENT",
                    "ASSESSMENT_REASON_14_DAY",
                    "ASSESSMENT_REASON_6_MONTH"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentReasonWrapper": {
                "properties": {
                    "assessmentReason": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentReason"
                    },
                    "otherReason": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "assessmentReason"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.ObjectivePlan": {
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryOptions": {
                "properties": {
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "question": {
                        "type": "string",
                        "nullable": true
                    },
                    "page": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "displayOrder": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AnswerGroup": {
                "properties": {
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "multiSelect": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryDetail.AppraisalDetailOneof": {
                "properties": {}
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryDetail": {
                "properties": {
                    "appraisalDetailOneof": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryDetail.AppraisalDetailOneof"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "group": {
                        "type": "string",
                        "nullable": true
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "displayOrder": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "answerGroup": {
                        "type": "string",
                        "nullable": true
                    },
                    "isRequired": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "helpText": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "appraisalDetailOneof"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryLevel": {
                "properties": {
                    "level": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "required": [
                    "level"
                ]
            },
            "com.august.protos.service_plan.ServicePlan.PlanCategoryKey": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PLAN_CATEGORY_KEY_BATHING",
                    "PLAN_CATEGORY_KEY_CARE_COORDINATION",
                    "PLAN_CATEGORY_KEY_DRESSING",
                    "PLAN_CATEGORY_KEY_GROOMING",
                    "PLAN_CATEGORY_KEY_DENTAL",
                    "PLAN_CATEGORY_KEY_TOILETING",
                    "PLAN_CATEGORY_KEY_TRANSFER_AND_MOBILITY",
                    "PLAN_CATEGORY_KEY_HEARING",
                    "PLAN_CATEGORY_KEY_VISION",
                    "PLAN_CATEGORY_KEY_MEALS_AND_NUTRITION",
                    "PLAN_CATEGORY_KEY_SPECIAL_CARE_NEEDS",
                    "PLAN_CATEGORY_KEY_COGNITIVE",
                    "PLAN_CATEGORY_KEY_WANDERING_AND_ELOPEMENT",
                    "PLAN_CATEGORY_KEY_DISPOSITION_AND_BEHAVIORS",
                    "PLAN_CATEGORY_KEY_SLEEP",
                    "PLAN_CATEGORY_KEY_COMMUNICATION",
                    "PLAN_CATEGORY_KEY_PSYCHO_SOCIAL_ENGAGEMENT",
                    "PLAN_CATEGORY_KEY_MEDICATION_MANAGEMENT",
                    "PLAN_CATEGORY_KEY_TRANSFER",
                    "PLAN_CATEGORY_KEY_MOBILITY",
                    "PLAN_CATEGORY_KEY_ADDITIONAL_SERVICES",
                    "PLAN_CATEGORY_KEY_CUSTOM"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategory": {
                "properties": {
                    "categoryKey": {
                        "$ref": "#/components/schemas/com.august.protos.service_plan.ServicePlan.PlanCategoryKey"
                    },
                    "levels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryLevel"
                        }
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryDetail"
                        }
                    },
                    "answerGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AnswerGroup"
                        }
                    },
                    "categoryOptions": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryOptions"
                    },
                    "customDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategoryDetail"
                        }
                    },
                    "customKey": {
                        "type": "string",
                        "nullable": true
                    },
                    "objectivePlans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.ObjectivePlan"
                        }
                    },
                    "isExcludedFromServicePlan": {
                        "type": "boolean",
                        "nullable": true
                    }
                },
                "required": [
                    "categoryKey",
                    "levels",
                    "details",
                    "answerGroups",
                    "customDetails",
                    "objectivePlans"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings": {
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AppraisalCategory"
                        }
                    },
                    "assessmentReasons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentReasonWrapper"
                        }
                    },
                    "assessmentTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentType"
                        }
                    }
                },
                "required": [
                    "categories",
                    "assessmentReasons",
                    "assessmentTypes"
                ]
            },
            "com.august.protos.charge.Recurring.Interval": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "INTERVAL_DAY",
                    "INTERVAL_WEEK",
                    "INTERVAL_MONTH"
                ]
            },
            "com.august.protos.level_of_care.CareFee": {
                "properties": {
                    "interval": {
                        "$ref": "#/components/schemas/com.august.protos.charge.Recurring.Interval"
                    },
                    "careFee": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    }
                },
                "required": [
                    "interval"
                ]
            },
            "com.august.protos.level_of_care.CareLevelValue": {
                "properties": {
                    "maxScore": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "careFees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.level_of_care.CareFee"
                        }
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "careFees"
                ]
            },
            "com.august.protos.level_of_care.LevelOfCareSettings": {
                "properties": {
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "lowestLevel": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "levelValues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.level_of_care.CareLevelValue"
                        }
                    }
                },
                "required": [
                    "admissionType",
                    "levelValues"
                ]
            },
            "com.august.protos.admissions.AdmissionsInformation.AdmissionType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ADMISSION_TYPE_ASSISTED_LIVING",
                    "ADMISSION_TYPE_MEMORY_CARE",
                    "ADMISSION_TYPE_INDEPENDENT_LIVING"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ASSESSMENT_TYPE_SUPERVISORY_CARE",
                    "ASSESSMENT_TYPE_PERSONAL_CARE",
                    "ASSESSMENT_TYPE_DIRECTED_CARE"
                ]
            },
            "com.august.protos.level_of_care.LevelOfCare": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32",
                        "nullable": true
                    },
                    "levelName": {
                        "type": "string",
                        "nullable": true
                    },
                    "assessmentType": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentType"
                    }
                },
                "required": [
                    "assessmentType"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.AdditionalServicesDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "ADDITIONAL_SERVICES_DETAILS_NEEDS_ASSISTANCE_MAKING_TELEPHONE_CALLS_OR_ELECTRONIC_COMMUNICATION_WITH_FRIENDS_AND_FAMILY",
                    "ADDITIONAL_SERVICES_DETAILS_NEEDS_ASSISTANCE_WITH_PET_CARE",
                    "ADDITIONAL_SERVICES_DETAILS_NEEDS_ASSISTANCE_WITH_LAUNDRY",
                    "ADDITIONAL_SERVICES_DETAILS_NEEDS_ASSISTANCE_WITH_HOUSEKEEPING",
                    "ADDITIONAL_SERVICES_DETAILS_NEEDS_ASSISTANCE_WITH_HANDLING_CASH_RESOURCES",
                    "ADDITIONAL_SERVICES_DETAILS_NEEDS_ASSISTANCE_WITH_MEAL_PREP"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.MobilityDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MOBILITY_DETAILS_ASSISTANCE_WITH_OBSERVATION_FALL_MANAGEMENT",
                    "MOBILITY_DETAILS_ASSISTANCE_USING_ASSISTIVE_DEVICES",
                    "MOBILITY_DETAILS_REQUESTS_ESCORTS_TO_MEALS",
                    "MOBILITY_DETAILS_REQUESTS_ESCORTS_TO_ACTIVITIES",
                    "MOBILITY_DETAILS_BEDRIDDEN_NEEDS_HELP_POSITIONING_IN_BED",
                    "MOBILITY_DETAILS_CANE",
                    "MOBILITY_DETAILS_FOUR_PRONG_CANE",
                    "MOBILITY_DETAILS_WALKER",
                    "MOBILITY_DETAILS_CRUTCHES",
                    "MOBILITY_DETAILS_WHEELCHAIR",
                    "MOBILITY_DETAILS_ELECTRIC_WHEELCHAIR_MOTORIZED_CART",
                    "MOBILITY_DETAILS_PROBING_CANE_FOR_THE_SIGHT_IMPAIRED",
                    "MOBILITY_DETAILS_HALF_BED_RAILS_FOR_POSITIONING",
                    "MOBILITY_DETAILS_GAIT_BELT",
                    "MOBILITY_DETAILS_BRACE_OR_PROSTHETIC",
                    "MOBILITY_DETAILS_TOILET_RISER",
                    "MOBILITY_DETAILS_REACHING_DEVICE",
                    "MOBILITY_DETAILS_HOSPITAL_BED"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.TransferDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TRANSFER_DETAILS_ASSISTANCE_USING_MECHANICAL_DEVICES",
                    "TRANSFER_DETAILS_FREQUENT_UNSCHEDULED_REQUESTS_WITH_TRANSFERRING",
                    "TRANSFER_DETAILS_TWO_PERSON_ASSISTANCE",
                    "TRANSFER_DETAILS_NON_WEIGHT_BEARING",
                    "TRANSFER_DETAILS_TRANSFER_POLE",
                    "TRANSFER_DETAILS_MECHANICAL_LIFT"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.MedicationManagementDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MEDICATION_MANAGEMENT_DETAILS_10PLUS_CENTRALLY_STORED_MEDICATIONS",
                    "MEDICATION_MANAGEMENT_DETAILS_EYE_DROPS_OINTMENTS_CREAMS_OR_SPRAYS_CENTRALLY_STORED",
                    "MEDICATION_MANAGEMENT_DETAILS_OFF_ROUTINE_PASS_MEDICATIONS_CENTRALLY_STORED",
                    "MEDICATION_MANAGEMENT_DETAILS_COORDINATION_WITH_NON_HOUSE_PHARMACY",
                    "MEDICATION_MANAGEMENT_DETAILS_PSYCHOTROPIC_MEDICATIONS_CENTRALLY_STORED",
                    "MEDICATION_MANAGEMENT_DETAILS_INJECTIONS_AND_GLUCOMETER_CHECKS",
                    "MEDICATION_MANAGEMENT_DETAILS_BREATHING_TREATMENTS",
                    "MEDICATION_MANAGEMENT_DETAILS_SUPPLEMENTAL_OXYGEN_USE",
                    "MEDICATION_MANAGEMENT_DETAILS_SPECIAL_MEDICATION_REQUESTS",
                    "MEDICATION_MANAGEMENT_DETAILS_LAB_WORK_COORDINATION",
                    "MEDICATION_MANAGEMENT_DETAILS_REQUIRES_ADDITIONAL_VITAL_SIGN_CHECKS",
                    "MEDICATION_MANAGEMENT_DETAILS_ASSISTANCE_WITH_CRUSHED_MEDICATIONS",
                    "MEDICATION_MANAGEMENT_DETAILS_NARCOTIC_MEDICATIONS_CENTRALLY_STORED",
                    "MEDICATION_MANAGEMENT_DETAILS_INDEPENDENT_WITH_OXYGEN",
                    "MEDICATION_MANAGEMENT_DETAILS_INDEPENDENT_CPAP_BIPAP",
                    "MEDICATION_MANAGEMENT_DETAILS_ASSISTANCE_WITH_CPAP_BIPAP"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.PsychoSocialEngagementDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_CARDS",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_EXERCISE",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_WALKING",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_MUSIC",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_ANIMALS",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_MUSEUMS",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_ARTS_AND_CRAFTS",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_CURRENT_EVENTS",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_POTTERY",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_NEEDS_ASSISTANCE_MAKING_TELEPHONE_CALLS_OR_ELECTRONIC_COMMUNICATION_WITH_FRIENDS_AND_FAMILY",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_NEEDS_SUPPORT_PARTICIPATING_IN_DINING_PROGRAM",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_NEEDS_ASSISTANCE_WITH_PET_CARE",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_NEEDS_ASSISTANCE_WITH_LAUNDRY",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_NEEDS_ASSISTANCE_WITH_HOUSEKEEPING",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_NEEDS_ASSISTANCE_WITH_HANDLING_CASH_RESOURCES",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_PUZZLES",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_BINGO",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_MOVIES",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_OUTINGS",
                    "PSYCHO_SOCIAL_ENGAGEMENT_DETAILS_SPIRITUALITY"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.CommunicationDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "COMMUNICATION_DETAILS_APHASIA_INABILITY_TO_SPEAK_OR_COMPREHEND_PRIMARY_LANGUAGE",
                    "COMMUNICATION_DETAILS_REQUIRES_NONVERBAL_STRATEGIES",
                    "COMMUNICATION_DETAILS_REQUIRES_FREQUENT_AND_ONGOING_INTERVENTIONS_TO_DETERMINE_NEEDS",
                    "COMMUNICATION_DETAILS_PREFERS_LANGUAGE_OTHER_THAN_ENGLISH"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.SleepDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SLEEP_DETAILS_INCONSISTENT_SLEEP_PATTERNS_CAUSED_BY_SUNDOWNING",
                    "SLEEP_DETAILS_REQUIRES_FREQUENT_AND_UNSCHEDULED_SUPPORT_AND_INTERVENTIONS_THROUGHOUT_THE_SLEEPING_HOURS",
                    "SLEEP_DETAILS_REQUIRES_MEDICATION_TO_SUPPORT_ROUTINE_SLEEP_PATTERNS"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.DispositionAndBehaviorsDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_COOPERATIVE",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_SOCIAL_TALKATIVE",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_QUIET_AND_RESERVED",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_APPROPRIATE_AFFECT_AND_MOOD",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_MAKES_GOOD_EYE_CONTACT",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_RESISTANT_TO_ENGAGING_IN_SOCIAL_INTERACTIONS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_EXPRESSES_FEELING_DOWN_DEPRESSED_OR_HOPELESS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_EXPRESSES_FEELINGS_OF_GRIEF_AND_LOSS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_EXPRESSES_FEELINGS_OF_DISTRUST_AND_PARANOIA",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_EXPRESSES_FEELINGS_OF_LONELINESS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_UNCOOPERATIVE_AND_RESISTANT_TO_CARE",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_VERBALLY_DISRUPTIVE_YELLING_ARGUMENTATIVE_OR_ANGRY_OUTBURSTS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_PHYSICALLY_DISRUPTIVE_PUSHING_BITING_THROWING_OR_HITTING",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_SEXUALLY_INAPPROPRIATE_BEHAVIORS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_HISTORY_OF_PHYSICAL_AGGRESSION_OR_VIOLENCE",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_HISTORY_OF_MENTAL_ILLNESS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_HISTORY_OF_SUICIDE_ATTEMPTS",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_HISTORY_OF_ADDICTION",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_HAS_CONFLICT_WITHIN_THE_FAMILY_SUPPORT_SYSTEM",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_HAS_A_STRONG_FAMILY_SUPPORT_SYSTEM",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_PROVIDE_INTERVENTIONS_DUE_TO_RESISTANCE",
                    "DISPOSITION_AND_BEHAVIORS_DETAILS_PROVIDE_INTERVENTIONS_TO_DEESCALATE"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.WanderingAndElopementDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "WANDERING_AND_ELOPEMENT_DETAILS_WANDERS_THROUGHOUT_THE_BUILDING",
                    "WANDERING_AND_ELOPEMENT_DETAILS_WANDERS_IN_RESIDENTS_ROOMS",
                    "WANDERING_AND_ELOPEMENT_DETAILS_EXIT_SEEKING_DURING_THE_DAY",
                    "WANDERING_AND_ELOPEMENT_DETAILS_EXIT_SEEKING_AT_NIGHT",
                    "WANDERING_AND_ELOPEMENT_DETAILS_PRIOR_HISTORY_OF_ELOPEMENT",
                    "WANDERING_AND_ELOPEMENT_DETAILS_PROVIDE_REDIRECTION_FOR_EXIT_SEEKING",
                    "WANDERING_AND_ELOPEMENT_DETAILS_ASSISTANCE_WITH_WANDERGUARD"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.CognitiveDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "COGNITIVE_DETAILS_RESIDENT_HAS_NO_OBSERVABLE_SAFETY_AWARENESS_DEFICITS",
                    "COGNITIVE_DETAILS_DISORIENTED_TO_PERSON_TIME_PLACE",
                    "COGNITIVE_DETAILS_MEMORY_IMPAIRMENT",
                    "COGNITIVE_DETAILS_REPEATS_INFORMATION",
                    "COGNITIVE_DETAILS_POOR_HISTORIAN_REGARDING_INFORMATION_OR_EVENTS",
                    "COGNITIVE_DETAILS_POOR_SAFETY_AWARENESS",
                    "COGNITIVE_DETAILS_POOR_JUDGEMENT",
                    "COGNITIVE_DETAILS_PROVIDE_INTERVENTIONS",
                    "COGNITIVE_DETAILS_PROVIDE_EXTENSIVE_INTERVENTION_FOR_DEMENTIA"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.SpecialCareNeedsDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SPECIAL_CARE_NEEDS_DETAILS_CHRONIC_ILLNESS_INJURY",
                    "SPECIAL_CARE_NEEDS_DETAILS_CHRONIC_WOUNDS_SKIN_BREAKDOWN",
                    "SPECIAL_CARE_NEEDS_DETAILS_CHRONIC_PAIN",
                    "SPECIAL_CARE_NEEDS_DETAILS_TOBACCO",
                    "SPECIAL_CARE_NEEDS_DETAILS_ALCOHOL_OR_DRUGS",
                    "SPECIAL_CARE_NEEDS_DETAILS_DIABETIC_CARE_OVERSIGHT",
                    "SPECIAL_CARE_NEEDS_DETAILS_MENTAL_HEALTH_SERVICES",
                    "SPECIAL_CARE_NEEDS_DETAILS_SAFETY_CHECK_4X_PER_SHIFT",
                    "SPECIAL_CARE_NEEDS_DETAILS_SAFETY_CHECK_8X_PER_SHIFT",
                    "SPECIAL_CARE_NEEDS_DETAILS_SAFETY_CHECK_16X_PER_SHIFT"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.MealsAndNutritionDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MEALS_AND_NUTRITION_DETAILS_REQUIRES_FOOD_SERVICES_DURING_OFF_MEAL_TIMES",
                    "MEALS_AND_NUTRITION_DETAILS_NEEDS_ADAPTIVE_DEVICES_TO_FEED_SELF",
                    "MEALS_AND_NUTRITION_DETAILS_REQUIRES_SPECIAL_DIET",
                    "MEALS_AND_NUTRITION_DETAILS_SUPPORT_PARTICIPATING_IN_DINING_PROGRAM",
                    "MEALS_AND_NUTRITION_DETAILS_ENCOURAGE_HYDRATION"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.VisionDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "VISION_DETAILS_WEARS_GLASSES_REGULARLY",
                    "VISION_DETAILS_WEARS_GLASSES_FOR_READING_ONLY",
                    "VISION_DETAILS_HAS_PRESCRIPTION_SUNGLASSES",
                    "VISION_DETAILS_WEARS_CONTACT_LENSES",
                    "VISION_DETAILS_REQUIRES_FREQUENT_AND_UNSCHEDULED_SUPPORT_IN_LOCATION_CLEANING_AND_POSITIONING_EYEWEAR",
                    "VISION_DETAILS_LEGALLY_BLIND"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.HearingDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "HEARING_DETAILS_WEARS_AIDS_IN_BOTH_EARS",
                    "HEARING_DETAILS_WEARS_AID_IN_RIGHT_EAR_ONLY",
                    "HEARING_DETAILS_WEARS_AID_IN_LEFT_EAR_ONLY",
                    "HEARING_DETAILS_REQUIRES_FREQUENT_AND_UNSCHEDULED_SUPPORT_TO_FIND_AND_ADJUST_HEARING_AIDS"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.TransferAndMobilityDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TRANSFER_AND_MOBILITY_DETAILS_ASSISTANCE_USING_MECHANICAL_DEVICES",
                    "TRANSFER_AND_MOBILITY_DETAILS_ASSISTANCE_WITH_OBSERVATION_FALL_MANAGEMENT",
                    "TRANSFER_AND_MOBILITY_DETAILS_ASSISTANCE_USING_ASSISTIVE_DEVICES",
                    "TRANSFER_AND_MOBILITY_DETAILS_REQUESTS_ESCORTS_TO_MEALS",
                    "TRANSFER_AND_MOBILITY_DETAILS_REQUESTS_ESCORTS_TO_ACTIVITIES",
                    "TRANSFER_AND_MOBILITY_DETAILS_FREQUENT_UNSCHEDULED_REQUESTS_WITH_TRANSFERRING",
                    "TRANSFER_AND_MOBILITY_DETAILS_TWO_PERSON_ASSISTANCE",
                    "TRANSFER_AND_MOBILITY_DETAILS_BEDRIDDEN_NEEDS_HELP_POSITIONING_IN_BED",
                    "TRANSFER_AND_MOBILITY_DETAILS_NON_WEIGHT_BEARING",
                    "TRANSFER_AND_MOBILITY_DETAILS_CANE",
                    "TRANSFER_AND_MOBILITY_DETAILS_FOUR_PRONG_CANE",
                    "TRANSFER_AND_MOBILITY_DETAILS_WALKER",
                    "TRANSFER_AND_MOBILITY_DETAILS_CRUTCHES",
                    "TRANSFER_AND_MOBILITY_DETAILS_WHEELCHAIR",
                    "TRANSFER_AND_MOBILITY_DETAILS_ELECTRIC_WHEELCHAIR_MOTORIZED_CART",
                    "TRANSFER_AND_MOBILITY_DETAILS_PROBING_CANE_FOR_THE_SIGHT_IMPAIRED",
                    "TRANSFER_AND_MOBILITY_DETAILS_HALF_BED_RAILS_FOR_POSITIONING",
                    "TRANSFER_AND_MOBILITY_DETAILS_TRANSFER_POLE",
                    "TRANSFER_AND_MOBILITY_DETAILS_GAIT_BELT",
                    "TRANSFER_AND_MOBILITY_DETAILS_HOYER_LIFT",
                    "TRANSFER_AND_MOBILITY_DETAILS_BRACE_OR_PROSTHETIC",
                    "TRANSFER_AND_MOBILITY_DETAILS_TOILET_RISER",
                    "TRANSFER_AND_MOBILITY_DETAILS_REACHING_DEVICE",
                    "TRANSFER_AND_MOBILITY_DETAILS_HOSPITAL_BED"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.ToiletingDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "TOILETING_DETAILS_NEEDS_ASSISTANCE_WITH_AM_TOILETING",
                    "TOILETING_DETAILS_NEEDS_ASSISTANCE_WITH_PM_TOILETING",
                    "TOILETING_DETAILS_NEEDS_ASSISTANCE_WITH_NIGHTTIME_TOILETING",
                    "TOILETING_DETAILS_REQUIRES_UNSCHEDULED_ESCORT_AND_ASSISTANCE_WITH_TOILETING",
                    "TOILETING_DETAILS_USES_BEDSIDE_URINAL_SELF_MANAGED",
                    "TOILETING_DETAILS_USES_BEDSIDE_URINAL_NEEDS_ASSISTANCE",
                    "TOILETING_DETAILS_USES_BEDSIDE_COMMODE_SELF_MANAGED",
                    "TOILETING_DETAILS_USES_BEDSIDE_COMMODE_NEEDS_ASSISTANCE",
                    "TOILETING_DETAILS_NEEDS_ASSISTANCE_ORDERING_SUPPLIES",
                    "TOILETING_DETAILS_TWO_PERSON_ASSISTANCE_WITH_TOILETING",
                    "TOILETING_DETAILS_ASSISTANCE_WITH_AM_INCONTINENCE_CARE",
                    "TOILETING_DETAILS_ASSISTANCE_WITH_PM_INCONTINENCE_CARE",
                    "TOILETING_DETAILS_ASSISTANCE_WITH_NIGHTTIME_INCONTINENCE_CARE",
                    "TOILETING_DETAILS_ASSISTANCE_WITH_FREQUENT_UNSCHEDULED_INCONTINENCE_CARE",
                    "TOILETING_DETAILS_ASSISTANCE_WITH_INCONTINENCE_OF_BOWELS",
                    "TOILETING_DETAILS_ASSISTANCE_COORDINATING_URINARY_CATHETER",
                    "TOILETING_DETAILS_ASSISTANCE_COORDINATING_COLOSTOMY",
                    "TOILETING_DETAILS_TWO_PERSON_ASSISTANCE_WITH_INCONTINENCE_CARE"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.DentalDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DENTAL_DETAILS_WEARS_DENTURES",
                    "DENTAL_DETAILS_WEARS_A_PARTIAL",
                    "DENTAL_DETAILS_NEEDS_ASSISTANCE_WITH_AM_ORAL_CARE",
                    "DENTAL_DETAILS_NEEDS_ASSISTANCE_WITH_PM_ORAL_CARE",
                    "DENTAL_DETAILS_REQUIRES_ASSISTANCE_WITH_ORAL_CARE_THROUGHOUT_THE_DAY",
                    "DENTAL_DETAILS_REQUIRES_SPECIAL_RINSES_AND_ORAL_CARE"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.GroomingDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "GROOMING_DETAILS_NEEDS_ASSISTANCE_WITH_AM_GROOMING",
                    "GROOMING_DETAILS_NEEDS_ASSISTANCE_WITH_PM_GROOMING",
                    "GROOMING_DETAILS_REQUIRES_UNSCHEDULED_ASSISTANCE_THROUGHOUT_THE_DAY_WITH_GROOMING_ACTIVITIES"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.DressingDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "DRESSING_DETAILS_NEEDS_ASSISTANCE_WITH_AM_DRESSING",
                    "DRESSING_DETAILS_NEEDS_ASSISTANCE_WITH_BEDTIME_UNDRESSING",
                    "DRESSING_DETAILS_REQUIRES_ASSISTANCE_DUE_TO_DRESSING_AND_UNDRESSING_THROUGHOUT_THE_DAY",
                    "DRESSING_DETAILS_TWO_PERSON_ASSISTANCE"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.CareCoordinationDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "CARE_COORDINATION_DETAILS_HAS_ROUTINE_PRIVATE_DUTY_CARE",
                    "CARE_COORDINATION_DETAILS_HAS_ROUTINE_HOME_HEALTH_CARE_OR_REHAB",
                    "CARE_COORDINATION_DETAILS_HAS_ACTIVE_CASE_MANAGER",
                    "CARE_COORDINATION_DETAILS_REQUIRES_NURSE_SUPPORT",
                    "CARE_COORDINATION_DETAILS_REQUIRES_FREQUENT_OUTPATIENT_SERVICES",
                    "CARE_COORDINATION_DETAILS_REQUIRES_SUPPORT_COORDINATING_TRANSPORTATION_TO_APPOINTMENTS",
                    "CARE_COORDINATION_DETAILS_REQUIRES_TELEMEDICINE_COORDINATION",
                    "CARE_COORDINATION_DETAILS_RECEIVES_PALLIATIVE_CARE",
                    "CARE_COORDINATION_DETAILS_IS_ON_HOSPICE",
                    "CARE_COORDINATION_DETAILS_LONG_TERM_CARE_BILLING_SUPPORT"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.BathingDetails": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "BATHING_DETAILS_USES_SHOWER_CHAIR",
                    "BATHING_DETAILS_NEEDS_TWO_PERSON_ASSISTANCE",
                    "BATHING_DETAILS_REQUIRES_UNSCHEDULED_ASSISTANCE_WITH_BATHING",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_4_5X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_6PLUS_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_SPONGE_BATH",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_1X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_2X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_3X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_4X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_5X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_6X_PER_WEEK",
                    "BATHING_DETAILS_NEEDS_ASSISTANCE_BATHING_7X_PER_WEEK"
                ]
            },
            "com.august.protos.settings.appraisal_settings.AppraisalSettings.Level": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "LEVEL_NONE",
                    "LEVEL_MINIMAL",
                    "LEVEL_MODERATE",
                    "LEVEL_MAX"
                ]
            },
            "com.august.protos.august_initial_appraisal.AugustInitialAppraisal": {
                "properties": {
                    "bathing": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "bathingDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.BathingDetails"
                        }
                    },
                    "bathingNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "careCoordination": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "careCoordinationDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.CareCoordinationDetails"
                        }
                    },
                    "careCoordinationNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "dressing": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "dressingDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.DressingDetails"
                        }
                    },
                    "dressingNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "grooming": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "groomingDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.GroomingDetails"
                        }
                    },
                    "groomingNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "dental": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "dentalDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.DentalDetails"
                        }
                    },
                    "dentalNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "toileting": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "toiletingDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.ToiletingDetails"
                        }
                    },
                    "toiletingNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "transferAndMobility": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "transferAndMobilityDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.TransferAndMobilityDetails"
                        }
                    },
                    "transferAndMobilityNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "hearing": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "hearingDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.HearingDetails"
                        }
                    },
                    "hearingNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "vision": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "visionDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.VisionDetails"
                        }
                    },
                    "visionNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "mealsAndNutrition": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "mealsAndNutritionDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.MealsAndNutritionDetails"
                        }
                    },
                    "mealsAndNutritionNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "specialCareNeeds": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "specialCareNeedsDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.SpecialCareNeedsDetails"
                        }
                    },
                    "specialCareNeedsNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "cognitive": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "cognitiveDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.CognitiveDetails"
                        }
                    },
                    "cognitiveNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "wanderingAndElopement": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "wanderingAndElopementDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.WanderingAndElopementDetails"
                        }
                    },
                    "wanderingAndElopementNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "dispositionAndBehaviors": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "dispositionAndBehaviorsDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.DispositionAndBehaviorsDetails"
                        }
                    },
                    "dispositionAndBehaviorsNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "sleep": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "sleepDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.SleepDetails"
                        }
                    },
                    "sleepNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "communication": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "communicationDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.CommunicationDetails"
                        }
                    },
                    "communicationNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "psychoSocialEngagement": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "psychoSocialEngagementDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.PsychoSocialEngagementDetails"
                        }
                    },
                    "psychoSocialEngagementNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "medicationManagement": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "medicationManagementDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.MedicationManagementDetails"
                        }
                    },
                    "medicationManagementNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "transferDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.TransferDetails"
                        }
                    },
                    "transferNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "mobility": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.Level"
                    },
                    "mobilityDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.MobilityDetails"
                        }
                    },
                    "mobilityNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "additionalServicesDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AdditionalServicesDetails"
                        }
                    },
                    "additionalServicesNotes": {
                        "type": "string",
                        "nullable": true
                    },
                    "levelOfCare": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCare"
                    },
                    "admissionType": {
                        "$ref": "#/components/schemas/com.august.protos.admissions.AdmissionsInformation.AdmissionType"
                    },
                    "levelOfCareSettings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCareSettings"
                    },
                    "allLevelOfCareSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.level_of_care.LevelOfCareSettings"
                        }
                    },
                    "settings": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings"
                    },
                    "isExternalAppraisal": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "customDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.CustomDetailsWrapper"
                        }
                    },
                    "assessmentReason": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentReasonWrapper"
                    },
                    "assessmentType": {
                        "$ref": "#/components/schemas/com.august.protos.settings.appraisal_settings.AppraisalSettings.AssessmentType"
                    }
                },
                "required": [
                    "bathing",
                    "bathingDetails",
                    "careCoordination",
                    "careCoordinationDetails",
                    "dressing",
                    "dressingDetails",
                    "grooming",
                    "groomingDetails",
                    "dental",
                    "dentalDetails",
                    "toileting",
                    "toiletingDetails",
                    "transferAndMobility",
                    "transferAndMobilityDetails",
                    "hearing",
                    "hearingDetails",
                    "vision",
                    "visionDetails",
                    "mealsAndNutrition",
                    "mealsAndNutritionDetails",
                    "specialCareNeeds",
                    "specialCareNeedsDetails",
                    "cognitive",
                    "cognitiveDetails",
                    "wanderingAndElopement",
                    "wanderingAndElopementDetails",
                    "dispositionAndBehaviors",
                    "dispositionAndBehaviorsDetails",
                    "sleep",
                    "sleepDetails",
                    "communication",
                    "communicationDetails",
                    "psychoSocialEngagement",
                    "psychoSocialEngagementDetails",
                    "medicationManagement",
                    "medicationManagementDetails",
                    "transfer",
                    "transferDetails",
                    "mobility",
                    "mobilityDetails",
                    "additionalServicesDetails",
                    "admissionType",
                    "allLevelOfCareSettings",
                    "customDetails",
                    "assessmentType"
                ]
            },
            "com.august.protos.august_initial_appraisal.AppraisalStatus": {
                "properties": {
                    "appraisal": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.august_initial_appraisal.AugustInitialAppraisal"
                    },
                    "isFinalized": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "updateToLatestSettings": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "newerSettingsAvailable": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "com.august.repositories.accounting.LedgerAccountData": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "accountingSystem": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "classification": {
                        "type": "string",
                        "nullable": true
                    },
                    "accountType": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "accountingSystem",
                    "externalId",
                    "displayName",
                    "code",
                    "status"
                ]
            },
            "com.august.repositories.accounting.LedgerAccount": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.repositories.accounting.LedgerAccountData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.repositories.accounting.LocationData": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "accountingSystem": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "accountingSystem",
                    "externalId",
                    "companyName",
                    "displayName",
                    "address",
                    "status"
                ]
            },
            "com.august.repositories.accounting.Location": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.repositories.accounting.LocationData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.models.OptionalUserMetaData": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "createdById": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedById": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "isActive",
                    "createdAt",
                    "modifiedAt"
                ]
            },
            "com.august.repositories.accounting.DepartmentData": {
                "properties": {
                    "orgId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "accountingSystem": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "facilityId",
                    "accountingSystem",
                    "externalId",
                    "name",
                    "status"
                ]
            },
            "com.august.repositories.accounting.Department": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.repositories.accounting.DepartmentData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.OptionalUserMetaData"
                    }
                },
                "required": [
                    "data",
                    "meta"
                ]
            },
            "com.august.protos.user.MfaVerificationStatus": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "MFA_VERIFICATION_STATUS_PENDING",
                    "MFA_VERIFICATION_STATUS_VERIFIED"
                ]
            },
            "com.august.protos.user.MfaStatus": {
                "properties": {
                    "preferred": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaMethod"
                    },
                    "sms": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaVerificationStatus"
                    },
                    "email": {
                        "$ref": "#/components/schemas/com.august.protos.user.MfaVerificationStatus"
                    }
                },
                "required": [
                    "preferred",
                    "sms",
                    "email"
                ]
            },
            "com.august.protos.user.MfaMethod": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "SMS",
                    "EMAIL"
                ]
            },
            "com.august.protos.permission.PersonMatcher": {
                "properties": {
                    "organizationId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "facilityId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "personId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    }
                }
            },
            "com.august.protos.permission.GroupPermission": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "GROUP_PERMISSION_SUPER_USER",
                    "GROUP_PERMISSION_TOOL_USER",
                    "GROUP_PERMISSION_TOOL_GENERAL",
                    "GROUP_PERMISSION_TOOL_FORM_CREATE",
                    "GROUP_PERMISSION_TOOL_FORM_READ",
                    "GROUP_PERMISSION_TOOL_FORM_UPDATE",
                    "GROUP_PERMISSION_TOOL_FORM_DELETE",
                    "GROUP_PERMISSION_TOOL_FORM_PUBLISH",
                    "GROUP_PERMISSION_TOOL_FORM_ASSIGNMENT_CREATE",
                    "GROUP_PERMISSION_TOOL_FORM_ASSIGNMENT_UPDATE",
                    "GROUP_PERMISSION_TOOL_FORM_ASSIGNMENT_READ",
                    "GROUP_PERMISSION_TOOL_FORM_ASSIGNMENT_DELETE",
                    "GROUP_PERMISSION_TOOL_SETTINGS_CREATE",
                    "GROUP_PERMISSION_TOOL_SETTINGS_READ",
                    "GROUP_PERMISSION_TOOL_SETTINGS_DELETE",
                    "GROUP_PERMISSION_DEMO_USER",
                    "GROUP_PERMISSION_ORGANIZATION_USER_CREATE",
                    "GROUP_PERMISSION_ORGANIZATION_USER_READ",
                    "GROUP_PERMISSION_ORGANIZATION_USER_UPDATE",
                    "GROUP_PERMISSION_ORGANIZATION_USER_DELETE",
                    "GROUP_PERMISSION_ORGANIZATION_READ",
                    "GROUP_PERMISSION_ORGANIZATION_UPDATE",
                    "GROUP_PERMISSION_FACILITY_CREATE",
                    "GROUP_PERMISSION_FACILITY_READ",
                    "GROUP_PERMISSION_FACILITY_UPDATE",
                    "GROUP_PERMISSION_FACILITY_CARE_GROUPS_UPDATE",
                    "GROUP_PERMISSION_FACILITY_LIMITED_READ",
                    "GROUP_PERMISSION_FACILITY_USER_CREATE",
                    "GROUP_PERMISSION_FACILITY_USER_READ",
                    "GROUP_PERMISSION_FACILITY_USER_UPDATE",
                    "GROUP_PERMISSION_FACILITY_USER_DELETE",
                    "GROUP_PERMISSION_OCCUPANCY_CREATE",
                    "GROUP_PERMISSION_OCCUPANCY_READ",
                    "GROUP_PERMISSION_OCCUPANCY_UPDATE",
                    "GROUP_PERMISSION_OCCUPANCY_DELETE",
                    "GROUP_PERMISSION_PERSON_READ",
                    "GROUP_PERMISSION_PERSON_CREATE",
                    "GROUP_PERMISSION_PERSON_UPDATE",
                    "GROUP_PERMISSION_PERSON_DELETE",
                    "GROUP_PERMISSION_PERSON_CHANGE_STATUS",
                    "GROUP_PERMISSION_SNAPSHOT_CREATE",
                    "GROUP_PERMISSION_SNAPSHOT_READ",
                    "GROUP_PERMISSION_SNAPSHOT_UPDATE",
                    "GROUP_PERMISSION_SNAPSHOT_DELETE",
                    "GROUP_PERMISSION_SNAPSHOT_IN_PERSON_SIGNATURE_URL_READ",
                    "GROUP_PERMISSION_CAN_SIGN_FOR_COMMUNITY",
                    "GROUP_PERMISSION_REPORT_READ",
                    "GROUP_PERMISSION_REPORT_LIMITED_READ",
                    "GROUP_PERMISSION_MAR_CREATE",
                    "GROUP_PERMISSION_MAR_READ",
                    "GROUP_PERMISSION_MEDLIST_READ",
                    "GROUP_PERMISSION_FACESHEET_READ",
                    "GROUP_PERMISSION_MEDLOG_READ",
                    "GROUP_PERMISSION_BILLING_CREATE",
                    "GROUP_PERMISSION_BILLING_READ",
                    "GROUP_PERMISSION_BILLING_UPDATE",
                    "GROUP_PERMISSION_BILLING_DELETE",
                    "GROUP_PERMISSION_BILLING_OWN_PAYER_SETTINGS_READ",
                    "GROUP_PERMISSION_BILLING_OWN_PAYER_SETTINGS_UPDATE",
                    "GROUP_PERMISSION_BILLING_RESIDENT_READ",
                    "GROUP_PERMISSION_BILLING_ADD_PAYMENT_METHOD",
                    "GROUP_PERMISSION_BILLING_V2_READ",
                    "GROUP_PERMISSION_BILLING_V2_WRITE",
                    "GROUP_PERMISSION_BILLING_MERCHANT_ONBOARDING",
                    "GROUP_PERMISSION_BILLING_PAYER_SETTINGS_READ",
                    "GROUP_PERMISSION_BILLING_PAYER_SETTINGS_UPDATE",
                    "GROUP_PERMISSION_BILLING_DISMISS_BILLING_EVENTS",
                    "GROUP_PERMISSION_BILLING_BULK_CHARGE_CREATE",
                    "GROUP_PERMISSION_BILLING_BULK_CREDIT_CREATE",
                    "GROUP_PERMISSION_BILLING_ONETIME_CHARGE_CREATE",
                    "GROUP_PERMISSION_BILLING_ONETIME_CHARGE_DELETE",
                    "GROUP_PERMISSION_BILLING_ONETIME_CREDIT_CREATE",
                    "GROUP_PERMISSION_BILLING_OVERRIDE_DEFAULT_RATE",
                    "GROUP_PERMISSION_BILLING_RECURRING_CHARGE_CREATE",
                    "GROUP_PERMISSION_BILLING_RECURRING_CHARGE_UPDATE",
                    "GROUP_PERMISSION_BILLING_RECURRING_CHARGE_DELETE",
                    "GROUP_PERMISSION_BILLING_STATEMENT_DRAFT_INDIVIDUAL",
                    "GROUP_PERMISSION_BILLING_STATEMENT_ISSUE_INDIVIDUAL",
                    "GROUP_PERMISSION_BILLING_STATEMENT_PRINT_INDIVIDUAL",
                    "GROUP_PERMISSION_BILLING_STATEMENT_DRAFT_BULK",
                    "GROUP_PERMISSION_BILLING_STATEMENT_ISSUE_BULK",
                    "GROUP_PERMISSION_BILLING_STATEMENT_PRINT_BULK",
                    "GROUP_PERMISSION_BILLING_PAYMENTS_CREATE",
                    "GROUP_PERMISSION_BILLING_PAYMENTS_UPDATE",
                    "GROUP_PERMISSION_BILLING_ONETIME_PAYMENT_FORCE",
                    "GROUP_PERMISSION_BILLING_ONETIME_PAYMENT_TRIGGER",
                    "GROUP_PERMISSION_BILLING_REPORTS_READ",
                    "GROUP_PERMISSION_BILLING_CLOSE_BOOKS",
                    "GROUP_PERMISSION_BILLING_SYNC_JOURNAL_ENTRIES",
                    "GROUP_PERMISSION_BILLING_SETTINGS_ACCOUNTING_READ",
                    "GROUP_PERMISSION_BILLING_SETTINGS_ACCOUNTING_UPDATE",
                    "GROUP_PERMISSION_BILLING_SETTINGS_FEES_CREATE",
                    "GROUP_PERMISSION_BILLING_SETTINGS_FEES_READ",
                    "GROUP_PERMISSION_BILLING_SETTINGS_FEES_UPDATE",
                    "GROUP_PERMISSION_FACILITY_CONTACT_CREATE",
                    "GROUP_PERMISSION_FACILITY_CONTACT_READ",
                    "GROUP_PERMISSION_FACILITY_CONTACT_UPDATE",
                    "GROUP_PERMISSION_FACILITY_CONTACT_DELETE",
                    "GROUP_PERMISSION_PERSON_CONTACT_SET_RP",
                    "GROUP_PERMISSION_PERSON_CONTACT_CREATE",
                    "GROUP_PERMISSION_PERSON_CONTACT_READ",
                    "GROUP_PERMISSION_PERSON_CONTACT_UPDATE",
                    "GROUP_PERMISSION_PERSON_CONTACT_DELETE",
                    "GROUP_PERMISSION_EVENT_CREATE",
                    "GROUP_PERMISSION_EVENT_READ",
                    "GROUP_PERMISSION_EVENT_UPDATE",
                    "GROUP_PERMISSION_EVENT_DELETE",
                    "GROUP_PERMISSION_TASK_CREATE",
                    "GROUP_PERMISSION_TASK_READ",
                    "GROUP_PERMISSION_TASK_UPDATE",
                    "GROUP_PERMISSION_TASK_DELETE",
                    "GROUP_PERMISSION_TASK_COMPLETE_VIA_UPLOAD",
                    "GROUP_PERMISSION_MEDICATION_UPDATE",
                    "GROUP_PERMISSION_MEDICATION_READ",
                    "GROUP_PERMISSION_MEDICATION_ADMINISTER",
                    "GROUP_PERMISSION_MEDICATION_REACTIVATE",
                    "GROUP_PERMISSION_MEDICATION_CREATE",
                    "GROUP_PERMISSION_MEDICATION_REFILL",
                    "GROUP_PERMISSION_MEDICATION_RETROACTIVE_ADMINISTER",
                    "GROUP_PERMISSION_MEDICATION_CONTROLLED_COUNT_UPDATE",
                    "GROUP_PERMISSION_MEDICATION_CONTROLLED_COUNT_RECONCILE",
                    "GROUP_PERMISSION_INCIDENT_CREATE",
                    "GROUP_PERMISSION_INCIDENT_READ",
                    "GROUP_PERMISSION_INCIDENT_UPDATE",
                    "GROUP_PERMISSION_INCIDENT_UPDATE_ALL",
                    "GROUP_PERMISSION_INCIDENT_DELETE",
                    "GROUP_PERMISSION_INCIDENT_COMMENT_DELETE",
                    "GROUP_PERMISSION_INCIDENT_ATTACHMENT_DELETE",
                    "GROUP_PERMISSION_INSIGHTS_READ",
                    "GROUP_PERMISSION_ROUTINE_READ",
                    "GROUP_PERMISSION_ROUTINE_UPDATE",
                    "GROUP_PERMISSION_ROUTINE_CREATE",
                    "GROUP_PERMISSION_ROUTINE_ADMINISTER",
                    "GROUP_PERMISSION_ROUTINE_RETROACTIVE_ADMINISTER",
                    "GROUP_PERMISSION_SUPERSET_DASHBOARD_READ",
                    "GROUP_PERMISSION_BILLING_SUPERSET_DASHBOARD_READ",
                    "GROUP_PERMISSION_VITAL_CREATE",
                    "GROUP_PERMISSION_VITAL_READ",
                    "GROUP_PERMISSION_VITAL_UPDATE",
                    "GROUP_PERMISSION_VITAL_DELETE",
                    "GROUP_PERMISSION_INCIDENT_ACTION_CREATE",
                    "GROUP_PERMISSION_INCIDENT_ACTION_READ",
                    "GROUP_PERMISSION_INCIDENT_ACTION_UPDATE",
                    "GROUP_PERMISSION_INCIDENT_ACTION_DELETE",
                    "GROUP_PERMISSION_INCIDENT_ON_ALERT",
                    "GROUP_PERMISSION_USER_PASSWORD_UPDATE",
                    "GROUP_PERMISSION_USER_RESET_MFA",
                    "GROUP_PERMISSION_INCIDENT_STATUS_UPDATE",
                    "GROUP_PERMISSION_SHIFT_READ",
                    "GROUP_PERMISSION_MED_PASSES_READ",
                    "GROUP_PERMISSION_MED_PASSES_REOPEN",
                    "GROUP_PERMISSION_FACILITY_MED_GROUPS_UPDATE",
                    "GROUP_PERMISSION_ORG_INTEGRATION_CREATE",
                    "GROUP_PERMISSION_ORG_INTEGRATION_READ",
                    "GROUP_PERMISSION_ORG_INTEGRATION_UPDATE",
                    "GROUP_PERMISSION_ORG_INTEGRATION_DELETE",
                    "GROUP_PERMISSION_ORG_INTEGRATION_EXECUTE",
                    "GROUP_PERMISSION_SETTINGS_READ",
                    "GROUP_PERMISSION_PROFILE_PHOTO_READ",
                    "GROUP_PERMISSION_UI_PERSON_DETAILS_EDIT",
                    "GROUP_PERMISSION_UI_SEE_DOCUMENTS_TAB",
                    "GROUP_PERMISSION_UI_SEE_DETAILS_TAB",
                    "GROUP_PERMISSION_UI_SEE_EMAR_LINK"
                ]
            },
            "com.august.protos.permission.GroupType": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "GROUP_TYPE_SUPER_USER",
                    "GROUP_TYPE_ORGANIZATION_ADMIN",
                    "GROUP_TYPE_RESPONSIBLE_PARTY",
                    "GROUP_TYPE_BILLING",
                    "GROUP_TYPE_MED_TECH",
                    "GROUP_TYPE_FRONT_DESK",
                    "GROUP_TYPE_TOOL_USER",
                    "GROUP_TYPE_SOCIAL_WORKER",
                    "GROUP_TYPE_NURSE",
                    "GROUP_TYPE_FACILITY_DIRECTOR",
                    "GROUP_TYPE_API_WRITE",
                    "GROUP_TYPE_API_READ",
                    "GROUP_TYPE_DEMO_USER",
                    "GROUP_TYPE_ORG_INTEGRATION_SERVICE_ACCOUNT",
                    "GROUP_TYPE_EXTERNAL_CONTACT",
                    "GROUP_TYPE_PHARMACIST",
                    "GROUP_TYPE_MED_TECH_SUPERVISOR",
                    "GROUP_TYPE_ANALYST",
                    "GROUP_TYPE_FACILITY_STAFF",
                    "GROUP_TYPE_FACILITY_SALES_AND_MARKETING",
                    "GROUP_TYPE_FACILITY_USER_MANAGEMENT",
                    "GROUP_TYPE_ORG_USER_MANAGEMENT",
                    "GROUP_TYPE_CUSTOM_GROUP",
                    "GROUP_TYPE_CAREGIVER",
                    "GROUP_TYPE_CAREGIVER_PLUS_EHR",
                    "GROUP_TYPE_PAYER",
                    "GROUP_TYPE_SALES_AND_MARKETING_PLUS_BILLING",
                    "GROUP_TYPE_PHYSICIAN",
                    "GROUP_TYPE_SURVEYOR",
                    "GROUP_TYPE_BILLING_ADMIN",
                    "GROUP_TYPE_BILLING_REGULAR",
                    "GROUP_TYPE_BILLING_LIMITED",
                    "GROUP_TYPE_BILLING_BASIC",
                    "GROUP_TYPE_BILLING_IMPLEMENTATION"
                ]
            },
            "com.august.protos.permission.Group": {
                "properties": {
                    "groupType": {
                        "$ref": "#/components/schemas/com.august.protos.permission.GroupType"
                    },
                    "groupPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.permission.GroupPermission"
                        }
                    },
                    "personMatcher": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.permission.PersonMatcher"
                    },
                    "customUserGroupId": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "displayName": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "groupType",
                    "groupPermissions"
                ]
            },
            "com.august.protos.human_name.HumanName.NameUse": {
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "required": [
                    "value"
                ],
                "type": "string",
                "enum": [
                    "NAME_USE_USUAL",
                    "NAME_USE_OFFICIAL",
                    "NAME_USE_NICKNAME"
                ]
            },
            "com.august.protos.human_name.HumanName": {
                "properties": {
                    "use": {
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName.NameUse"
                    },
                    "family": {
                        "type": "string",
                        "nullable": true
                    },
                    "given": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "prefix": {
                        "type": "string",
                        "nullable": true
                    },
                    "suffix": {
                        "type": "string",
                        "nullable": true
                    },
                    "maiden": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "use",
                    "given"
                ]
            },
            "com.august.protos.user.UserAccount": {
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "name": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.human_name.HumanName"
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "username": {
                        "type": "string",
                        "nullable": true
                    },
                    "preferredUsername": {
                        "type": "string",
                        "nullable": true
                    },
                    "phoneNumber": {
                        "type": "string",
                        "nullable": true
                    },
                    "readOnly": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "intercomIdentity": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.permission.Group"
                        }
                    },
                    "featureFlags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lastLoginAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "hasSecurityViolation": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "mfaEnabled": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "emarPinLastGeneratedAt": {
                        "nullable": true,
                        "type": "string",
                        "format": "date-time"
                    },
                    "configuredMfaMethods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/com.august.protos.user.MfaMethod"
                        }
                    },
                    "mfaStatus": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.user.MfaStatus"
                    }
                },
                "required": [
                    "groups",
                    "featureFlags",
                    "isActive",
                    "configuredMfaMethods"
                ]
            },
            "com.august.protos.snapshot.FileMetaData": {
                "properties": {
                    "fileName": {
                        "type": "string",
                        "nullable": true
                    },
                    "contentType": {
                        "type": "string",
                        "nullable": true
                    },
                    "fileLength": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "storageId": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "com.august.models.billing.JournalEntryGeneration": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "accountingSystem": {
                        "type": "string",
                        "nullable": true
                    },
                    "externalId": {
                        "type": "string",
                        "nullable": true
                    },
                    "facilityId": {
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-08-22"
                    },
                    "createdBy": {
                        "nullable": true,
                        "type": "string",
                        "format": "long",
                        "example": "1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finalized": {
                        "type": "boolean"
                    },
                    "fileMetaData": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                    }
                },
                "required": [
                    "id",
                    "facilityId",
                    "endDate",
                    "createdAt",
                    "updatedAt",
                    "finalized"
                ]
            },
            "com.august.models.billing.JournalEntryGenerationResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/com.august.models.billing.JournalEntryGeneration"
                    },
                    "user": {
                        "nullable": true,
                        "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                    }
                },
                "required": [
                    "data"
                ]
            },
            "AnyValue": {
                "description": "Can be anything: string, number, array, object, etc. (except `null`)"
            },
            "PersonMergePatch": {
                "example": {
                    "name": [
                        {
                            "text": "Miraculo"
                        }
                    ]
                }
            },
            "JsonPatch": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "op": {
                            "type": "string"
                        },
                        "path": {
                            "type": "string"
                        },
                        "value": {
                            "$ref": "#/components/schemas/AnyValue"
                        }
                    },
                    "required": [
                        "op",
                        "path"
                    ]
                },
                "example": [
                    {
                        "op": "add",
                        "path": "/comment",
                        "value": "Hello"
                    }
                ]
            },
            "SnapshotData": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.snapshot.Snapshot.Data"
                    }
                ],
                "example": {
                    "uploadInfo": {
                        "notes": "",
                        "polst": {
                            "date_signed": {
                                "year": 2022,
                                "month": 5,
                                "day": 22
                            },
                            "cpr_code": "CPR_ATTEMPT_RESUSCITATION"
                        }
                    }
                }
            },
            "UserAccount": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.user.UserAccount"
                    }
                ],
                "example": {
                    "name": {
                        "family": "Steen",
                        "given": [
                            "Mango"
                        ]
                    },
                    "email": "mangosteen@augusthealth.com",
                    "groups": [
                        {
                            "groupType": "GROUP_TYPE_SOCIAL_WORKER",
                            "personMatcher": {
                                "organizationId": 5,
                                "facilityId": 10,
                                "personId": 25
                            }
                        }
                    ]
                }
            },
            "CustomFacilityField": {
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "text": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "image": {
                                "$ref": "#/components/schemas/com.august.protos.snapshot.FileMetaData"
                            }
                        }
                    }
                ]
            },
            "Incident": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.incidents.Incident"
                    }
                ],
                "example": {
                    "personId": 1140,
                    "detail": {
                        "incidentDetail": {
                            "location": "INCIDENT_LOCATION_BATHROOM",
                            "note": "Resident fell in bathroom",
                            "status": "INCIDENT_STATUS_OPEN",
                            "types": [
                                "INCIDENT_TYPE_FALL"
                            ],
                            "incidentActions": [
                                {
                                    "type": "INCIDENT_ACTION_TYPE_NOTIFY_GP",
                                    "status": "INCIDENT_ACTION_STATUS_OPEN"
                                },
                                {
                                    "type": "INCIDENT_ACTION_TYPE_NOTIFY_RP",
                                    "status": "INCIDENT_ACTION_STATUS_OPEN"
                                }
                            ],
                            "injuries": {
                                "state": "INCIDENT_ADDITIONAL_DETAIL_STATE_YES"
                            }
                        }
                    },
                    "occurredAt": {
                        "date": {
                            "year": 2022,
                            "month": 5,
                            "day": 22
                        }
                    }
                }
            },
            "IncidentMergePatch": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.incidents.Incident"
                    }
                ],
                "example": {
                    "detail": {
                        "incidentDetail": {
                            "location": "INCIDENT_LOCATION_BATHROOM",
                            "note": "Resident fell in bathroom",
                            "status": "INCIDENT_STATUS_COMPLETED",
                            "types": [
                                "INCIDENT_TYPE_FALL"
                            ],
                            "incidentActions": [
                                {
                                    "type": "INCIDENT_ACTION_TYPE_NOTIFY_GP",
                                    "status": "INCIDENT_ACTION_STATUS_COMPLETED"
                                },
                                {
                                    "type": "INCIDENT_ACTION_TYPE_NOTIFY_RP",
                                    "status": "INCIDENT_ACTION_STATUS_COMPLETED"
                                }
                            ],
                            "injuries": {
                                "state": "INCIDENT_ADDITIONAL_DETAIL_STATE_YES"
                            },
                            "medicalTreatment": {
                                "state": "INCIDENT_ADDITIONAL_DETAIL_STATE_YES"
                            }
                        }
                    }
                }
            },
            "Report": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.report.Report"
                    }
                ],
                "example": {
                    "description": "This is an example report.",
                    "fields": [
                        {
                            "displayName": "august field",
                            "fieldAccessor": {
                                "singleField": {
                                    "augustField": "AUGUST_FIELD_TYPE_NAME"
                                }
                            }
                        },
                        {
                            "displayName": "report field",
                            "fieldAccessor": {
                                "singleField": {
                                    "reportField": "REPORT_ONLY_FIELD_COVID_VACCINES"
                                }
                            }
                        },
                        {
                            "displayName": "join field",
                            "fieldAccessor": {
                                "joinField": {
                                    "fields": [
                                        {
                                            "augustField": "AUGUST_FIELD_TYPE_NAME"
                                        },
                                        {
                                            "augustField": "AUGUST_FIELD_TYPE_DATE_OF_BIRTH"
                                        }
                                    ],
                                    "format": "{0} born {1}"
                                }
                            }
                        },
                        {
                            "displayName": "converted field",
                            "fieldAccessor": {
                                "singleField": {
                                    "augustField": "AUGUST_FIELD_TYPE_ON_HOSPICE"
                                },
                                "conversions": {
                                    "true": "yes",
                                    "false": ""
                                }
                            }
                        }
                    ],
                    "filters": [
                        {
                            "dateFilter": {
                                "operator": "DATE_FILTER_OPERATION_GREATER_THAN",
                                "field": "AUGUST_DATE_FILTER_FIELD_BIRTH_DATE",
                                "daysFromNow": -22265
                            }
                        },
                        {
                            "fieldAccessorFilter": {
                                "operator": "STRING_FILTER_OPERATION_CONTAINS",
                                "accessor": {
                                    "augustField": "AUGUST_FIELD_TYPE_NAME"
                                },
                                "arg": "Josh"
                            }
                        }
                    ]
                }
            },
            "Vital": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.vital.Vital"
                    }
                ],
                "example": {
                    "recordedAt": "2022-11-30T22:59:09.252Z",
                    "panel": {
                        "weight": {
                            "value": 160,
                            "unit": "WEIGHT_UNIT_POUNDS"
                        },
                        "height": {
                            "value": 72,
                            "unit": "HEIGHT_UNIT_INCHES"
                        }
                    }
                }
            },
            "WriteableBillingEvent": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/BillingEventData"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/com.august.models.MetaData"
                    }
                }
            },
            "BillingEventData": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RESIDENT_STATUS_CHANGED"
                    },
                    {
                        "$ref": "#/components/schemas/ROOM_CHANGED"
                    }
                ],
                "discriminator": {
                    "propertyName": "eventType"
                }
            },
            "RESIDENT_STATUS_CHANGED": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.models.billing.ResidentStatusChangedEvent"
                    }
                ],
                "properties": {
                    "eventType": {
                        "type": "string",
                        "enum": [
                            "RESIDENT_STATUS_CHANGED"
                        ]
                    }
                }
            },
            "ROOM_CHANGED": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.models.billing.RoomChangedEvent"
                    }
                ],
                "properties": {
                    "eventType": {
                        "type": "string",
                        "enum": [
                            "RESIDENT_STATUS_CHANGED"
                        ]
                    }
                }
            },
            "Created": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer"
                            }
                        }
                    },
                    "meta": {
                        "type": "object"
                    }
                },
                "example": {
                    "data": {
                        "id": 1
                    },
                    "meta": {
                        "hello": "Created"
                    }
                }
            },
            "Updated": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "meta": {
                        "type": "object"
                    }
                },
                "example": {
                    "data": {},
                    "meta": {
                        "hello": "Updated"
                    }
                }
            },
            "Deleted": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "meta": {
                        "type": "object"
                    }
                },
                "example": {
                    "data": {},
                    "meta": {
                        "hello": "Deleted"
                    }
                }
            },
            "AuthParameters": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/com.august.protos.api.token.AuthParameters"
                    }
                ],
                "example": {
                    "credentials": {
                        "username": "my-api-username",
                        "password": "my-api-password"
                    }
                }
            }
        },
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer"
            },
            "Pharmerica": {
                "type": "http",
                "scheme": "basic"
            },
            "SuiteRx": {
                "type": "http",
                "scheme": "basic"
            },
            "DigitalRx": {
                "type": "http",
                "scheme": "basic"
            },
            "CookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "AugustSession"
            },
            "TemporaryCookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "AugustTemporarySession"
            }
        },
        "responses": {
            "Error": {
                "description": "A response containing a list of errors",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/com.august.protos.api.error_response.ErrorResponse"
                        }
                    }
                }
            },
            "Created": {
                "description": "A response containing the id and any meta data about the creation",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Created"
                        }
                    }
                }
            },
            "Updated": {
                "description": "A successful update response",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Updated"
                        }
                    }
                }
            },
            "Deleted": {
                "description": "A successful deleted response",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Deleted"
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "accounting"
        },
        {
            "name": "assessment"
        },
        {
            "name": "billing"
        },
        {
            "name": "billing_payer"
        },
        {
            "name": "billing_payment"
        },
        {
            "name": "callback"
        },
        {
            "name": "care_group"
        },
        {
            "name": "care_track"
        },
        {
            "name": "charge"
        },
        {
            "name": "contact"
        },
        {
            "name": "controlled_count"
        },
        {
            "name": "dashboard"
        },
        {
            "name": "data_import"
        },
        {
            "name": "email"
        },
        {
            "name": "emar"
        },
        {
            "name": "event"
        },
        {
            "name": "facility"
        },
        {
            "name": "form"
        },
        {
            "name": "immunization"
        },
        {
            "name": "incident"
        },
        {
            "name": "incoming_file"
        },
        {
            "name": "med_group"
        },
        {
            "name": "med_pass"
        },
        {
            "name": "med_pass_occurrence_sign_off"
        },
        {
            "name": "medication"
        },
        {
            "name": "medication_administration"
        },
        {
            "name": "medication_order"
        },
        {
            "name": "notification_subscription"
        },
        {
            "name": "org_facility_settings"
        },
        {
            "name": "org_integration"
        },
        {
            "name": "organization"
        },
        {
            "name": "person"
        },
        {
            "name": "pharmacy_integration"
        },
        {
            "name": "pharmacy_message"
        },
        {
            "name": "pharmacy_refill"
        },
        {
            "name": "recurring_charge"
        },
        {
            "name": "report"
        },
        {
            "name": "room"
        },
        {
            "name": "routes"
        },
        {
            "name": "routine"
        },
        {
            "name": "routine_administration"
        },
        {
            "name": "routine_order"
        },
        {
            "name": "scheduled_job"
        },
        {
            "name": "service_plan"
        },
        {
            "name": "shift"
        },
        {
            "name": "shift_care_group"
        },
        {
            "name": "snapshot"
        },
        {
            "name": "stats"
        },
        {
            "name": "task"
        },
        {
            "name": "user"
        },
        {
            "name": "user_session"
        },
        {
            "name": "util"
        },
        {
            "name": "vital"
        }
    ],
    "openapi": "3.0.3",
    "info": {
        "title": "August Health API",
        "description": "aka loquat",
        "version": "beta"
    },
    "security": [
        {
            "BearerAuth": []
        }
    ],
    "servers": [
        {
            "url": "http://localhost:9000"
        }
    ]
}